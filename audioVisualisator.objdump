
audioVisualisator.elf:     file format elf32-littlenios2
audioVisualisator.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000248

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000d9c8 memsz 0x0000d9c8 flags r-x
    LOAD off    0x0000e9e8 vaddr 0x0000d9e8 paddr 0x0000f8d0 align 2**12
         filesz 0x00001ee8 memsz 0x00001ee8 flags rw-
    LOAD off    0x000117b8 vaddr 0x000117b8 paddr 0x000117b8 align 2**12
         filesz 0x00000000 memsz 0x000073e4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000d4ac  00000248  00000248  00001248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000002f4  0000d6f4  0000d6f4  0000e6f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ee8  0000d9e8  0000f8d0  0000e9e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000073e4  000117b8  000117b8  000117b8  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  00018b9c  00018b9c  000108d0  2**0
                  CONTENTS
  7 .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM 00000000  09000000  09000000  000108d0  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000108d0  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000008d0  00000000  00000000  000108f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00016fda  00000000  00000000  000111c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00005970  00000000  00000000  000281a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00006d9f  00000000  00000000  0002db12  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002528  00000000  00000000  000348b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000039eb  00000000  00000000  00036ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000019c8  00000000  00000000  0003a7c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000020  00000000  00000000  0003c190  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000228  00000000  00000000  0003c1b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  000406ea  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  000406f0  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000406f5  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000406f6  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000406f7  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000406fb  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000406ff  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  00040703  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  0004070c  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  00040715  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  0004071e  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000005e  00000000  00000000  00040729  2**0
                  CONTENTS, READONLY
 30 .jdi          0000abe3  00000000  00000000  00040787  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     001ae257  00000000  00000000  0004b36a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000248 l    d  .text	00000000 .text
0000d6f4 l    d  .rodata	00000000 .rodata
0000d9e8 l    d  .rwdata	00000000 .rwdata
000117b8 l    d  .bss	00000000 .bss
00018b9c l    d  .SDRAM	00000000 .SDRAM
09000000 l    d  .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM	00000000 .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 D:/Dev/vhdl/dev/testNIOS/audioVisualisator_bsp//obj/HAL/src/crt0.o
00000280 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 Display.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 impure.c
0000ddf0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
0000172c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0000f82c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_env_lock.c
0000f830 l     O .rwdata	00000004 lockid
000117dc l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0000f834 l     O .rwdata	00000004 lockid
000117e4 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
00003280 l     F .text	00000048 OS_InitMisc
000032c8 l     F .text	0000006c OS_InitRdyList
00003434 l     F .text	000000e4 OS_InitTCBList
000031a0 l     F .text	000000e0 OS_InitEventList
00003334 l     F .text	00000080 OS_InitTaskIdle
000033b4 l     F .text	00000080 OS_InitTaskStat
000036a4 l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
000053c4 l     F .text	000000f4 OS_FlagTaskRdy
00005184 l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00009474 l     F .text	00000034 alt_dev_reg
0000e214 l     O .rwdata	0000106c JTAG_UART
0000f280 l     O .rwdata	00000030 AV_Config
0000f2b0 l     O .rwdata	00000030 Audio_Subsystem_Audio
0000f2e0 l     O .rwdata	0000002c Char_LCD_16x2
0000f30c l     O .rwdata	0000002c IrDA
0000f338 l     O .rwdata	0000002c Expansion_JP5
0000f364 l     O .rwdata	0000002c Green_LEDs
0000f390 l     O .rwdata	0000002c HEX3_HEX0
0000f3bc l     O .rwdata	0000002c HEX7_HEX4
0000f3e8 l     O .rwdata	0000002c Pushbuttons
0000f414 l     O .rwdata	0000002c Red_LEDs
0000f440 l     O .rwdata	0000002c Slider_Switches
0000f46c l     O .rwdata	00000038 PS2_Port
0000f4a4 l     O .rwdata	00000038 PS2_Port_Dual
0000f4dc l     O .rwdata	0000002c Serial_Port
0000f508 l     O .rwdata	00000034 USB
0000f53c l     O .rwdata	0000005c VGA_Subsystem_Char_Buf_Subsystem_Char_Buf_DMA
0000f598 l     O .rwdata	0000005c Video_In_Subsystem_Video_In_DMA
0000f5f4 l     O .rwdata	00000054 VGA_Subsystem_VGA_Pixel_DMA
0000f648 l     O .rwdata	0000002c SD_Card
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00009f94 l     F .text	000002a8 altera_avalon_jtag_uart_irq
0000a23c l     F .text	00000104 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000aa18 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0000bef4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000c020 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000c04c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000c2b0 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000c570 l     F .text	0000003c alt_get_errno
0000c5ac l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0001184c g     O .bss	00000004 alt_instruction_exception_handler
0000f882 g     O .rwdata	00000002 OSTaskNameSize
00001818 g     F .text	000000bc alt_main
00018a9c g     O .bss	00000100 alt_irq
0000b5d4 g     F .text	00000060 alt_up_ps2_disable_read_interrupt
00005be4 g     F .text	000000cc OS_MemInit
0000f8d0 g       *ABS*	00000000 __flash_rwdata_start
00009414 g     F .text	00000060 OSTimeSet
0000ab7c g     F .text	00000040 alt_up_character_lcd_send_cmd
000117b8 g     O .bss	00000004 colors
00001ef4 g     F .text	00000610 OSEventPendMulti
00018b9c g       *ABS*	00000000 __alt_heap_start
0000cc1c g     F .text	00000024 OSTaskCreateHook
00011878 g     O .bss	00002000 task1_stk
0000f85a g     O .rwdata	00000002 OSMboxEn
0000255c g     F .text	0000004c OSIntEnter
0000b3ec g     F .text	00000034 read_CE_bit
0000f86a g     O .rwdata	00000002 OSQEn
00001bc8 g     F .text	000000cc __malloc_unlock
0000cc84 g     F .text	00000020 OSTaskStatHook
0000b774 g     F .text	0000009c alt_up_ps2_read_data_byte_timeout
0000bc68 g     F .text	00000090 alt_up_rs232_read_fd
000117ec g     O .bss	00000001 OSLockNesting
0000f8a8 g     O .rwdata	00000002 OSDataSize
000117ed g     O .bss	00000001 OSRunning
0000ccc4 g     F .text	00000020 OSInitHookBegin
0000f8a0 g     O .rwdata	00000002 OSTmrSize
000117f0 g     O .bss	00000004 OSIdleCtr
0000c9cc g     F .text	00000024 altera_nios2_gen2_irq_init
0000ca9c g       .text	00000000 OSStartTsk
0000ab08 g     F .text	00000074 get_DDRAM_addr
000039e4 g     F .text	000002d4 OS_TCBInit
00000000 g     F .entry	0000001c __reset
0000f8a6 g     O .rwdata	00000002 OSTmrWheelTblSize
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000f846 g     O .rwdata	00000002 OSEventSize
000117f4 g     O .bss	00000001 OSPrioHighRdy
0000cc40 g     F .text	00000024 OSTaskDelHook
000117cc g     O .bss	00000004 errno
0000ca7c g       .text	00000000 OSStartHighRdy
00007eb0 g     F .text	000001e4 OSTaskCreateExt
00004ccc g     F .text	00000060 OSFlagPendGetFlagsRdy
0000f886 g     O .rwdata	00000002 OSTaskStatStkSize
00003e48 g     F .text	00000308 OSFlagAccept
0000621c g     F .text	000000b8 OSQFlush
00005cb0 g     F .text	00000140 OSQAccept
000117d4 g     O .bss	00000004 alt_argv
0001781c g       *ABS*	00000000 _gp
00007d04 g     F .text	000001ac OSTaskCreate
00007814 g     F .text	000004f0 OSTaskChangePrio
000117e8 g     O .bss	00000004 alt_heapsem
00003cb8 g     F .text	00000190 OSDebugInit
00008094 g     F .text	00000344 OSTaskDel
0000f69c g     O .rwdata	00000180 alt_fd_list
00015878 g     O .bss	00000370 OSFlagTbl
00002f80 g     F .text	000000b8 OS_EventTaskRemove
0000c1ec g     F .text	00000090 alt_find_dev
0000d120 g     F .text	00000148 memcpy
0000f870 g     O .rwdata	00000002 OSRdyTblSize
0000ad24 g     F .text	00000050 alt_up_character_lcd_write_fd
0000c374 g     F .text	0000007c alt_io_redirect
0000d6f4 g       *ABS*	00000000 __DTOR_END__
0000b2bc g     F .text	00000090 alt_up_irda_write_fd
0000bbf4 g     F .text	00000074 alt_up_rs232_read_data
0000cfbc g     F .text	0000009c alt_exception_cause_generated_bad_addr
00001c94 g     F .text	00000120 OSEventNameGet
0000f854 g     O .rwdata	00000002 OSFlagMax
000025a8 g     F .text	000000f8 OSIntExit
0000f88e g     O .rwdata	00000002 OSTCBSize
000117f5 g     O .bss	00000001 OSPrioCur
0000b0b8 g     F .text	00000040 alt_up_irda_get_used_space_in_read_FIFO
0000a498 g     F .text	000002bc altera_avalon_jtag_uart_read
000009f8 g     F .text	00000014 malloc
0000f874 g     O .rwdata	00000002 OSStkWidth
0000f868 g     O .rwdata	00000002 OSPtrSize
0000f848 g     O .rwdata	00000002 OSEventTblSize
0000b058 g     F .text	00000060 alt_up_irda_disable_read_interrupt
0000c9f0 g       .text	00000000 OSCtxSw
0000cf2c g     F .text	00000090 alt_icache_flush
000117c8 g     O .bss	00000004 __malloc_top_pad
000117f8 g     O .bss	00000004 OSTCBList
0001183c g     O .bss	00000004 alt_fd_list_lock
00015be8 g     O .bss	00000c30 OSMemTbl
000117fc g     O .bss	00000001 OSTickStepState
000012a4 g     F .text	00000054 _sbrk_r
000117bc g     O .bss	00000004 prevValues
0000f86c g     O .rwdata	00000002 OSQMax
00016818 g     O .bss	00000800 OSTaskStatStk
00005820 g     F .text	000000f0 OSMemNameGet
0000f84c g     O .rwdata	00000002 OSFlagEn
0000f892 g     O .rwdata	00000002 OSTimeTickHookEn
000066cc g     F .text	00000168 OSQPost
000054b8 g     F .text	000000a4 OS_FlagUnlink
0000f8bc g     O .rwdata	00000004 alt_max_fd
0000bb70 g     F .text	00000044 alt_up_rs232_check_parity
0000356c g     F .text	00000068 OS_MemCopy
000035d4 g     F .text	000000d0 OS_Sched
00005730 g     F .text	000000f0 OSMemGet
000086c0 g     F .text	000001b4 OSTaskNameSet
0000b420 g     F .text	00000030 read_num_bytes_available
000117c4 g     O .bss	00000004 __malloc_max_sbrked_mem
00011800 g     O .bss	00000004 OSCtxSwCtr
0000cca4 g     F .text	00000020 OSTimeTickHook
0000c3f0 g     F .text	00000180 alt_irq_register
0000f856 g     O .rwdata	00000002 OSFlagNameSize
0000b388 g     F .text	00000034 read_RI_bit
00003038 g     F .text	00000100 OS_EventTaskRemoveMulti
00002e30 g     F .text	00000150 OS_EventTaskWaitMulti
0000f86e g     O .rwdata	00000002 OSQSize
0000717c g     F .text	0000020c OSSemPend
0000f824 g     O .rwdata	00000004 _global_impure_ptr
0000f858 g     O .rwdata	00000002 OSLowestPrio
00018b9c g       *ABS*	00000000 __bss_end
0000cd24 g     F .text	00000024 OSTCBInitHook
0000f89e g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0000c8c4 g     F .text	00000108 alt_tick
0000f840 g     O .rwdata	00000002 OSEventEn
0000f89a g     O .rwdata	00000002 OSTmrCfgNameSize
0000b484 g     F .text	0000002c read_data_byte
000052e4 g     F .text	000000e0 OS_FlagInit
0000c828 g     F .text	0000009c alt_alarm_stop
0000b3bc g     F .text	00000030 read_RE_bit
0000f87c g     O .rwdata	00000002 OSTaskIdleStkSize
00011840 g     O .bss	00000004 alt_irq_active
00006db4 g     F .text	000000b0 OSSemAccept
00005a24 g     F .text	000000d8 OSMemPut
0000555c g     F .text	000001d4 OSMemCreate
00011804 g     O .bss	00000004 OSIdleCtrMax
0000b0f8 g     F .text	0000003c alt_up_irda_get_available_space_in_write_FIFO
000000fc g     F .exceptions	000000d8 alt_irq_handler
0000f674 g     O .rwdata	00000028 alt_dev_null
0000f890 g     O .rwdata	00000002 OSTicksPerSec
0000afc4 g     F .text	00000038 alt_up_character_lcd_cursor_blink_on
0000c9f0 g       .text	00000000 OSIntCtxSw
0000b634 g     F .text	00000074 alt_up_ps2_write_data_byte
0000c000 g     F .text	00000020 alt_dcache_flush_all
00011808 g     O .bss	00000004 OSTCBFreeList
0000f8d0 g       *ABS*	00000000 __ram_rwdata_end
00007388 g     F .text	0000016c OSSemPendAbort
0000f8b4 g     O .rwdata	00000008 alt_dev_list
0000f894 g     O .rwdata	00000002 OSVersionNbr
0000d9e8 g       *ABS*	00000000 __ram_rodata_end
0000bcf8 g     F .text	00000094 alt_up_rs232_write_fd
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
0000f83c g     O .rwdata	00000004 OSEndiannessTest
0000f84e g     O .rwdata	00000002 OSFlagGrpSize
00018b9c g       *ABS*	00000000 end
0000b964 g     F .text	00000098 alt_up_ps2_write_fd
0000b134 g     F .text	00000044 alt_up_irda_check_parity
00009e58 g     F .text	0000013c altera_avalon_jtag_uart_init
0000383c g     F .text	000000dc OS_TaskStat
000001d4 g     F .exceptions	00000074 alt_instruction_exception_entry
0000d6f4 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
0000aa94 g     F .text	00000074 alt_avalon_timer_sc_init
0000a754 g     F .text	000002c4 altera_avalon_jtag_uart_write
00003518 g     F .text	00000054 OS_MemClr
0000ac30 g     F .text	0000007c alt_up_character_lcd_write
0000cac0 g     F .text	0000015c OSTaskStkInit
00000284 g     F .text	00000258 task1
0000141c g     F .text	00000310 _free_r
00002b88 g     F .text	00000198 OS_EventTaskRdy
0000d540 g     F .text	00000180 __call_exitprocs
0001180c g     O .bss	00000001 OSCPUUsage
0000f81c g     O .rwdata	00000004 __malloc_sbrk_base
00000248 g     F .text	0000003c _start
000004dc g     F .text	0000002c task2
00011844 g     O .bss	00000004 _alt_tick_rate
000062d4 g     F .text	0000028c OSQPend
00008f80 g     F .text	00000104 OSTimeDly
00001244 g     F .text	00000060 rand
00011848 g     O .bss	00000004 _alt_nticks
000094e0 g     F .text	00000814 alt_sys_init
0000ae74 g     F .text	0000008c alt_up_character_lcd_shift_display
0000d428 g     F .text	00000118 __register_exitproc
0001180d g     O .bss	00000001 OSTaskCtr
0000b880 g     F .text	00000058 alt_up_ps2_clear_fifo
0000bb34 g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
00009084 g     F .text	00000160 OSTimeDlyHMSM
0000af00 g     F .text	0000008c alt_up_character_lcd_erase_pos
0000a340 g     F .text	00000068 altera_avalon_jtag_uart_close
0000d9e8 g       *ABS*	00000000 __ram_rwdata_start
0000d6f4 g       *ABS*	00000000 __ram_rodata_start
00011850 g     O .bss	00000028 __malloc_current_mallinfo
0000f842 g     O .rwdata	00000002 OSEventMax
000074f4 g     F .text	00000110 OSSemPost
0000272c g     F .text	000000dc OSSchedUnlock
00009cf4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000ce50 g     F .text	000000dc alt_get_fd
00011810 g     O .bss	00000004 OSMemFreeList
00002878 g     F .text	000000b0 OSStatInit
000050c0 g     F .text	000000c4 OSFlagQuery
0000f878 g     O .rwdata	00000002 OSTaskCreateExtEn
00000710 g     F .text	00000214 DisplayValues
0000d0a4 g     F .text	0000007c memcmp
00002b68 g     F .text	00000020 OS_Dummy
00009db4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00018b9c g       *ABS*	00000000 __alt_stack_base
00009e04 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0000affc g     F .text	0000005c alt_up_irda_enable_read_interrupt
00017018 g     O .bss	000001e0 OSQTbl
0000d9e8 g     O .rwdata	00000408 __malloc_av_
00011814 g     O .bss	00000004 OSTCBHighRdy
00011818 g     O .bss	00000004 OSQFreeList
0000ba94 g     F .text	00000060 alt_up_rs232_disable_read_interrupt
0000cd48 g     F .text	00000108 alt_find_file
0000c088 g     F .text	000000a4 alt_dev_llist_insert
00001aa8 g     F .text	00000120 __malloc_lock
000018d4 g     F .text	000000b0 sbrk
00001db4 g     F .text	00000140 OSEventNameSet
0001181c g     O .bss	00000001 OSRdyGrp
000117b8 g       *ABS*	00000000 __bss_start
0000d268 g     F .text	00000128 memset
00000508 g     F .text	000000ac main
000117d8 g     O .bss	00000004 alt_envp
000117c0 g     O .bss	00000004 __malloc_max_total_mem
00009d54 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000122c g     F .text	00000018 srand
0000d708 g     O .rodata	00000100 OSUnMapTbl
0000f872 g     O .rwdata	00000002 OSSemEn
0000ade8 g     F .text	0000008c alt_up_character_lcd_shift_cursor
00004d2c g     F .text	00000394 OSFlagPost
04000000 g       *ABS*	00000000 __alt_heap_limit
00002d20 g     F .text	00000110 OS_EventTaskWait
00013878 g     O .bss	00002000 task2_stk
0000b810 g     F .text	00000070 alt_up_ps2_read_data_byte
00003918 g     F .text	000000cc OS_TaskStatStkChk
000083d8 g     F .text	00000150 OSTaskDelReq
00000a20 g     F .text	0000080c _malloc_r
0000f8c0 g     O .rwdata	00000004 alt_errno
00002808 g     F .text	00000070 OSStart
00001a48 g     F .text	00000060 __env_unlock
00008874 g     F .text	000001d4 OSTaskResume
00005afc g     F .text	000000e8 OSMemQuery
0000f884 g     O .rwdata	00000002 OSTaskStatEn
0000b178 g     F .text	00000040 alt_up_irda_write_data
0000f85e g     O .rwdata	00000002 OSMemMax
00006834 g     F .text	00000170 OSQPostFront
0000b9fc g     F .text	0000003c alt_up_ps2_open_dev
0001181d g     O .bss	00000003 OSRdyTbl
0000f838 g     O .rwdata	00000002 OSDebugEn
0000abf4 g     F .text	0000003c alt_up_character_lcd_open_dev
000012f8 g     F .text	00000124 _malloc_trim_r
0000b578 g     F .text	0000005c alt_up_ps2_enable_read_interrupt
0000d6f4 g       *ABS*	00000000 __CTOR_END__
0000f850 g     O .rwdata	00000002 OSFlagNodeSize
0000f898 g     O .rwdata	00000002 OSTmrCfgMax
0000abbc g     F .text	00000038 alt_up_character_lcd_init
00005df0 g     F .text	000001ac OSQCreate
00008528 g     F .text	00000198 OSTaskNameGet
0000d6f4 g       *ABS*	00000000 __flash_rodata_start
000069a4 g     F .text	0000020c OSQPostOpt
00002928 g     F .text	00000220 OSTimeTick
0000f880 g     O .rwdata	00000002 OSTaskMax
0000d6f4 g       *ABS*	00000000 __DTOR_LIST__
00006e64 g     F .text	000000d8 OSSemCreate
0000f8a4 g     O .rwdata	00000002 OSTmrWheelSize
0000bd8c g     F .text	0000003c alt_up_rs232_open_dev
0000f87a g     O .rwdata	00000002 OSTaskDelEn
00007604 g     F .text	00000110 OSSemQuery
00005f9c g     F .text	00000280 OSQDel
00006560 g     F .text	0000016c OSQPendAbort
000094a8 g     F .text	00000038 alt_irq_init
0000c7c4 g     F .text	00000064 alt_release_fd
0000b450 g     F .text	00000034 read_data_valid
0000af8c g     F .text	00000038 alt_up_character_lcd_cursor_off
0000b710 g     F .text	00000064 alt_up_ps2_write_data_byte_with_ack
0000d058 g     F .text	00000014 atexit
000026a0 g     F .text	0000008c OSSchedLock
00004150 g     F .text	00000108 OSFlagCreate
0000f828 g     O .rwdata	00000004 _impure_ptr
000117d0 g     O .bss	00000004 alt_argc
0000c18c g     F .text	00000060 _do_dtors
0000f84a g     O .rwdata	00000002 OSEventMultiEn
09000000 g       *ABS*	00000000 __alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM
00004258 g     F .text	00000248 OSFlagDel
00011820 g     O .bss	00000004 OSEventFreeList
00000020 g       .exceptions	00000000 alt_irq_entry
00004714 g     F .text	000005b8 OSFlagPend
0000f896 g     O .rwdata	00000002 OSTmrEn
0000f8ac g     O .rwdata	00000008 alt_fs_list
00003718 g     F .text	00000074 OS_StrCopy
0000ba38 g     F .text	0000005c alt_up_rs232_enable_read_interrupt
0000bbb4 g     F .text	00000040 alt_up_rs232_write_data
0000f860 g     O .rwdata	00000002 OSMemNameSize
0000cce4 g     F .text	00000020 OSInitHookEnd
00000020 g       *ABS*	00000000 __ram_exceptions_start
0000f88c g     O .rwdata	00000002 OSTCBPrioTblMax
0000f888 g     O .rwdata	00000002 OSTaskStatStkChkEn
0000f85c g     O .rwdata	00000002 OSMemEn
0000f866 g     O .rwdata	00000002 OSMutexEn
0000f8d0 g       *ABS*	00000000 _edata
00018b9c g       *ABS*	00000000 _end
00011824 g     O .bss	00000001 OSIntNesting
00000248 g       *ABS*	00000000 __ram_exceptions_end
0000a3a8 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
000091e4 g     F .text	000001d4 OSTimeDlyResume
000045c8 g     F .text	0000014c OSFlagNameSet
00008a48 g     F .text	000001c0 OSTaskStkChk
0000f862 g     O .rwdata	00000002 OSMemSize
0000f820 g     O .rwdata	00000004 __malloc_trim_threshold
00011828 g     O .bss	00000004 OSTCBCur
0000d06c g     F .text	00000038 exit
0000b1b8 g     F .text	00000074 alt_up_irda_read_data
0000f864 g     O .rwdata	00000002 OSMemTblSize
0000b4b0 g     F .text	000000c8 alt_up_ps2_init
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000005b4 g     F .text	0000015c DisplayInit
00002504 g     F .text	00000058 OSInit
00008dec g     F .text	00000124 OSTaskQuery
0000acac g     F .text	00000078 alt_up_character_lcd_string
00006d0c g     F .text	000000a8 OS_QInit
0000378c g     F .text	00000054 OS_StrLen
0000b34c g     F .text	0000003c alt_up_irda_open_dev
00005910 g     F .text	00000114 OSMemNameSet
0000f87e g     O .rwdata	00000002 OSTaskProfileEn
0001182c g     O .bss	00000004 OSTime
000171f8 g     O .bss	00000800 OSTaskIdleStk
0000d6c0 g     F .text	00000034 _exit
0000bdc8 g     F .text	0000012c alt_alarm_start
000044a0 g     F .text	00000128 OSFlagNameGet
000093b8 g     F .text	0000005c OSTimeGet
0000b6a8 g     F .text	00000068 alt_up_ps2_wait_for_ack
0000d390 g     F .text	00000098 strlen
0000cc64 g     F .text	00000020 OSTaskSwHook
0000c670 g     F .text	00000154 open
000179f8 g     O .bss	00000b40 OSEventTbl
00000924 g     F .text	000000d4 DisplayBlock
00018538 g     O .bss	00000510 OSTCBTbl
00007714 g     F .text	00000100 OSSemSet
0000c27c g     F .text	00000034 alt_icache_flush_all
0000ad74 g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
0000f8c4 g     O .rwdata	00000004 alt_priority_mask
00006f3c g     F .text	00000240 OSSemDel
00011830 g     O .bss	00000004 OSFlagFreeList
0000f844 g     O .rwdata	00000002 OSEventNameSize
00011834 g     O .bss	00000001 OSStatRdy
00018a48 g     O .bss	00000054 OSTCBPrioTbl
00001984 g     F .text	000000c4 __env_lock
0000b8d8 g     F .text	0000008c alt_up_ps2_read_fd
0000f88a g     O .rwdata	00000002 OSTaskSwHookEn
0000b22c g     F .text	00000090 alt_up_irda_read_fd
0000f8c8 g     O .rwdata	00000008 alt_alarm_list
0000f852 g     O .rwdata	00000002 OSFlagWidth
0000c12c g     F .text	00000060 _do_ctors
0000baf4 g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
0000bf30 g     F .text	000000d0 close
000117e0 g     O .bss	00000004 alt_envsem
00011838 g     O .bss	00000004 OSIdleCtrRun
00002b48 g     F .text	00000020 OSVersion
0000f89c g     O .rwdata	00000002 OSTmrCfgWheelSize
00001794 g     F .text	00000084 alt_load
00008f10 g     F .text	00000070 OS_TaskStkClr
0000f876 g     O .rwdata	00000002 OSTaskCreateEn
00003138 g     F .text	00000068 OS_EventWaitListInit
0000cd04 g     F .text	00000020 OSTaskIdleHook
00000a0c g     F .text	00000014 free
00008c08 g     F .text	000001e4 OSTaskSuspend
000037e0 g     F .text	0000005c OS_TaskIdle
0000f8a2 g     O .rwdata	00000002 OSTmrTblSize
00006bb0 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409214 	ori	at,at,584
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <OSCtxSw_SWITCH_PC+0x68>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d40 	call	1d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <OSCtxSw_SWITCH_PC+0x68>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	000255c0 	call	255c <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001526 	beq	r2,zero,190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	008000b4 	movhi	r2,2
 140:	10a2a704 	addi	r2,r2,-30052
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008000b4 	movhi	r2,2
 158:	10a2a704 	addi	r2,r2,-30052
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	e17ffd17 	ldw	r5,-12(fp)
 174:	1009883a 	mov	r4,r2
 178:	183ee83a 	callr	r3
#endif
        break;
 17c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 180:	0005313a 	rdctl	r2,ipending
 184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 188:	e0bfff17 	ldw	r2,-4(fp)
 18c:	00000706 	br	1ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 190:	e0bffc17 	ldw	r2,-16(fp)
 194:	1085883a 	add	r2,r2,r2
 198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 19c:	e0bffd17 	ldw	r2,-12(fp)
 1a0:	10800044 	addi	r2,r2,1
 1a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a8:	003fe006 	br	12c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700012c>

    active = alt_irq_pending ();
 1ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b0:	e0bffb17 	ldw	r2,-20(fp)
 1b4:	103fda1e 	bne	r2,zero,120 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b8:	00025a80 	call	25a8 <OSIntExit>
}
 1bc:	0001883a 	nop
 1c0:	e037883a 	mov	sp,fp
 1c4:	dfc00117 	ldw	ra,4(sp)
 1c8:	df000017 	ldw	fp,0(sp)
 1cc:	dec00204 	addi	sp,sp,8
 1d0:	f800283a 	ret

000001d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d4:	defffb04 	addi	sp,sp,-20
 1d8:	dfc00415 	stw	ra,16(sp)
 1dc:	df000315 	stw	fp,12(sp)
 1e0:	df000304 	addi	fp,sp,12
 1e4:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e8:	000531fa 	rdctl	r2,exception
 1ec:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1f0:	e0bffd17 	ldw	r2,-12(fp)
 1f4:	10801f0c 	andi	r2,r2,124
 1f8:	1004d0ba 	srli	r2,r2,2
 1fc:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 200:	0005333a 	rdctl	r2,badaddr
 204:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 208:	d0a80c17 	ldw	r2,-24528(gp)
 20c:	10000726 	beq	r2,zero,22c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 210:	d0a80c17 	ldw	r2,-24528(gp)
 214:	e0fffd17 	ldw	r3,-12(fp)
 218:	e1bffe17 	ldw	r6,-8(fp)
 21c:	e17fff17 	ldw	r5,-4(fp)
 220:	1809883a 	mov	r4,r3
 224:	103ee83a 	callr	r2
 228:	00000206 	br	234 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 22c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 230:	0005883a 	mov	r2,zero
}
 234:	e037883a 	mov	sp,fp
 238:	dfc00117 	ldw	ra,4(sp)
 23c:	df000017 	ldw	fp,0(sp)
 240:	dec00204 	addi	sp,sp,8
 244:	f800283a 	ret

Disassembly of section .text:

00000248 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     248:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     24c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     250:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     254:	d69e0714 	ori	gp,gp,30748
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     258:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     25c:	1085ee14 	ori	r2,r2,6072

    movhi r3, %hi(__bss_end)
     260:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     264:	18e2e714 	ori	r3,r3,35740

    beq r2, r3, 1f
     268:	10c00326 	beq	r2,r3,278 <_start+0x30>

0:
    stw zero, (r2)
     26c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     270:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     274:	10fffd36 	bltu	r2,r3,26c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700026c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     278:	00017940 	call	1794 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     27c:	00018180 	call	1818 <alt_main>

00000280 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     280:	003fff06 	br	280 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000280>

00000284 <task1>:
#define TASK1_PRIORITY      1
#define TASK2_PRIORITY      2

/* Prints "Hello World" and sleeps for three seconds */
void task1(void* pdata)
{
     284:	defffb04 	addi	sp,sp,-20
     288:	dfc00415 	stw	ra,16(sp)
     28c:	df000315 	stw	fp,12(sp)
     290:	dc000215 	stw	r16,8(sp)
     294:	df000304 	addi	fp,sp,12
     298:	e13ffe15 	stw	r4,-8(fp)
	DisplayInit();
     29c:	00005b40 	call	5b4 <DisplayInit>
  while (1)
  { 
	  int* values;
	  values = malloc(sizeof(int) * 10);
     2a0:	01000a04 	movi	r4,40
     2a4:	00009f80 	call	9f8 <malloc>
     2a8:	e0bffd15 	stw	r2,-12(fp)
	  values[0] = rand()%8;
     2ac:	00012440 	call	1244 <rand>
     2b0:	1007883a 	mov	r3,r2
     2b4:	00a00034 	movhi	r2,32768
     2b8:	108001c4 	addi	r2,r2,7
     2bc:	1884703a 	and	r2,r3,r2
     2c0:	1000040e 	bge	r2,zero,2d4 <task1+0x50>
     2c4:	10bfffc4 	addi	r2,r2,-1
     2c8:	00fffe04 	movi	r3,-8
     2cc:	10c4b03a 	or	r2,r2,r3
     2d0:	10800044 	addi	r2,r2,1
     2d4:	1007883a 	mov	r3,r2
     2d8:	e0bffd17 	ldw	r2,-12(fp)
     2dc:	10c00015 	stw	r3,0(r2)
	  values[1] = rand()%8;
     2e0:	e0bffd17 	ldw	r2,-12(fp)
     2e4:	14000104 	addi	r16,r2,4
     2e8:	00012440 	call	1244 <rand>
     2ec:	1007883a 	mov	r3,r2
     2f0:	00a00034 	movhi	r2,32768
     2f4:	108001c4 	addi	r2,r2,7
     2f8:	1884703a 	and	r2,r3,r2
     2fc:	1000040e 	bge	r2,zero,310 <task1+0x8c>
     300:	10bfffc4 	addi	r2,r2,-1
     304:	00fffe04 	movi	r3,-8
     308:	10c4b03a 	or	r2,r2,r3
     30c:	10800044 	addi	r2,r2,1
     310:	80800015 	stw	r2,0(r16)
	  values[2] = rand()%8;
     314:	e0bffd17 	ldw	r2,-12(fp)
     318:	14000204 	addi	r16,r2,8
     31c:	00012440 	call	1244 <rand>
     320:	1007883a 	mov	r3,r2
     324:	00a00034 	movhi	r2,32768
     328:	108001c4 	addi	r2,r2,7
     32c:	1884703a 	and	r2,r3,r2
     330:	1000040e 	bge	r2,zero,344 <task1+0xc0>
     334:	10bfffc4 	addi	r2,r2,-1
     338:	00fffe04 	movi	r3,-8
     33c:	10c4b03a 	or	r2,r2,r3
     340:	10800044 	addi	r2,r2,1
     344:	80800015 	stw	r2,0(r16)
	  values[3] = rand()%8;
     348:	e0bffd17 	ldw	r2,-12(fp)
     34c:	14000304 	addi	r16,r2,12
     350:	00012440 	call	1244 <rand>
     354:	1007883a 	mov	r3,r2
     358:	00a00034 	movhi	r2,32768
     35c:	108001c4 	addi	r2,r2,7
     360:	1884703a 	and	r2,r3,r2
     364:	1000040e 	bge	r2,zero,378 <task1+0xf4>
     368:	10bfffc4 	addi	r2,r2,-1
     36c:	00fffe04 	movi	r3,-8
     370:	10c4b03a 	or	r2,r2,r3
     374:	10800044 	addi	r2,r2,1
     378:	80800015 	stw	r2,0(r16)
	  values[4] = rand()%8;
     37c:	e0bffd17 	ldw	r2,-12(fp)
     380:	14000404 	addi	r16,r2,16
     384:	00012440 	call	1244 <rand>
     388:	1007883a 	mov	r3,r2
     38c:	00a00034 	movhi	r2,32768
     390:	108001c4 	addi	r2,r2,7
     394:	1884703a 	and	r2,r3,r2
     398:	1000040e 	bge	r2,zero,3ac <task1+0x128>
     39c:	10bfffc4 	addi	r2,r2,-1
     3a0:	00fffe04 	movi	r3,-8
     3a4:	10c4b03a 	or	r2,r2,r3
     3a8:	10800044 	addi	r2,r2,1
     3ac:	80800015 	stw	r2,0(r16)
	  values[5] = rand()%8;
     3b0:	e0bffd17 	ldw	r2,-12(fp)
     3b4:	14000504 	addi	r16,r2,20
     3b8:	00012440 	call	1244 <rand>
     3bc:	1007883a 	mov	r3,r2
     3c0:	00a00034 	movhi	r2,32768
     3c4:	108001c4 	addi	r2,r2,7
     3c8:	1884703a 	and	r2,r3,r2
     3cc:	1000040e 	bge	r2,zero,3e0 <task1+0x15c>
     3d0:	10bfffc4 	addi	r2,r2,-1
     3d4:	00fffe04 	movi	r3,-8
     3d8:	10c4b03a 	or	r2,r2,r3
     3dc:	10800044 	addi	r2,r2,1
     3e0:	80800015 	stw	r2,0(r16)
	  values[6] = rand()%8;
     3e4:	e0bffd17 	ldw	r2,-12(fp)
     3e8:	14000604 	addi	r16,r2,24
     3ec:	00012440 	call	1244 <rand>
     3f0:	1007883a 	mov	r3,r2
     3f4:	00a00034 	movhi	r2,32768
     3f8:	108001c4 	addi	r2,r2,7
     3fc:	1884703a 	and	r2,r3,r2
     400:	1000040e 	bge	r2,zero,414 <task1+0x190>
     404:	10bfffc4 	addi	r2,r2,-1
     408:	00fffe04 	movi	r3,-8
     40c:	10c4b03a 	or	r2,r2,r3
     410:	10800044 	addi	r2,r2,1
     414:	80800015 	stw	r2,0(r16)
	  values[7] = rand()%8;
     418:	e0bffd17 	ldw	r2,-12(fp)
     41c:	14000704 	addi	r16,r2,28
     420:	00012440 	call	1244 <rand>
     424:	1007883a 	mov	r3,r2
     428:	00a00034 	movhi	r2,32768
     42c:	108001c4 	addi	r2,r2,7
     430:	1884703a 	and	r2,r3,r2
     434:	1000040e 	bge	r2,zero,448 <task1+0x1c4>
     438:	10bfffc4 	addi	r2,r2,-1
     43c:	00fffe04 	movi	r3,-8
     440:	10c4b03a 	or	r2,r2,r3
     444:	10800044 	addi	r2,r2,1
     448:	80800015 	stw	r2,0(r16)
	  values[8] = rand()%8;
     44c:	e0bffd17 	ldw	r2,-12(fp)
     450:	14000804 	addi	r16,r2,32
     454:	00012440 	call	1244 <rand>
     458:	1007883a 	mov	r3,r2
     45c:	00a00034 	movhi	r2,32768
     460:	108001c4 	addi	r2,r2,7
     464:	1884703a 	and	r2,r3,r2
     468:	1000040e 	bge	r2,zero,47c <task1+0x1f8>
     46c:	10bfffc4 	addi	r2,r2,-1
     470:	00fffe04 	movi	r3,-8
     474:	10c4b03a 	or	r2,r2,r3
     478:	10800044 	addi	r2,r2,1
     47c:	80800015 	stw	r2,0(r16)
	  values[9] = rand()%8;
     480:	e0bffd17 	ldw	r2,-12(fp)
     484:	14000904 	addi	r16,r2,36
     488:	00012440 	call	1244 <rand>
     48c:	1007883a 	mov	r3,r2
     490:	00a00034 	movhi	r2,32768
     494:	108001c4 	addi	r2,r2,7
     498:	1884703a 	and	r2,r3,r2
     49c:	1000040e 	bge	r2,zero,4b0 <task1+0x22c>
     4a0:	10bfffc4 	addi	r2,r2,-1
     4a4:	00fffe04 	movi	r3,-8
     4a8:	10c4b03a 	or	r2,r2,r3
     4ac:	10800044 	addi	r2,r2,1
     4b0:	80800015 	stw	r2,0(r16)
	  DisplayValues(values);
     4b4:	e13ffd17 	ldw	r4,-12(fp)
     4b8:	00007100 	call	710 <DisplayValues>
	  free(values);
     4bc:	e13ffd17 	ldw	r4,-12(fp)
     4c0:	0000a0c0 	call	a0c <free>
    OSTimeDlyHMSM(0, 0, 2, 0);
     4c4:	000f883a 	mov	r7,zero
     4c8:	01800084 	movi	r6,2
     4cc:	000b883a 	mov	r5,zero
     4d0:	0009883a 	mov	r4,zero
     4d4:	00090840 	call	9084 <OSTimeDlyHMSM>
  }
     4d8:	003f7106 	br	2a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70002a0>

000004dc <task2>:
}
/* Prints "Hello World" and sleeps for three seconds */
void task2(void* pdata)
{
     4dc:	defffd04 	addi	sp,sp,-12
     4e0:	dfc00215 	stw	ra,8(sp)
     4e4:	df000115 	stw	fp,4(sp)
     4e8:	df000104 	addi	fp,sp,4
     4ec:	e13fff15 	stw	r4,-4(fp)
  while (1)
  { 

    OSTimeDlyHMSM(100, 0, 3, 0);
     4f0:	000f883a 	mov	r7,zero
     4f4:	018000c4 	movi	r6,3
     4f8:	000b883a 	mov	r5,zero
     4fc:	01001904 	movi	r4,100
     500:	00090840 	call	9084 <OSTimeDlyHMSM>
  }
     504:	003ffa06 	br	4f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70004f0>

00000508 <main>:
}
/* The main function creates two task and starts multi-tasking */
int main(void)
{
     508:	defff904 	addi	sp,sp,-28
     50c:	dfc00615 	stw	ra,24(sp)
     510:	df000515 	stw	fp,20(sp)
     514:	df000504 	addi	fp,sp,20
  
  OSTaskCreateExt(task1,
     518:	d8000415 	stw	zero,16(sp)
     51c:	d8000315 	stw	zero,12(sp)
     520:	00820004 	movi	r2,2048
     524:	d8800215 	stw	r2,8(sp)
     528:	00800074 	movhi	r2,1
     52c:	10861e04 	addi	r2,r2,6264
     530:	d8800115 	stw	r2,4(sp)
     534:	00800044 	movi	r2,1
     538:	d8800015 	stw	r2,0(sp)
     53c:	01c00044 	movi	r7,1
     540:	01800074 	movhi	r6,1
     544:	318e1d04 	addi	r6,r6,14452
     548:	000b883a 	mov	r5,zero
     54c:	01000034 	movhi	r4,0
     550:	2100a104 	addi	r4,r4,644
     554:	0007eb00 	call	7eb0 <OSTaskCreateExt>
                  TASK_STACKSIZE,
                  NULL,
                  0);
              
               
  OSTaskCreateExt(task2,
     558:	d8000415 	stw	zero,16(sp)
     55c:	d8000315 	stw	zero,12(sp)
     560:	00820004 	movi	r2,2048
     564:	d8800215 	stw	r2,8(sp)
     568:	00800074 	movhi	r2,1
     56c:	108e1e04 	addi	r2,r2,14456
     570:	d8800115 	stw	r2,4(sp)
     574:	00800084 	movi	r2,2
     578:	d8800015 	stw	r2,0(sp)
     57c:	01c00084 	movi	r7,2
     580:	01800074 	movhi	r6,1
     584:	31961d04 	addi	r6,r6,22644
     588:	000b883a 	mov	r5,zero
     58c:	01000034 	movhi	r4,0
     590:	21013704 	addi	r4,r4,1244
     594:	0007eb00 	call	7eb0 <OSTaskCreateExt>
                  TASK2_PRIORITY,
                  task2_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);
  OSStart();
     598:	00028080 	call	2808 <OSStart>
  return 0;
     59c:	0005883a 	mov	r2,zero
}
     5a0:	e037883a 	mov	sp,fp
     5a4:	dfc00117 	ldw	ra,4(sp)
     5a8:	df000017 	ldw	fp,0(sp)
     5ac:	dec00204 	addi	sp,sp,8
     5b0:	f800283a 	ret

000005b4 <DisplayInit>:
#include "Display.h"

int *prevValues;
alt_u16 *colors;

void DisplayInit(){
     5b4:	defffc04 	addi	sp,sp,-16
     5b8:	dfc00315 	stw	ra,12(sp)
     5bc:	df000215 	stw	fp,8(sp)
     5c0:	df000204 	addi	fp,sp,8
	colors = malloc(sizeof(alt_u16) * 10);
     5c4:	01000504 	movi	r4,20
     5c8:	00009f80 	call	9f8 <malloc>
     5cc:	d0a7e715 	stw	r2,-24676(gp)
	prevValues = malloc(sizeof(int) * 10);
     5d0:	01000a04 	movi	r4,40
     5d4:	00009f80 	call	9f8 <malloc>
     5d8:	d0a7e815 	stw	r2,-24672(gp)

	int i;
	for(i=0;i<10;i++){
     5dc:	e03ffe15 	stw	zero,-8(fp)
     5e0:	00000906 	br	608 <DisplayInit+0x54>
		prevValues[i] = 0;
     5e4:	d0e7e817 	ldw	r3,-24672(gp)
     5e8:	e0bffe17 	ldw	r2,-8(fp)
     5ec:	1085883a 	add	r2,r2,r2
     5f0:	1085883a 	add	r2,r2,r2
     5f4:	1885883a 	add	r2,r3,r2
     5f8:	10000015 	stw	zero,0(r2)
void DisplayInit(){
	colors = malloc(sizeof(alt_u16) * 10);
	prevValues = malloc(sizeof(int) * 10);

	int i;
	for(i=0;i<10;i++){
     5fc:	e0bffe17 	ldw	r2,-8(fp)
     600:	10800044 	addi	r2,r2,1
     604:	e0bffe15 	stw	r2,-8(fp)
     608:	e0bffe17 	ldw	r2,-8(fp)
     60c:	10800290 	cmplti	r2,r2,10
     610:	103ff41e 	bne	r2,zero,5e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70005e4>
		prevValues[i] = 0;
	}

    volatile alt_u16 *pixelbuffer = 0x08000000;
     614:	00820034 	movhi	r2,2048
     618:	e0bfff15 	stw	r2,-4(fp)

    for(i=0;i<320*480;i++){
     61c:	e03ffe15 	stw	zero,-8(fp)
     620:	00000a06 	br	64c <DisplayInit+0x98>
    	pixelbuffer[i] = 0xFFFF;
     624:	e0bffe17 	ldw	r2,-8(fp)
     628:	1085883a 	add	r2,r2,r2
     62c:	1007883a 	mov	r3,r2
     630:	e0bfff17 	ldw	r2,-4(fp)
     634:	10c5883a 	add	r2,r2,r3
     638:	00ffffc4 	movi	r3,-1
     63c:	10c0000d 	sth	r3,0(r2)
		prevValues[i] = 0;
	}

    volatile alt_u16 *pixelbuffer = 0x08000000;

    for(i=0;i<320*480;i++){
     640:	e0bffe17 	ldw	r2,-8(fp)
     644:	10800044 	addi	r2,r2,1
     648:	e0bffe15 	stw	r2,-8(fp)
     64c:	e0fffe17 	ldw	r3,-8(fp)
     650:	008000b4 	movhi	r2,2
     654:	1095ffc4 	addi	r2,r2,22527
     658:	10fff20e 	bge	r2,r3,624 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000624>
    	pixelbuffer[i] = 0xFFFF;
    }

    colors[0] = 0b1111100000000000;
     65c:	d0a7e717 	ldw	r2,-24676(gp)
     660:	00fe0004 	movi	r3,-2048
     664:	10c0000d 	sth	r3,0(r2)
    colors[1] = 0b1111101110000000;
     668:	d0a7e717 	ldw	r2,-24676(gp)
     66c:	10800084 	addi	r2,r2,2
     670:	00fee004 	movi	r3,-1152
     674:	10c0000d 	sth	r3,0(r2)
    colors[2] = 0b1111111111100000;
     678:	d0a7e717 	ldw	r2,-24676(gp)
     67c:	10800104 	addi	r2,r2,4
     680:	00fff804 	movi	r3,-32
     684:	10c0000d 	sth	r3,0(r2)
    colors[3] = 0b0001111111100000;
     688:	d0a7e717 	ldw	r2,-24676(gp)
     68c:	10800184 	addi	r2,r2,6
     690:	00c7f804 	movi	r3,8160
     694:	10c0000d 	sth	r3,0(r2)
    colors[4] = 0b0000001111100000;
     698:	d0a7e717 	ldw	r2,-24676(gp)
     69c:	10800204 	addi	r2,r2,8
     6a0:	00c0f804 	movi	r3,992
     6a4:	10c0000d 	sth	r3,0(r2)
    colors[5] = 0b0000011000011111;
     6a8:	d0a7e717 	ldw	r2,-24676(gp)
     6ac:	10800284 	addi	r2,r2,10
     6b0:	00c187c4 	movi	r3,1567
     6b4:	10c0000d 	sth	r3,0(r2)
    colors[6] = 0b0000001010011111;
     6b8:	d0a7e717 	ldw	r2,-24676(gp)
     6bc:	10800304 	addi	r2,r2,12
     6c0:	00c0a7c4 	movi	r3,671
     6c4:	10c0000d 	sth	r3,0(r2)
    colors[7] = 0b0000000000111111;
     6c8:	d0a7e717 	ldw	r2,-24676(gp)
     6cc:	10800384 	addi	r2,r2,14
     6d0:	00c00fc4 	movi	r3,63
     6d4:	10c0000d 	sth	r3,0(r2)
    colors[8] = 0b0111100000011111;
     6d8:	d0a7e717 	ldw	r2,-24676(gp)
     6dc:	10800404 	addi	r2,r2,16
     6e0:	00de07c4 	movi	r3,30751
     6e4:	10c0000d 	sth	r3,0(r2)
    colors[9] = 0b1111100000001111;
     6e8:	d0a7e717 	ldw	r2,-24676(gp)
     6ec:	10800484 	addi	r2,r2,18
     6f0:	00fe03c4 	movi	r3,-2033
     6f4:	10c0000d 	sth	r3,0(r2)

}
     6f8:	0001883a 	nop
     6fc:	e037883a 	mov	sp,fp
     700:	dfc00117 	ldw	ra,4(sp)
     704:	df000017 	ldw	fp,0(sp)
     708:	dec00204 	addi	sp,sp,8
     70c:	f800283a 	ret

00000710 <DisplayValues>:

void DisplayValues(int* values)
{
     710:	defffa04 	addi	sp,sp,-24
     714:	dfc00515 	stw	ra,20(sp)
     718:	df000415 	stw	fp,16(sp)
     71c:	df000404 	addi	fp,sp,16
     720:	e13fff15 	stw	r4,-4(fp)
	//DisplayBlock(0, 0, 1,5, 0b1111100000000000);
	int i;
	for(i = 0; i < 10; i++){
     724:	e03ffd15 	stw	zero,-12(fp)
     728:	00007506 	br	900 <DisplayValues+0x1f0>
		int y;
		if(prevValues[i] > values[i]){
     72c:	d0e7e817 	ldw	r3,-24672(gp)
     730:	e0bffd17 	ldw	r2,-12(fp)
     734:	1085883a 	add	r2,r2,r2
     738:	1085883a 	add	r2,r2,r2
     73c:	1885883a 	add	r2,r3,r2
     740:	10c00017 	ldw	r3,0(r2)
     744:	e0bffd17 	ldw	r2,-12(fp)
     748:	1085883a 	add	r2,r2,r2
     74c:	1085883a 	add	r2,r2,r2
     750:	1009883a 	mov	r4,r2
     754:	e0bfff17 	ldw	r2,-4(fp)
     758:	1105883a 	add	r2,r2,r4
     75c:	10800017 	ldw	r2,0(r2)
     760:	10c0230e 	bge	r2,r3,7f0 <DisplayValues+0xe0>
			for(y = values[i]; y <= prevValues[i]; y++){
     764:	e0bffd17 	ldw	r2,-12(fp)
     768:	1085883a 	add	r2,r2,r2
     76c:	1085883a 	add	r2,r2,r2
     770:	1007883a 	mov	r3,r2
     774:	e0bfff17 	ldw	r2,-4(fp)
     778:	10c5883a 	add	r2,r2,r3
     77c:	10800017 	ldw	r2,0(r2)
     780:	e0bffe15 	stw	r2,-8(fp)
     784:	00001106 	br	7cc <DisplayValues+0xbc>
				DisplayBlock(i*32 + 2, (7-y)*32 - 18, 28, 28, 0xFFFF);
     788:	e0bffd17 	ldw	r2,-12(fp)
     78c:	1004917a 	slli	r2,r2,5
     790:	11000084 	addi	r4,r2,2
     794:	00c001c4 	movi	r3,7
     798:	e0bffe17 	ldw	r2,-8(fp)
     79c:	1885c83a 	sub	r2,r3,r2
     7a0:	1004917a 	slli	r2,r2,5
     7a4:	10fffb84 	addi	r3,r2,-18
     7a8:	00bfffd4 	movui	r2,65535
     7ac:	d8800015 	stw	r2,0(sp)
     7b0:	01c00704 	movi	r7,28
     7b4:	01800704 	movi	r6,28
     7b8:	180b883a 	mov	r5,r3
     7bc:	00009240 	call	924 <DisplayBlock>
	//DisplayBlock(0, 0, 1,5, 0b1111100000000000);
	int i;
	for(i = 0; i < 10; i++){
		int y;
		if(prevValues[i] > values[i]){
			for(y = values[i]; y <= prevValues[i]; y++){
     7c0:	e0bffe17 	ldw	r2,-8(fp)
     7c4:	10800044 	addi	r2,r2,1
     7c8:	e0bffe15 	stw	r2,-8(fp)
     7cc:	d0e7e817 	ldw	r3,-24672(gp)
     7d0:	e0bffd17 	ldw	r2,-12(fp)
     7d4:	1085883a 	add	r2,r2,r2
     7d8:	1085883a 	add	r2,r2,r2
     7dc:	1885883a 	add	r2,r3,r2
     7e0:	10c00017 	ldw	r3,0(r2)
     7e4:	e0bffe17 	ldw	r2,-8(fp)
     7e8:	18bfe70e 	bge	r3,r2,788 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000788>
     7ec:	00003406 	br	8c0 <DisplayValues+0x1b0>
				DisplayBlock(i*32 + 2, (7-y)*32 - 18, 28, 28, 0xFFFF);
			}
		} else if(prevValues[i] < values[i]){
     7f0:	d0e7e817 	ldw	r3,-24672(gp)
     7f4:	e0bffd17 	ldw	r2,-12(fp)
     7f8:	1085883a 	add	r2,r2,r2
     7fc:	1085883a 	add	r2,r2,r2
     800:	1885883a 	add	r2,r3,r2
     804:	10c00017 	ldw	r3,0(r2)
     808:	e0bffd17 	ldw	r2,-12(fp)
     80c:	1085883a 	add	r2,r2,r2
     810:	1085883a 	add	r2,r2,r2
     814:	1009883a 	mov	r4,r2
     818:	e0bfff17 	ldw	r2,-4(fp)
     81c:	1105883a 	add	r2,r2,r4
     820:	10800017 	ldw	r2,0(r2)
     824:	1880260e 	bge	r3,r2,8c0 <DisplayValues+0x1b0>
			for(y = prevValues[i]; y < values[i]; y++){
     828:	d0e7e817 	ldw	r3,-24672(gp)
     82c:	e0bffd17 	ldw	r2,-12(fp)
     830:	1085883a 	add	r2,r2,r2
     834:	1085883a 	add	r2,r2,r2
     838:	1885883a 	add	r2,r3,r2
     83c:	10800017 	ldw	r2,0(r2)
     840:	e0bffe15 	stw	r2,-8(fp)
     844:	00001506 	br	89c <DisplayValues+0x18c>
				DisplayBlock(i*32 + 2, (7-y)*32 - 18, 28, 28, colors[i]);
     848:	e0bffd17 	ldw	r2,-12(fp)
     84c:	1004917a 	slli	r2,r2,5
     850:	11000084 	addi	r4,r2,2
     854:	00c001c4 	movi	r3,7
     858:	e0bffe17 	ldw	r2,-8(fp)
     85c:	1885c83a 	sub	r2,r3,r2
     860:	1004917a 	slli	r2,r2,5
     864:	117ffb84 	addi	r5,r2,-18
     868:	d0e7e717 	ldw	r3,-24676(gp)
     86c:	e0bffd17 	ldw	r2,-12(fp)
     870:	1085883a 	add	r2,r2,r2
     874:	1885883a 	add	r2,r3,r2
     878:	1080000b 	ldhu	r2,0(r2)
     87c:	10bfffcc 	andi	r2,r2,65535
     880:	d8800015 	stw	r2,0(sp)
     884:	01c00704 	movi	r7,28
     888:	01800704 	movi	r6,28
     88c:	00009240 	call	924 <DisplayBlock>
		if(prevValues[i] > values[i]){
			for(y = values[i]; y <= prevValues[i]; y++){
				DisplayBlock(i*32 + 2, (7-y)*32 - 18, 28, 28, 0xFFFF);
			}
		} else if(prevValues[i] < values[i]){
			for(y = prevValues[i]; y < values[i]; y++){
     890:	e0bffe17 	ldw	r2,-8(fp)
     894:	10800044 	addi	r2,r2,1
     898:	e0bffe15 	stw	r2,-8(fp)
     89c:	e0bffd17 	ldw	r2,-12(fp)
     8a0:	1085883a 	add	r2,r2,r2
     8a4:	1085883a 	add	r2,r2,r2
     8a8:	1007883a 	mov	r3,r2
     8ac:	e0bfff17 	ldw	r2,-4(fp)
     8b0:	10c5883a 	add	r2,r2,r3
     8b4:	10800017 	ldw	r2,0(r2)
     8b8:	e0fffe17 	ldw	r3,-8(fp)
     8bc:	18bfe216 	blt	r3,r2,848 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000848>
				DisplayBlock(i*32 + 2, (7-y)*32 - 18, 28, 28, colors[i]);
			}
		}
		prevValues[i] = values[i];
     8c0:	d0e7e817 	ldw	r3,-24672(gp)
     8c4:	e0bffd17 	ldw	r2,-12(fp)
     8c8:	1085883a 	add	r2,r2,r2
     8cc:	1085883a 	add	r2,r2,r2
     8d0:	1887883a 	add	r3,r3,r2
     8d4:	e0bffd17 	ldw	r2,-12(fp)
     8d8:	1085883a 	add	r2,r2,r2
     8dc:	1085883a 	add	r2,r2,r2
     8e0:	1009883a 	mov	r4,r2
     8e4:	e0bfff17 	ldw	r2,-4(fp)
     8e8:	1105883a 	add	r2,r2,r4
     8ec:	10800017 	ldw	r2,0(r2)
     8f0:	18800015 	stw	r2,0(r3)

void DisplayValues(int* values)
{
	//DisplayBlock(0, 0, 1,5, 0b1111100000000000);
	int i;
	for(i = 0; i < 10; i++){
     8f4:	e0bffd17 	ldw	r2,-12(fp)
     8f8:	10800044 	addi	r2,r2,1
     8fc:	e0bffd15 	stw	r2,-12(fp)
     900:	e0bffd17 	ldw	r2,-12(fp)
     904:	10800290 	cmplti	r2,r2,10
     908:	103f881e 	bne	r2,zero,72c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700072c>
			} else {
				DisplayBlock(i*32 + 2, (8-y)*32 - 18, 28, 28, 0b1111111111111111);
			}
		}*/
	}
}
     90c:	0001883a 	nop
     910:	e037883a 	mov	sp,fp
     914:	dfc00117 	ldw	ra,4(sp)
     918:	df000017 	ldw	fp,0(sp)
     91c:	dec00204 	addi	sp,sp,8
     920:	f800283a 	ret

00000924 <DisplayBlock>:

void DisplayBlock(int x, int y, int width, int height, alt_u16 color){
     924:	defff704 	addi	sp,sp,-36
     928:	df000815 	stw	fp,32(sp)
     92c:	df000804 	addi	fp,sp,32
     930:	e13ffb15 	stw	r4,-20(fp)
     934:	e17ffc15 	stw	r5,-16(fp)
     938:	e1bffd15 	stw	r6,-12(fp)
     93c:	e1fffe15 	stw	r7,-8(fp)
     940:	e0800117 	ldw	r2,4(fp)
     944:	e0bfff0d 	sth	r2,-4(fp)
	volatile alt_u16 *pixelbuffer = 0x08000000;
     948:	00820034 	movhi	r2,2048
     94c:	e0bffa15 	stw	r2,-24(fp)
	int x1;
	int y1;
	height = height * 512;
     950:	e0bffe17 	ldw	r2,-8(fp)
     954:	1004927a 	slli	r2,r2,9
     958:	e0bffe15 	stw	r2,-8(fp)
	y = y * 512;
     95c:	e0bffc17 	ldw	r2,-16(fp)
     960:	1004927a 	slli	r2,r2,9
     964:	e0bffc15 	stw	r2,-16(fp)
	for(x1=x;x1<(width + x); x1++){
     968:	e0bffb17 	ldw	r2,-20(fp)
     96c:	e0bff815 	stw	r2,-32(fp)
     970:	00001706 	br	9d0 <DisplayBlock+0xac>
		for(y1 = y; y1 < (height + y); y1 += 512){
     974:	e0bffc17 	ldw	r2,-16(fp)
     978:	e0bff915 	stw	r2,-28(fp)
     97c:	00000c06 	br	9b0 <DisplayBlock+0x8c>
			pixelbuffer[x1 + y1] = color;
     980:	e0fff817 	ldw	r3,-32(fp)
     984:	e0bff917 	ldw	r2,-28(fp)
     988:	1885883a 	add	r2,r3,r2
     98c:	1085883a 	add	r2,r2,r2
     990:	1007883a 	mov	r3,r2
     994:	e0bffa17 	ldw	r2,-24(fp)
     998:	10c5883a 	add	r2,r2,r3
     99c:	e0ffff0b 	ldhu	r3,-4(fp)
     9a0:	10c0000d 	sth	r3,0(r2)
	int x1;
	int y1;
	height = height * 512;
	y = y * 512;
	for(x1=x;x1<(width + x); x1++){
		for(y1 = y; y1 < (height + y); y1 += 512){
     9a4:	e0bff917 	ldw	r2,-28(fp)
     9a8:	10808004 	addi	r2,r2,512
     9ac:	e0bff915 	stw	r2,-28(fp)
     9b0:	e0fffe17 	ldw	r3,-8(fp)
     9b4:	e0bffc17 	ldw	r2,-16(fp)
     9b8:	1885883a 	add	r2,r3,r2
     9bc:	e0fff917 	ldw	r3,-28(fp)
     9c0:	18bfef16 	blt	r3,r2,980 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000980>
	volatile alt_u16 *pixelbuffer = 0x08000000;
	int x1;
	int y1;
	height = height * 512;
	y = y * 512;
	for(x1=x;x1<(width + x); x1++){
     9c4:	e0bff817 	ldw	r2,-32(fp)
     9c8:	10800044 	addi	r2,r2,1
     9cc:	e0bff815 	stw	r2,-32(fp)
     9d0:	e0fffd17 	ldw	r3,-12(fp)
     9d4:	e0bffb17 	ldw	r2,-20(fp)
     9d8:	1885883a 	add	r2,r3,r2
     9dc:	e0fff817 	ldw	r3,-32(fp)
     9e0:	18bfe416 	blt	r3,r2,974 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000974>
		for(y1 = y; y1 < (height + y); y1 += 512){
			pixelbuffer[x1 + y1] = color;
		}
	}
}
     9e4:	0001883a 	nop
     9e8:	e037883a 	mov	sp,fp
     9ec:	df000017 	ldw	fp,0(sp)
     9f0:	dec00104 	addi	sp,sp,4
     9f4:	f800283a 	ret

000009f8 <malloc>:
     9f8:	00800074 	movhi	r2,1
     9fc:	10be0a04 	addi	r2,r2,-2008
     a00:	200b883a 	mov	r5,r4
     a04:	11000017 	ldw	r4,0(r2)
     a08:	0000a201 	jmpi	a20 <_malloc_r>

00000a0c <free>:
     a0c:	00800074 	movhi	r2,1
     a10:	10be0a04 	addi	r2,r2,-2008
     a14:	200b883a 	mov	r5,r4
     a18:	11000017 	ldw	r4,0(r2)
     a1c:	000141c1 	jmpi	141c <_free_r>

00000a20 <_malloc_r>:
     a20:	defff504 	addi	sp,sp,-44
     a24:	dc800315 	stw	r18,12(sp)
     a28:	dfc00a15 	stw	ra,40(sp)
     a2c:	df000915 	stw	fp,36(sp)
     a30:	ddc00815 	stw	r23,32(sp)
     a34:	dd800715 	stw	r22,28(sp)
     a38:	dd400615 	stw	r21,24(sp)
     a3c:	dd000515 	stw	r20,20(sp)
     a40:	dcc00415 	stw	r19,16(sp)
     a44:	dc400215 	stw	r17,8(sp)
     a48:	dc000115 	stw	r16,4(sp)
     a4c:	288002c4 	addi	r2,r5,11
     a50:	00c00584 	movi	r3,22
     a54:	2025883a 	mov	r18,r4
     a58:	18807f2e 	bgeu	r3,r2,c58 <_malloc_r+0x238>
     a5c:	047ffe04 	movi	r17,-8
     a60:	1462703a 	and	r17,r2,r17
     a64:	8800a316 	blt	r17,zero,cf4 <_malloc_r+0x2d4>
     a68:	8940a236 	bltu	r17,r5,cf4 <_malloc_r+0x2d4>
     a6c:	0001aa80 	call	1aa8 <__malloc_lock>
     a70:	00807dc4 	movi	r2,503
     a74:	1441e92e 	bgeu	r2,r17,121c <_malloc_r+0x7fc>
     a78:	8804d27a 	srli	r2,r17,9
     a7c:	1000a126 	beq	r2,zero,d04 <_malloc_r+0x2e4>
     a80:	00c00104 	movi	r3,4
     a84:	18811e36 	bltu	r3,r2,f00 <_malloc_r+0x4e0>
     a88:	8804d1ba 	srli	r2,r17,6
     a8c:	12000e44 	addi	r8,r2,57
     a90:	11c00e04 	addi	r7,r2,56
     a94:	4209883a 	add	r4,r8,r8
     a98:	04c00074 	movhi	r19,1
     a9c:	2109883a 	add	r4,r4,r4
     aa0:	9cf67a04 	addi	r19,r19,-9752
     aa4:	2109883a 	add	r4,r4,r4
     aa8:	9909883a 	add	r4,r19,r4
     aac:	24000117 	ldw	r16,4(r4)
     ab0:	213ffe04 	addi	r4,r4,-8
     ab4:	24009726 	beq	r4,r16,d14 <_malloc_r+0x2f4>
     ab8:	80800117 	ldw	r2,4(r16)
     abc:	01bfff04 	movi	r6,-4
     ac0:	014003c4 	movi	r5,15
     ac4:	1184703a 	and	r2,r2,r6
     ac8:	1447c83a 	sub	r3,r2,r17
     acc:	28c00716 	blt	r5,r3,aec <_malloc_r+0xcc>
     ad0:	1800920e 	bge	r3,zero,d1c <_malloc_r+0x2fc>
     ad4:	84000317 	ldw	r16,12(r16)
     ad8:	24008e26 	beq	r4,r16,d14 <_malloc_r+0x2f4>
     adc:	80800117 	ldw	r2,4(r16)
     ae0:	1184703a 	and	r2,r2,r6
     ae4:	1447c83a 	sub	r3,r2,r17
     ae8:	28fff90e 	bge	r5,r3,ad0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000ad0>
     aec:	3809883a 	mov	r4,r7
     af0:	01800074 	movhi	r6,1
     af4:	9c000417 	ldw	r16,16(r19)
     af8:	31b67a04 	addi	r6,r6,-9752
     afc:	32000204 	addi	r8,r6,8
     b00:	82013426 	beq	r16,r8,fd4 <_malloc_r+0x5b4>
     b04:	80c00117 	ldw	r3,4(r16)
     b08:	00bfff04 	movi	r2,-4
     b0c:	188e703a 	and	r7,r3,r2
     b10:	3c45c83a 	sub	r2,r7,r17
     b14:	00c003c4 	movi	r3,15
     b18:	18811f16 	blt	r3,r2,f98 <_malloc_r+0x578>
     b1c:	32000515 	stw	r8,20(r6)
     b20:	32000415 	stw	r8,16(r6)
     b24:	10007f0e 	bge	r2,zero,d24 <_malloc_r+0x304>
     b28:	00807fc4 	movi	r2,511
     b2c:	11c0fd36 	bltu	r2,r7,f24 <_malloc_r+0x504>
     b30:	3806d0fa 	srli	r3,r7,3
     b34:	01c00044 	movi	r7,1
     b38:	30800117 	ldw	r2,4(r6)
     b3c:	19400044 	addi	r5,r3,1
     b40:	294b883a 	add	r5,r5,r5
     b44:	1807d0ba 	srai	r3,r3,2
     b48:	294b883a 	add	r5,r5,r5
     b4c:	294b883a 	add	r5,r5,r5
     b50:	298b883a 	add	r5,r5,r6
     b54:	38c6983a 	sll	r3,r7,r3
     b58:	29c00017 	ldw	r7,0(r5)
     b5c:	2a7ffe04 	addi	r9,r5,-8
     b60:	1886b03a 	or	r3,r3,r2
     b64:	82400315 	stw	r9,12(r16)
     b68:	81c00215 	stw	r7,8(r16)
     b6c:	30c00115 	stw	r3,4(r6)
     b70:	2c000015 	stw	r16,0(r5)
     b74:	3c000315 	stw	r16,12(r7)
     b78:	2005d0ba 	srai	r2,r4,2
     b7c:	01400044 	movi	r5,1
     b80:	288a983a 	sll	r5,r5,r2
     b84:	19406f36 	bltu	r3,r5,d44 <_malloc_r+0x324>
     b88:	28c4703a 	and	r2,r5,r3
     b8c:	10000a1e 	bne	r2,zero,bb8 <_malloc_r+0x198>
     b90:	00bfff04 	movi	r2,-4
     b94:	294b883a 	add	r5,r5,r5
     b98:	2088703a 	and	r4,r4,r2
     b9c:	28c4703a 	and	r2,r5,r3
     ba0:	21000104 	addi	r4,r4,4
     ba4:	1000041e 	bne	r2,zero,bb8 <_malloc_r+0x198>
     ba8:	294b883a 	add	r5,r5,r5
     bac:	28c4703a 	and	r2,r5,r3
     bb0:	21000104 	addi	r4,r4,4
     bb4:	103ffc26 	beq	r2,zero,ba8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000ba8>
     bb8:	02bfff04 	movi	r10,-4
     bbc:	024003c4 	movi	r9,15
     bc0:	21800044 	addi	r6,r4,1
     bc4:	318d883a 	add	r6,r6,r6
     bc8:	318d883a 	add	r6,r6,r6
     bcc:	318d883a 	add	r6,r6,r6
     bd0:	998d883a 	add	r6,r19,r6
     bd4:	333ffe04 	addi	r12,r6,-8
     bd8:	2017883a 	mov	r11,r4
     bdc:	31800104 	addi	r6,r6,4
     be0:	34000017 	ldw	r16,0(r6)
     be4:	31fffd04 	addi	r7,r6,-12
     be8:	81c0041e 	bne	r16,r7,bfc <_malloc_r+0x1dc>
     bec:	0000fb06 	br	fdc <_malloc_r+0x5bc>
     bf0:	1801030e 	bge	r3,zero,1000 <_malloc_r+0x5e0>
     bf4:	84000317 	ldw	r16,12(r16)
     bf8:	81c0f826 	beq	r16,r7,fdc <_malloc_r+0x5bc>
     bfc:	80800117 	ldw	r2,4(r16)
     c00:	1284703a 	and	r2,r2,r10
     c04:	1447c83a 	sub	r3,r2,r17
     c08:	48fff90e 	bge	r9,r3,bf0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000bf0>
     c0c:	80800317 	ldw	r2,12(r16)
     c10:	81000217 	ldw	r4,8(r16)
     c14:	89400054 	ori	r5,r17,1
     c18:	81400115 	stw	r5,4(r16)
     c1c:	20800315 	stw	r2,12(r4)
     c20:	11000215 	stw	r4,8(r2)
     c24:	8463883a 	add	r17,r16,r17
     c28:	9c400515 	stw	r17,20(r19)
     c2c:	9c400415 	stw	r17,16(r19)
     c30:	18800054 	ori	r2,r3,1
     c34:	88800115 	stw	r2,4(r17)
     c38:	8a000315 	stw	r8,12(r17)
     c3c:	8a000215 	stw	r8,8(r17)
     c40:	88e3883a 	add	r17,r17,r3
     c44:	88c00015 	stw	r3,0(r17)
     c48:	9009883a 	mov	r4,r18
     c4c:	0001bc80 	call	1bc8 <__malloc_unlock>
     c50:	80800204 	addi	r2,r16,8
     c54:	00001b06 	br	cc4 <_malloc_r+0x2a4>
     c58:	04400404 	movi	r17,16
     c5c:	89402536 	bltu	r17,r5,cf4 <_malloc_r+0x2d4>
     c60:	0001aa80 	call	1aa8 <__malloc_lock>
     c64:	00800184 	movi	r2,6
     c68:	01000084 	movi	r4,2
     c6c:	04c00074 	movhi	r19,1
     c70:	1085883a 	add	r2,r2,r2
     c74:	9cf67a04 	addi	r19,r19,-9752
     c78:	1085883a 	add	r2,r2,r2
     c7c:	9885883a 	add	r2,r19,r2
     c80:	14000117 	ldw	r16,4(r2)
     c84:	10fffe04 	addi	r3,r2,-8
     c88:	80c0d926 	beq	r16,r3,ff0 <_malloc_r+0x5d0>
     c8c:	80c00117 	ldw	r3,4(r16)
     c90:	81000317 	ldw	r4,12(r16)
     c94:	00bfff04 	movi	r2,-4
     c98:	1884703a 	and	r2,r3,r2
     c9c:	81400217 	ldw	r5,8(r16)
     ca0:	8085883a 	add	r2,r16,r2
     ca4:	10c00117 	ldw	r3,4(r2)
     ca8:	29000315 	stw	r4,12(r5)
     cac:	21400215 	stw	r5,8(r4)
     cb0:	18c00054 	ori	r3,r3,1
     cb4:	10c00115 	stw	r3,4(r2)
     cb8:	9009883a 	mov	r4,r18
     cbc:	0001bc80 	call	1bc8 <__malloc_unlock>
     cc0:	80800204 	addi	r2,r16,8
     cc4:	dfc00a17 	ldw	ra,40(sp)
     cc8:	df000917 	ldw	fp,36(sp)
     ccc:	ddc00817 	ldw	r23,32(sp)
     cd0:	dd800717 	ldw	r22,28(sp)
     cd4:	dd400617 	ldw	r21,24(sp)
     cd8:	dd000517 	ldw	r20,20(sp)
     cdc:	dcc00417 	ldw	r19,16(sp)
     ce0:	dc800317 	ldw	r18,12(sp)
     ce4:	dc400217 	ldw	r17,8(sp)
     ce8:	dc000117 	ldw	r16,4(sp)
     cec:	dec00b04 	addi	sp,sp,44
     cf0:	f800283a 	ret
     cf4:	00800304 	movi	r2,12
     cf8:	90800015 	stw	r2,0(r18)
     cfc:	0005883a 	mov	r2,zero
     d00:	003ff006 	br	cc4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000cc4>
     d04:	01002004 	movi	r4,128
     d08:	02001004 	movi	r8,64
     d0c:	01c00fc4 	movi	r7,63
     d10:	003f6106 	br	a98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000a98>
     d14:	4009883a 	mov	r4,r8
     d18:	003f7506 	br	af0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000af0>
     d1c:	81000317 	ldw	r4,12(r16)
     d20:	003fde06 	br	c9c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000c9c>
     d24:	81c5883a 	add	r2,r16,r7
     d28:	11400117 	ldw	r5,4(r2)
     d2c:	9009883a 	mov	r4,r18
     d30:	29400054 	ori	r5,r5,1
     d34:	11400115 	stw	r5,4(r2)
     d38:	0001bc80 	call	1bc8 <__malloc_unlock>
     d3c:	80800204 	addi	r2,r16,8
     d40:	003fe006 	br	cc4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000cc4>
     d44:	9c000217 	ldw	r16,8(r19)
     d48:	00bfff04 	movi	r2,-4
     d4c:	85800117 	ldw	r22,4(r16)
     d50:	b0ac703a 	and	r22,r22,r2
     d54:	b4400336 	bltu	r22,r17,d64 <_malloc_r+0x344>
     d58:	b445c83a 	sub	r2,r22,r17
     d5c:	00c003c4 	movi	r3,15
     d60:	18805d16 	blt	r3,r2,ed8 <_malloc_r+0x4b8>
     d64:	05c00074 	movhi	r23,1
     d68:	00800074 	movhi	r2,1
     d6c:	1085f204 	addi	r2,r2,6088
     d70:	bdfe0704 	addi	r23,r23,-2020
     d74:	15400017 	ldw	r21,0(r2)
     d78:	b8c00017 	ldw	r3,0(r23)
     d7c:	00bfffc4 	movi	r2,-1
     d80:	858d883a 	add	r6,r16,r22
     d84:	8d6b883a 	add	r21,r17,r21
     d88:	1880ea26 	beq	r3,r2,1134 <_malloc_r+0x714>
     d8c:	ad4403c4 	addi	r21,r21,4111
     d90:	00bc0004 	movi	r2,-4096
     d94:	a8aa703a 	and	r21,r21,r2
     d98:	a80b883a 	mov	r5,r21
     d9c:	9009883a 	mov	r4,r18
     da0:	d9800015 	stw	r6,0(sp)
     da4:	00012a40 	call	12a4 <_sbrk_r>
     da8:	1029883a 	mov	r20,r2
     dac:	00bfffc4 	movi	r2,-1
     db0:	d9800017 	ldw	r6,0(sp)
     db4:	a080e826 	beq	r20,r2,1158 <_malloc_r+0x738>
     db8:	a180a636 	bltu	r20,r6,1054 <_malloc_r+0x634>
     dbc:	07000074 	movhi	fp,1
     dc0:	e7061404 	addi	fp,fp,6224
     dc4:	e0800017 	ldw	r2,0(fp)
     dc8:	a887883a 	add	r3,r21,r2
     dcc:	e0c00015 	stw	r3,0(fp)
     dd0:	3500e626 	beq	r6,r20,116c <_malloc_r+0x74c>
     dd4:	b9000017 	ldw	r4,0(r23)
     dd8:	00bfffc4 	movi	r2,-1
     ddc:	2080ee26 	beq	r4,r2,1198 <_malloc_r+0x778>
     de0:	a185c83a 	sub	r2,r20,r6
     de4:	10c5883a 	add	r2,r2,r3
     de8:	e0800015 	stw	r2,0(fp)
     dec:	a0c001cc 	andi	r3,r20,7
     df0:	1800bc26 	beq	r3,zero,10e4 <_malloc_r+0x6c4>
     df4:	a0e9c83a 	sub	r20,r20,r3
     df8:	00840204 	movi	r2,4104
     dfc:	a5000204 	addi	r20,r20,8
     e00:	10c7c83a 	sub	r3,r2,r3
     e04:	a545883a 	add	r2,r20,r21
     e08:	1083ffcc 	andi	r2,r2,4095
     e0c:	18abc83a 	sub	r21,r3,r2
     e10:	a80b883a 	mov	r5,r21
     e14:	9009883a 	mov	r4,r18
     e18:	00012a40 	call	12a4 <_sbrk_r>
     e1c:	00ffffc4 	movi	r3,-1
     e20:	10c0e126 	beq	r2,r3,11a8 <_malloc_r+0x788>
     e24:	1505c83a 	sub	r2,r2,r20
     e28:	1545883a 	add	r2,r2,r21
     e2c:	10800054 	ori	r2,r2,1
     e30:	e0c00017 	ldw	r3,0(fp)
     e34:	9d000215 	stw	r20,8(r19)
     e38:	a0800115 	stw	r2,4(r20)
     e3c:	a8c7883a 	add	r3,r21,r3
     e40:	e0c00015 	stw	r3,0(fp)
     e44:	84c00e26 	beq	r16,r19,e80 <_malloc_r+0x460>
     e48:	018003c4 	movi	r6,15
     e4c:	3580a72e 	bgeu	r6,r22,10ec <_malloc_r+0x6cc>
     e50:	81400117 	ldw	r5,4(r16)
     e54:	013ffe04 	movi	r4,-8
     e58:	b0bffd04 	addi	r2,r22,-12
     e5c:	1104703a 	and	r2,r2,r4
     e60:	2900004c 	andi	r4,r5,1
     e64:	2088b03a 	or	r4,r4,r2
     e68:	81000115 	stw	r4,4(r16)
     e6c:	01400144 	movi	r5,5
     e70:	8089883a 	add	r4,r16,r2
     e74:	21400115 	stw	r5,4(r4)
     e78:	21400215 	stw	r5,8(r4)
     e7c:	3080cd36 	bltu	r6,r2,11b4 <_malloc_r+0x794>
     e80:	00800074 	movhi	r2,1
     e84:	1085f104 	addi	r2,r2,6084
     e88:	11000017 	ldw	r4,0(r2)
     e8c:	20c0012e 	bgeu	r4,r3,e94 <_malloc_r+0x474>
     e90:	10c00015 	stw	r3,0(r2)
     e94:	00800074 	movhi	r2,1
     e98:	1085f004 	addi	r2,r2,6080
     e9c:	11000017 	ldw	r4,0(r2)
     ea0:	9c000217 	ldw	r16,8(r19)
     ea4:	20c0012e 	bgeu	r4,r3,eac <_malloc_r+0x48c>
     ea8:	10c00015 	stw	r3,0(r2)
     eac:	80c00117 	ldw	r3,4(r16)
     eb0:	00bfff04 	movi	r2,-4
     eb4:	1886703a 	and	r3,r3,r2
     eb8:	1c45c83a 	sub	r2,r3,r17
     ebc:	1c400236 	bltu	r3,r17,ec8 <_malloc_r+0x4a8>
     ec0:	00c003c4 	movi	r3,15
     ec4:	18800416 	blt	r3,r2,ed8 <_malloc_r+0x4b8>
     ec8:	9009883a 	mov	r4,r18
     ecc:	0001bc80 	call	1bc8 <__malloc_unlock>
     ed0:	0005883a 	mov	r2,zero
     ed4:	003f7b06 	br	cc4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000cc4>
     ed8:	88c00054 	ori	r3,r17,1
     edc:	80c00115 	stw	r3,4(r16)
     ee0:	8463883a 	add	r17,r16,r17
     ee4:	10800054 	ori	r2,r2,1
     ee8:	9c400215 	stw	r17,8(r19)
     eec:	88800115 	stw	r2,4(r17)
     ef0:	9009883a 	mov	r4,r18
     ef4:	0001bc80 	call	1bc8 <__malloc_unlock>
     ef8:	80800204 	addi	r2,r16,8
     efc:	003f7106 	br	cc4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000cc4>
     f00:	00c00504 	movi	r3,20
     f04:	18804a2e 	bgeu	r3,r2,1030 <_malloc_r+0x610>
     f08:	00c01504 	movi	r3,84
     f0c:	18806e36 	bltu	r3,r2,10c8 <_malloc_r+0x6a8>
     f10:	8804d33a 	srli	r2,r17,12
     f14:	12001bc4 	addi	r8,r2,111
     f18:	11c01b84 	addi	r7,r2,110
     f1c:	4209883a 	add	r4,r8,r8
     f20:	003edd06 	br	a98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000a98>
     f24:	3804d27a 	srli	r2,r7,9
     f28:	00c00104 	movi	r3,4
     f2c:	1880442e 	bgeu	r3,r2,1040 <_malloc_r+0x620>
     f30:	00c00504 	movi	r3,20
     f34:	18808136 	bltu	r3,r2,113c <_malloc_r+0x71c>
     f38:	11401704 	addi	r5,r2,92
     f3c:	10c016c4 	addi	r3,r2,91
     f40:	294b883a 	add	r5,r5,r5
     f44:	294b883a 	add	r5,r5,r5
     f48:	294b883a 	add	r5,r5,r5
     f4c:	994b883a 	add	r5,r19,r5
     f50:	28800017 	ldw	r2,0(r5)
     f54:	01800074 	movhi	r6,1
     f58:	297ffe04 	addi	r5,r5,-8
     f5c:	31b67a04 	addi	r6,r6,-9752
     f60:	28806526 	beq	r5,r2,10f8 <_malloc_r+0x6d8>
     f64:	01bfff04 	movi	r6,-4
     f68:	10c00117 	ldw	r3,4(r2)
     f6c:	1986703a 	and	r3,r3,r6
     f70:	38c0022e 	bgeu	r7,r3,f7c <_malloc_r+0x55c>
     f74:	10800217 	ldw	r2,8(r2)
     f78:	28bffb1e 	bne	r5,r2,f68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000f68>
     f7c:	11400317 	ldw	r5,12(r2)
     f80:	98c00117 	ldw	r3,4(r19)
     f84:	81400315 	stw	r5,12(r16)
     f88:	80800215 	stw	r2,8(r16)
     f8c:	2c000215 	stw	r16,8(r5)
     f90:	14000315 	stw	r16,12(r2)
     f94:	003ef806 	br	b78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000b78>
     f98:	88c00054 	ori	r3,r17,1
     f9c:	80c00115 	stw	r3,4(r16)
     fa0:	8463883a 	add	r17,r16,r17
     fa4:	34400515 	stw	r17,20(r6)
     fa8:	34400415 	stw	r17,16(r6)
     fac:	10c00054 	ori	r3,r2,1
     fb0:	8a000315 	stw	r8,12(r17)
     fb4:	8a000215 	stw	r8,8(r17)
     fb8:	88c00115 	stw	r3,4(r17)
     fbc:	88a3883a 	add	r17,r17,r2
     fc0:	88800015 	stw	r2,0(r17)
     fc4:	9009883a 	mov	r4,r18
     fc8:	0001bc80 	call	1bc8 <__malloc_unlock>
     fcc:	80800204 	addi	r2,r16,8
     fd0:	003f3c06 	br	cc4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000cc4>
     fd4:	30c00117 	ldw	r3,4(r6)
     fd8:	003ee706 	br	b78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000b78>
     fdc:	5ac00044 	addi	r11,r11,1
     fe0:	588000cc 	andi	r2,r11,3
     fe4:	31800204 	addi	r6,r6,8
     fe8:	103efd1e 	bne	r2,zero,be0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000be0>
     fec:	00002406 	br	1080 <_malloc_r+0x660>
     ff0:	14000317 	ldw	r16,12(r2)
     ff4:	143f251e 	bne	r2,r16,c8c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000c8c>
     ff8:	21000084 	addi	r4,r4,2
     ffc:	003ebc06 	br	af0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000af0>
    1000:	8085883a 	add	r2,r16,r2
    1004:	10c00117 	ldw	r3,4(r2)
    1008:	81000317 	ldw	r4,12(r16)
    100c:	81400217 	ldw	r5,8(r16)
    1010:	18c00054 	ori	r3,r3,1
    1014:	10c00115 	stw	r3,4(r2)
    1018:	29000315 	stw	r4,12(r5)
    101c:	21400215 	stw	r5,8(r4)
    1020:	9009883a 	mov	r4,r18
    1024:	0001bc80 	call	1bc8 <__malloc_unlock>
    1028:	80800204 	addi	r2,r16,8
    102c:	003f2506 	br	cc4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000cc4>
    1030:	12001704 	addi	r8,r2,92
    1034:	11c016c4 	addi	r7,r2,91
    1038:	4209883a 	add	r4,r8,r8
    103c:	003e9606 	br	a98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000a98>
    1040:	3804d1ba 	srli	r2,r7,6
    1044:	11400e44 	addi	r5,r2,57
    1048:	10c00e04 	addi	r3,r2,56
    104c:	294b883a 	add	r5,r5,r5
    1050:	003fbc06 	br	f44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000f44>
    1054:	84ff5926 	beq	r16,r19,dbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000dbc>
    1058:	00800074 	movhi	r2,1
    105c:	10b67a04 	addi	r2,r2,-9752
    1060:	14000217 	ldw	r16,8(r2)
    1064:	00bfff04 	movi	r2,-4
    1068:	80c00117 	ldw	r3,4(r16)
    106c:	1886703a 	and	r3,r3,r2
    1070:	003f9106 	br	eb8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000eb8>
    1074:	60800217 	ldw	r2,8(r12)
    1078:	213fffc4 	addi	r4,r4,-1
    107c:	1300651e 	bne	r2,r12,1214 <_malloc_r+0x7f4>
    1080:	208000cc 	andi	r2,r4,3
    1084:	633ffe04 	addi	r12,r12,-8
    1088:	103ffa1e 	bne	r2,zero,1074 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001074>
    108c:	98800117 	ldw	r2,4(r19)
    1090:	0146303a 	nor	r3,zero,r5
    1094:	1884703a 	and	r2,r3,r2
    1098:	98800115 	stw	r2,4(r19)
    109c:	294b883a 	add	r5,r5,r5
    10a0:	117f2836 	bltu	r2,r5,d44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000d44>
    10a4:	283f2726 	beq	r5,zero,d44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000d44>
    10a8:	2886703a 	and	r3,r5,r2
    10ac:	5809883a 	mov	r4,r11
    10b0:	183ec31e 	bne	r3,zero,bc0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000bc0>
    10b4:	294b883a 	add	r5,r5,r5
    10b8:	2886703a 	and	r3,r5,r2
    10bc:	21000104 	addi	r4,r4,4
    10c0:	183ffc26 	beq	r3,zero,10b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70010b4>
    10c4:	003ebe06 	br	bc0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000bc0>
    10c8:	00c05504 	movi	r3,340
    10cc:	18801236 	bltu	r3,r2,1118 <_malloc_r+0x6f8>
    10d0:	8804d3fa 	srli	r2,r17,15
    10d4:	12001e04 	addi	r8,r2,120
    10d8:	11c01dc4 	addi	r7,r2,119
    10dc:	4209883a 	add	r4,r8,r8
    10e0:	003e6d06 	br	a98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000a98>
    10e4:	00c40004 	movi	r3,4096
    10e8:	003f4606 	br	e04 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000e04>
    10ec:	00800044 	movi	r2,1
    10f0:	a0800115 	stw	r2,4(r20)
    10f4:	003f7406 	br	ec8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000ec8>
    10f8:	1805d0ba 	srai	r2,r3,2
    10fc:	01c00044 	movi	r7,1
    1100:	30c00117 	ldw	r3,4(r6)
    1104:	388e983a 	sll	r7,r7,r2
    1108:	2805883a 	mov	r2,r5
    110c:	38c6b03a 	or	r3,r7,r3
    1110:	30c00115 	stw	r3,4(r6)
    1114:	003f9b06 	br	f84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000f84>
    1118:	00c15504 	movi	r3,1364
    111c:	18801a36 	bltu	r3,r2,1188 <_malloc_r+0x768>
    1120:	8804d4ba 	srli	r2,r17,18
    1124:	12001f44 	addi	r8,r2,125
    1128:	11c01f04 	addi	r7,r2,124
    112c:	4209883a 	add	r4,r8,r8
    1130:	003e5906 	br	a98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000a98>
    1134:	ad400404 	addi	r21,r21,16
    1138:	003f1706 	br	d98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000d98>
    113c:	00c01504 	movi	r3,84
    1140:	18802336 	bltu	r3,r2,11d0 <_malloc_r+0x7b0>
    1144:	3804d33a 	srli	r2,r7,12
    1148:	11401bc4 	addi	r5,r2,111
    114c:	10c01b84 	addi	r3,r2,110
    1150:	294b883a 	add	r5,r5,r5
    1154:	003f7b06 	br	f44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000f44>
    1158:	9c000217 	ldw	r16,8(r19)
    115c:	00bfff04 	movi	r2,-4
    1160:	80c00117 	ldw	r3,4(r16)
    1164:	1886703a 	and	r3,r3,r2
    1168:	003f5306 	br	eb8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000eb8>
    116c:	3083ffcc 	andi	r2,r6,4095
    1170:	103f181e 	bne	r2,zero,dd4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000dd4>
    1174:	99000217 	ldw	r4,8(r19)
    1178:	b545883a 	add	r2,r22,r21
    117c:	10800054 	ori	r2,r2,1
    1180:	20800115 	stw	r2,4(r4)
    1184:	003f3e06 	br	e80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000e80>
    1188:	01003f84 	movi	r4,254
    118c:	02001fc4 	movi	r8,127
    1190:	01c01f84 	movi	r7,126
    1194:	003e4006 	br	a98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000a98>
    1198:	00800074 	movhi	r2,1
    119c:	10be0704 	addi	r2,r2,-2020
    11a0:	15000015 	stw	r20,0(r2)
    11a4:	003f1106 	br	dec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000dec>
    11a8:	00800044 	movi	r2,1
    11ac:	002b883a 	mov	r21,zero
    11b0:	003f1f06 	br	e30 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000e30>
    11b4:	81400204 	addi	r5,r16,8
    11b8:	9009883a 	mov	r4,r18
    11bc:	000141c0 	call	141c <_free_r>
    11c0:	00800074 	movhi	r2,1
    11c4:	10861404 	addi	r2,r2,6224
    11c8:	10c00017 	ldw	r3,0(r2)
    11cc:	003f2c06 	br	e80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000e80>
    11d0:	00c05504 	movi	r3,340
    11d4:	18800536 	bltu	r3,r2,11ec <_malloc_r+0x7cc>
    11d8:	3804d3fa 	srli	r2,r7,15
    11dc:	11401e04 	addi	r5,r2,120
    11e0:	10c01dc4 	addi	r3,r2,119
    11e4:	294b883a 	add	r5,r5,r5
    11e8:	003f5606 	br	f44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000f44>
    11ec:	00c15504 	movi	r3,1364
    11f0:	18800536 	bltu	r3,r2,1208 <_malloc_r+0x7e8>
    11f4:	3804d4ba 	srli	r2,r7,18
    11f8:	11401f44 	addi	r5,r2,125
    11fc:	10c01f04 	addi	r3,r2,124
    1200:	294b883a 	add	r5,r5,r5
    1204:	003f4f06 	br	f44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000f44>
    1208:	01403f84 	movi	r5,254
    120c:	00c01f84 	movi	r3,126
    1210:	003f4c06 	br	f44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000f44>
    1214:	98800117 	ldw	r2,4(r19)
    1218:	003fa006 	br	109c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700109c>
    121c:	8808d0fa 	srli	r4,r17,3
    1220:	20800044 	addi	r2,r4,1
    1224:	1085883a 	add	r2,r2,r2
    1228:	003e9006 	br	c6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000c6c>

0000122c <srand>:
    122c:	00800074 	movhi	r2,1
    1230:	10be0a04 	addi	r2,r2,-2008
    1234:	10800017 	ldw	r2,0(r2)
    1238:	11002915 	stw	r4,164(r2)
    123c:	10002a15 	stw	zero,168(r2)
    1240:	f800283a 	ret

00001244 <rand>:
    1244:	00800074 	movhi	r2,1
    1248:	10be0a04 	addi	r2,r2,-2008
    124c:	11c00017 	ldw	r7,0(r2)
    1250:	01532574 	movhi	r5,19605
    1254:	019614b4 	movhi	r6,22610
    1258:	38c02917 	ldw	r3,164(r7)
    125c:	39002a17 	ldw	r4,168(r7)
    1260:	295fcb44 	addi	r5,r5,32557
    1264:	31bd0b44 	addi	r6,r6,-3027
    1268:	1951383a 	mul	r8,r3,r5
    126c:	2149383a 	mul	r4,r4,r5
    1270:	198d383a 	mul	r6,r3,r6
    1274:	194a383a 	mulxuu	r5,r3,r5
    1278:	40800044 	addi	r2,r8,1
    127c:	2187883a 	add	r3,r4,r6
    1280:	1949883a 	add	r4,r3,r5
    1284:	38802915 	stw	r2,164(r7)
    1288:	1207803a 	cmpltu	r3,r2,r8
    128c:	00a00034 	movhi	r2,32768
    1290:	1907883a 	add	r3,r3,r4
    1294:	10bfffc4 	addi	r2,r2,-1
    1298:	38c02a15 	stw	r3,168(r7)
    129c:	1884703a 	and	r2,r3,r2
    12a0:	f800283a 	ret

000012a4 <_sbrk_r>:
    12a4:	defffd04 	addi	sp,sp,-12
    12a8:	dc000015 	stw	r16,0(sp)
    12ac:	04000074 	movhi	r16,1
    12b0:	dc400115 	stw	r17,4(sp)
    12b4:	8405f304 	addi	r16,r16,6092
    12b8:	2023883a 	mov	r17,r4
    12bc:	2809883a 	mov	r4,r5
    12c0:	dfc00215 	stw	ra,8(sp)
    12c4:	80000015 	stw	zero,0(r16)
    12c8:	00018d40 	call	18d4 <sbrk>
    12cc:	00ffffc4 	movi	r3,-1
    12d0:	10c00526 	beq	r2,r3,12e8 <_sbrk_r+0x44>
    12d4:	dfc00217 	ldw	ra,8(sp)
    12d8:	dc400117 	ldw	r17,4(sp)
    12dc:	dc000017 	ldw	r16,0(sp)
    12e0:	dec00304 	addi	sp,sp,12
    12e4:	f800283a 	ret
    12e8:	80c00017 	ldw	r3,0(r16)
    12ec:	183ff926 	beq	r3,zero,12d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70012d4>
    12f0:	88c00015 	stw	r3,0(r17)
    12f4:	003ff706 	br	12d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70012d4>

000012f8 <_malloc_trim_r>:
    12f8:	defffb04 	addi	sp,sp,-20
    12fc:	dcc00315 	stw	r19,12(sp)
    1300:	04c00074 	movhi	r19,1
    1304:	dc800215 	stw	r18,8(sp)
    1308:	dc400115 	stw	r17,4(sp)
    130c:	dc000015 	stw	r16,0(sp)
    1310:	dfc00415 	stw	ra,16(sp)
    1314:	2821883a 	mov	r16,r5
    1318:	9cf67a04 	addi	r19,r19,-9752
    131c:	2025883a 	mov	r18,r4
    1320:	0001aa80 	call	1aa8 <__malloc_lock>
    1324:	98800217 	ldw	r2,8(r19)
    1328:	14400117 	ldw	r17,4(r2)
    132c:	00bfff04 	movi	r2,-4
    1330:	88a2703a 	and	r17,r17,r2
    1334:	8c21c83a 	sub	r16,r17,r16
    1338:	8403fbc4 	addi	r16,r16,4079
    133c:	8020d33a 	srli	r16,r16,12
    1340:	0083ffc4 	movi	r2,4095
    1344:	843fffc4 	addi	r16,r16,-1
    1348:	8020933a 	slli	r16,r16,12
    134c:	1400060e 	bge	r2,r16,1368 <_malloc_trim_r+0x70>
    1350:	000b883a 	mov	r5,zero
    1354:	9009883a 	mov	r4,r18
    1358:	00012a40 	call	12a4 <_sbrk_r>
    135c:	98c00217 	ldw	r3,8(r19)
    1360:	1c47883a 	add	r3,r3,r17
    1364:	10c00a26 	beq	r2,r3,1390 <_malloc_trim_r+0x98>
    1368:	9009883a 	mov	r4,r18
    136c:	0001bc80 	call	1bc8 <__malloc_unlock>
    1370:	0005883a 	mov	r2,zero
    1374:	dfc00417 	ldw	ra,16(sp)
    1378:	dcc00317 	ldw	r19,12(sp)
    137c:	dc800217 	ldw	r18,8(sp)
    1380:	dc400117 	ldw	r17,4(sp)
    1384:	dc000017 	ldw	r16,0(sp)
    1388:	dec00504 	addi	sp,sp,20
    138c:	f800283a 	ret
    1390:	040bc83a 	sub	r5,zero,r16
    1394:	9009883a 	mov	r4,r18
    1398:	00012a40 	call	12a4 <_sbrk_r>
    139c:	00ffffc4 	movi	r3,-1
    13a0:	10c00d26 	beq	r2,r3,13d8 <_malloc_trim_r+0xe0>
    13a4:	00c00074 	movhi	r3,1
    13a8:	18c61404 	addi	r3,r3,6224
    13ac:	18800017 	ldw	r2,0(r3)
    13b0:	99000217 	ldw	r4,8(r19)
    13b4:	8c23c83a 	sub	r17,r17,r16
    13b8:	8c400054 	ori	r17,r17,1
    13bc:	1421c83a 	sub	r16,r2,r16
    13c0:	24400115 	stw	r17,4(r4)
    13c4:	9009883a 	mov	r4,r18
    13c8:	1c000015 	stw	r16,0(r3)
    13cc:	0001bc80 	call	1bc8 <__malloc_unlock>
    13d0:	00800044 	movi	r2,1
    13d4:	003fe706 	br	1374 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001374>
    13d8:	000b883a 	mov	r5,zero
    13dc:	9009883a 	mov	r4,r18
    13e0:	00012a40 	call	12a4 <_sbrk_r>
    13e4:	99000217 	ldw	r4,8(r19)
    13e8:	014003c4 	movi	r5,15
    13ec:	1107c83a 	sub	r3,r2,r4
    13f0:	28ffdd0e 	bge	r5,r3,1368 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001368>
    13f4:	01400074 	movhi	r5,1
    13f8:	297e0704 	addi	r5,r5,-2020
    13fc:	29400017 	ldw	r5,0(r5)
    1400:	18c00054 	ori	r3,r3,1
    1404:	20c00115 	stw	r3,4(r4)
    1408:	00c00074 	movhi	r3,1
    140c:	1145c83a 	sub	r2,r2,r5
    1410:	18c61404 	addi	r3,r3,6224
    1414:	18800015 	stw	r2,0(r3)
    1418:	003fd306 	br	1368 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001368>

0000141c <_free_r>:
    141c:	28004126 	beq	r5,zero,1524 <_free_r+0x108>
    1420:	defffd04 	addi	sp,sp,-12
    1424:	dc400115 	stw	r17,4(sp)
    1428:	dc000015 	stw	r16,0(sp)
    142c:	2023883a 	mov	r17,r4
    1430:	2821883a 	mov	r16,r5
    1434:	dfc00215 	stw	ra,8(sp)
    1438:	0001aa80 	call	1aa8 <__malloc_lock>
    143c:	81ffff17 	ldw	r7,-4(r16)
    1440:	00bfff84 	movi	r2,-2
    1444:	01000074 	movhi	r4,1
    1448:	81bffe04 	addi	r6,r16,-8
    144c:	3884703a 	and	r2,r7,r2
    1450:	21367a04 	addi	r4,r4,-9752
    1454:	308b883a 	add	r5,r6,r2
    1458:	2a400117 	ldw	r9,4(r5)
    145c:	22000217 	ldw	r8,8(r4)
    1460:	00ffff04 	movi	r3,-4
    1464:	48c6703a 	and	r3,r9,r3
    1468:	2a005726 	beq	r5,r8,15c8 <_free_r+0x1ac>
    146c:	28c00115 	stw	r3,4(r5)
    1470:	39c0004c 	andi	r7,r7,1
    1474:	3800091e 	bne	r7,zero,149c <_free_r+0x80>
    1478:	823ffe17 	ldw	r8,-8(r16)
    147c:	22400204 	addi	r9,r4,8
    1480:	320dc83a 	sub	r6,r6,r8
    1484:	31c00217 	ldw	r7,8(r6)
    1488:	1205883a 	add	r2,r2,r8
    148c:	3a406526 	beq	r7,r9,1624 <_free_r+0x208>
    1490:	32000317 	ldw	r8,12(r6)
    1494:	3a000315 	stw	r8,12(r7)
    1498:	41c00215 	stw	r7,8(r8)
    149c:	28cf883a 	add	r7,r5,r3
    14a0:	39c00117 	ldw	r7,4(r7)
    14a4:	39c0004c 	andi	r7,r7,1
    14a8:	38003a26 	beq	r7,zero,1594 <_free_r+0x178>
    14ac:	10c00054 	ori	r3,r2,1
    14b0:	30c00115 	stw	r3,4(r6)
    14b4:	3087883a 	add	r3,r6,r2
    14b8:	18800015 	stw	r2,0(r3)
    14bc:	00c07fc4 	movi	r3,511
    14c0:	18801936 	bltu	r3,r2,1528 <_free_r+0x10c>
    14c4:	1004d0fa 	srli	r2,r2,3
    14c8:	01c00044 	movi	r7,1
    14cc:	21400117 	ldw	r5,4(r4)
    14d0:	10c00044 	addi	r3,r2,1
    14d4:	18c7883a 	add	r3,r3,r3
    14d8:	1005d0ba 	srai	r2,r2,2
    14dc:	18c7883a 	add	r3,r3,r3
    14e0:	18c7883a 	add	r3,r3,r3
    14e4:	1907883a 	add	r3,r3,r4
    14e8:	3884983a 	sll	r2,r7,r2
    14ec:	19c00017 	ldw	r7,0(r3)
    14f0:	1a3ffe04 	addi	r8,r3,-8
    14f4:	1144b03a 	or	r2,r2,r5
    14f8:	32000315 	stw	r8,12(r6)
    14fc:	31c00215 	stw	r7,8(r6)
    1500:	20800115 	stw	r2,4(r4)
    1504:	19800015 	stw	r6,0(r3)
    1508:	39800315 	stw	r6,12(r7)
    150c:	8809883a 	mov	r4,r17
    1510:	dfc00217 	ldw	ra,8(sp)
    1514:	dc400117 	ldw	r17,4(sp)
    1518:	dc000017 	ldw	r16,0(sp)
    151c:	dec00304 	addi	sp,sp,12
    1520:	0001bc81 	jmpi	1bc8 <__malloc_unlock>
    1524:	f800283a 	ret
    1528:	100ad27a 	srli	r5,r2,9
    152c:	00c00104 	movi	r3,4
    1530:	19404a36 	bltu	r3,r5,165c <_free_r+0x240>
    1534:	100ad1ba 	srli	r5,r2,6
    1538:	28c00e44 	addi	r3,r5,57
    153c:	18c7883a 	add	r3,r3,r3
    1540:	29400e04 	addi	r5,r5,56
    1544:	18c7883a 	add	r3,r3,r3
    1548:	18c7883a 	add	r3,r3,r3
    154c:	1909883a 	add	r4,r3,r4
    1550:	20c00017 	ldw	r3,0(r4)
    1554:	01c00074 	movhi	r7,1
    1558:	213ffe04 	addi	r4,r4,-8
    155c:	39f67a04 	addi	r7,r7,-9752
    1560:	20c04426 	beq	r4,r3,1674 <_free_r+0x258>
    1564:	01ffff04 	movi	r7,-4
    1568:	19400117 	ldw	r5,4(r3)
    156c:	29ca703a 	and	r5,r5,r7
    1570:	1140022e 	bgeu	r2,r5,157c <_free_r+0x160>
    1574:	18c00217 	ldw	r3,8(r3)
    1578:	20fffb1e 	bne	r4,r3,1568 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001568>
    157c:	19000317 	ldw	r4,12(r3)
    1580:	31000315 	stw	r4,12(r6)
    1584:	30c00215 	stw	r3,8(r6)
    1588:	21800215 	stw	r6,8(r4)
    158c:	19800315 	stw	r6,12(r3)
    1590:	003fde06 	br	150c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700150c>
    1594:	29c00217 	ldw	r7,8(r5)
    1598:	10c5883a 	add	r2,r2,r3
    159c:	00c00074 	movhi	r3,1
    15a0:	18f67c04 	addi	r3,r3,-9744
    15a4:	38c03b26 	beq	r7,r3,1694 <_free_r+0x278>
    15a8:	2a000317 	ldw	r8,12(r5)
    15ac:	11400054 	ori	r5,r2,1
    15b0:	3087883a 	add	r3,r6,r2
    15b4:	3a000315 	stw	r8,12(r7)
    15b8:	41c00215 	stw	r7,8(r8)
    15bc:	31400115 	stw	r5,4(r6)
    15c0:	18800015 	stw	r2,0(r3)
    15c4:	003fbd06 	br	14bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70014bc>
    15c8:	39c0004c 	andi	r7,r7,1
    15cc:	10c5883a 	add	r2,r2,r3
    15d0:	3800071e 	bne	r7,zero,15f0 <_free_r+0x1d4>
    15d4:	81fffe17 	ldw	r7,-8(r16)
    15d8:	31cdc83a 	sub	r6,r6,r7
    15dc:	30c00317 	ldw	r3,12(r6)
    15e0:	31400217 	ldw	r5,8(r6)
    15e4:	11c5883a 	add	r2,r2,r7
    15e8:	28c00315 	stw	r3,12(r5)
    15ec:	19400215 	stw	r5,8(r3)
    15f0:	10c00054 	ori	r3,r2,1
    15f4:	30c00115 	stw	r3,4(r6)
    15f8:	00c00074 	movhi	r3,1
    15fc:	18fe0804 	addi	r3,r3,-2016
    1600:	18c00017 	ldw	r3,0(r3)
    1604:	21800215 	stw	r6,8(r4)
    1608:	10ffc036 	bltu	r2,r3,150c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700150c>
    160c:	00800074 	movhi	r2,1
    1610:	1085f204 	addi	r2,r2,6088
    1614:	11400017 	ldw	r5,0(r2)
    1618:	8809883a 	mov	r4,r17
    161c:	00012f80 	call	12f8 <_malloc_trim_r>
    1620:	003fba06 	br	150c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700150c>
    1624:	28c9883a 	add	r4,r5,r3
    1628:	21000117 	ldw	r4,4(r4)
    162c:	2100004c 	andi	r4,r4,1
    1630:	2000391e 	bne	r4,zero,1718 <_free_r+0x2fc>
    1634:	29c00217 	ldw	r7,8(r5)
    1638:	29000317 	ldw	r4,12(r5)
    163c:	1885883a 	add	r2,r3,r2
    1640:	10c00054 	ori	r3,r2,1
    1644:	39000315 	stw	r4,12(r7)
    1648:	21c00215 	stw	r7,8(r4)
    164c:	30c00115 	stw	r3,4(r6)
    1650:	308d883a 	add	r6,r6,r2
    1654:	30800015 	stw	r2,0(r6)
    1658:	003fac06 	br	150c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700150c>
    165c:	00c00504 	movi	r3,20
    1660:	19401536 	bltu	r3,r5,16b8 <_free_r+0x29c>
    1664:	28c01704 	addi	r3,r5,92
    1668:	18c7883a 	add	r3,r3,r3
    166c:	294016c4 	addi	r5,r5,91
    1670:	003fb406 	br	1544 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001544>
    1674:	280bd0ba 	srai	r5,r5,2
    1678:	00c00044 	movi	r3,1
    167c:	38800117 	ldw	r2,4(r7)
    1680:	194a983a 	sll	r5,r3,r5
    1684:	2007883a 	mov	r3,r4
    1688:	2884b03a 	or	r2,r5,r2
    168c:	38800115 	stw	r2,4(r7)
    1690:	003fbb06 	br	1580 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001580>
    1694:	21800515 	stw	r6,20(r4)
    1698:	21800415 	stw	r6,16(r4)
    169c:	10c00054 	ori	r3,r2,1
    16a0:	31c00315 	stw	r7,12(r6)
    16a4:	31c00215 	stw	r7,8(r6)
    16a8:	30c00115 	stw	r3,4(r6)
    16ac:	308d883a 	add	r6,r6,r2
    16b0:	30800015 	stw	r2,0(r6)
    16b4:	003f9506 	br	150c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700150c>
    16b8:	00c01504 	movi	r3,84
    16bc:	19400536 	bltu	r3,r5,16d4 <_free_r+0x2b8>
    16c0:	100ad33a 	srli	r5,r2,12
    16c4:	28c01bc4 	addi	r3,r5,111
    16c8:	18c7883a 	add	r3,r3,r3
    16cc:	29401b84 	addi	r5,r5,110
    16d0:	003f9c06 	br	1544 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001544>
    16d4:	00c05504 	movi	r3,340
    16d8:	19400536 	bltu	r3,r5,16f0 <_free_r+0x2d4>
    16dc:	100ad3fa 	srli	r5,r2,15
    16e0:	28c01e04 	addi	r3,r5,120
    16e4:	18c7883a 	add	r3,r3,r3
    16e8:	29401dc4 	addi	r5,r5,119
    16ec:	003f9506 	br	1544 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001544>
    16f0:	00c15504 	movi	r3,1364
    16f4:	19400536 	bltu	r3,r5,170c <_free_r+0x2f0>
    16f8:	100ad4ba 	srli	r5,r2,18
    16fc:	28c01f44 	addi	r3,r5,125
    1700:	18c7883a 	add	r3,r3,r3
    1704:	29401f04 	addi	r5,r5,124
    1708:	003f8e06 	br	1544 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001544>
    170c:	00c03f84 	movi	r3,254
    1710:	01401f84 	movi	r5,126
    1714:	003f8b06 	br	1544 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001544>
    1718:	10c00054 	ori	r3,r2,1
    171c:	30c00115 	stw	r3,4(r6)
    1720:	308d883a 	add	r6,r6,r2
    1724:	30800015 	stw	r2,0(r6)
    1728:	003f7806 	br	150c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700150c>

0000172c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    172c:	defffc04 	addi	sp,sp,-16
    1730:	df000315 	stw	fp,12(sp)
    1734:	df000304 	addi	fp,sp,12
    1738:	e13ffd15 	stw	r4,-12(fp)
    173c:	e17ffe15 	stw	r5,-8(fp)
    1740:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    1744:	e0fffe17 	ldw	r3,-8(fp)
    1748:	e0bffd17 	ldw	r2,-12(fp)
    174c:	18800c26 	beq	r3,r2,1780 <alt_load_section+0x54>
  {
    while( to != end )
    1750:	00000806 	br	1774 <alt_load_section+0x48>
    {
      *to++ = *from++;
    1754:	e0bffe17 	ldw	r2,-8(fp)
    1758:	10c00104 	addi	r3,r2,4
    175c:	e0fffe15 	stw	r3,-8(fp)
    1760:	e0fffd17 	ldw	r3,-12(fp)
    1764:	19000104 	addi	r4,r3,4
    1768:	e13ffd15 	stw	r4,-12(fp)
    176c:	18c00017 	ldw	r3,0(r3)
    1770:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    1774:	e0fffe17 	ldw	r3,-8(fp)
    1778:	e0bfff17 	ldw	r2,-4(fp)
    177c:	18bff51e 	bne	r3,r2,1754 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001754>
    {
      *to++ = *from++;
    }
  }
}
    1780:	0001883a 	nop
    1784:	e037883a 	mov	sp,fp
    1788:	df000017 	ldw	fp,0(sp)
    178c:	dec00104 	addi	sp,sp,4
    1790:	f800283a 	ret

00001794 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    1794:	defffe04 	addi	sp,sp,-8
    1798:	dfc00115 	stw	ra,4(sp)
    179c:	df000015 	stw	fp,0(sp)
    17a0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    17a4:	01800074 	movhi	r6,1
    17a8:	31be3404 	addi	r6,r6,-1840
    17ac:	01400074 	movhi	r5,1
    17b0:	29767a04 	addi	r5,r5,-9752
    17b4:	01000074 	movhi	r4,1
    17b8:	213e3404 	addi	r4,r4,-1840
    17bc:	000172c0 	call	172c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    17c0:	01800034 	movhi	r6,0
    17c4:	31809204 	addi	r6,r6,584
    17c8:	01400034 	movhi	r5,0
    17cc:	29400804 	addi	r5,r5,32
    17d0:	01000034 	movhi	r4,0
    17d4:	21000804 	addi	r4,r4,32
    17d8:	000172c0 	call	172c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    17dc:	01800074 	movhi	r6,1
    17e0:	31b67a04 	addi	r6,r6,-9752
    17e4:	01400074 	movhi	r5,1
    17e8:	2975bd04 	addi	r5,r5,-10508
    17ec:	01000074 	movhi	r4,1
    17f0:	2135bd04 	addi	r4,r4,-10508
    17f4:	000172c0 	call	172c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    17f8:	000c0000 	call	c000 <alt_dcache_flush_all>
  alt_icache_flush_all();
    17fc:	000c27c0 	call	c27c <alt_icache_flush_all>
}
    1800:	0001883a 	nop
    1804:	e037883a 	mov	sp,fp
    1808:	dfc00117 	ldw	ra,4(sp)
    180c:	df000017 	ldw	fp,0(sp)
    1810:	dec00204 	addi	sp,sp,8
    1814:	f800283a 	ret

00001818 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    1818:	defff904 	addi	sp,sp,-28
    181c:	dfc00615 	stw	ra,24(sp)
    1820:	df000515 	stw	fp,20(sp)
    1824:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    1828:	0009883a 	mov	r4,zero
    182c:	00094a80 	call	94a8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    1830:	00025040 	call	2504 <OSInit>
    1834:	01000044 	movi	r4,1
    1838:	0006e640 	call	6e64 <OSSemCreate>
    183c:	d0a7f115 	stw	r2,-24636(gp)
    1840:	01000044 	movi	r4,1
    1844:	0006e640 	call	6e64 <OSSemCreate>
    1848:	d0a7f315 	stw	r2,-24628(gp)
    184c:	d0a80804 	addi	r2,gp,-24544
    1850:	e0bffc15 	stw	r2,-16(fp)
    1854:	00800044 	movi	r2,1
    1858:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
    185c:	e0bffd0b 	ldhu	r2,-12(fp)
    1860:	1009883a 	mov	r4,r2
    1864:	0006e640 	call	6e64 <OSSemCreate>
    1868:	1007883a 	mov	r3,r2
    186c:	e0bffc17 	ldw	r2,-16(fp)
    1870:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    1874:	00094e00 	call	94e0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    1878:	01800074 	movhi	r6,1
    187c:	31b5be04 	addi	r6,r6,-10504
    1880:	01400074 	movhi	r5,1
    1884:	2975be04 	addi	r5,r5,-10504
    1888:	01000074 	movhi	r4,1
    188c:	2135be04 	addi	r4,r4,-10504
    1890:	000c3740 	call	c374 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    1894:	000c12c0 	call	c12c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    1898:	01000074 	movhi	r4,1
    189c:	21306304 	addi	r4,r4,-15988
    18a0:	000d0580 	call	d058 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    18a4:	d0a7ed17 	ldw	r2,-24652(gp)
    18a8:	d0e7ee17 	ldw	r3,-24648(gp)
    18ac:	d127ef17 	ldw	r4,-24644(gp)
    18b0:	200d883a 	mov	r6,r4
    18b4:	180b883a 	mov	r5,r3
    18b8:	1009883a 	mov	r4,r2
    18bc:	00005080 	call	508 <main>
    18c0:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
    18c4:	01000044 	movi	r4,1
    18c8:	000bf300 	call	bf30 <close>
  exit (result);
    18cc:	e13ffb17 	ldw	r4,-20(fp)
    18d0:	000d06c0 	call	d06c <exit>

000018d4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    18d4:	defff904 	addi	sp,sp,-28
    18d8:	df000615 	stw	fp,24(sp)
    18dc:	df000604 	addi	fp,sp,24
    18e0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    18e4:	0005303a 	rdctl	r2,status
    18e8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    18ec:	e0fffe17 	ldw	r3,-8(fp)
    18f0:	00bfff84 	movi	r2,-2
    18f4:	1884703a 	and	r2,r3,r2
    18f8:	1001703a 	wrctl	status,r2
  
  return context;
    18fc:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    1900:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    1904:	d0a00417 	ldw	r2,-32752(gp)
    1908:	10c000c4 	addi	r3,r2,3
    190c:	00bfff04 	movi	r2,-4
    1910:	1884703a 	and	r2,r3,r2
    1914:	d0a00415 	stw	r2,-32752(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    1918:	d0e00417 	ldw	r3,-32752(gp)
    191c:	e0bfff17 	ldw	r2,-4(fp)
    1920:	1887883a 	add	r3,r3,r2
    1924:	00810034 	movhi	r2,1024
    1928:	10800004 	addi	r2,r2,0
    192c:	10c0062e 	bgeu	r2,r3,1948 <sbrk+0x74>
    1930:	e0bffb17 	ldw	r2,-20(fp)
    1934:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1938:	e0bffa17 	ldw	r2,-24(fp)
    193c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    1940:	00bfffc4 	movi	r2,-1
    1944:	00000b06 	br	1974 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    1948:	d0a00417 	ldw	r2,-32752(gp)
    194c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    1950:	d0e00417 	ldw	r3,-32752(gp)
    1954:	e0bfff17 	ldw	r2,-4(fp)
    1958:	1885883a 	add	r2,r3,r2
    195c:	d0a00415 	stw	r2,-32752(gp)
    1960:	e0bffb17 	ldw	r2,-20(fp)
    1964:	e0bffc15 	stw	r2,-16(fp)
    1968:	e0bffc17 	ldw	r2,-16(fp)
    196c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    1970:	e0bffd17 	ldw	r2,-12(fp)
} 
    1974:	e037883a 	mov	sp,fp
    1978:	df000017 	ldw	fp,0(sp)
    197c:	dec00104 	addi	sp,sp,4
    1980:	f800283a 	ret

00001984 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
    1984:	deffdf04 	addi	sp,sp,-132
    1988:	dfc02015 	stw	ra,128(sp)
    198c:	df001f15 	stw	fp,124(sp)
    1990:	df001f04 	addi	fp,sp,124
    1994:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    1998:	e0bfe204 	addi	r2,fp,-120
    199c:	100b883a 	mov	r5,r2
    19a0:	01003fc4 	movi	r4,255
    19a4:	0008dec0 	call	8dec <OSTaskQuery>
    19a8:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    19ac:	e0bffe83 	ldbu	r2,-6(fp)
    19b0:	10803fcc 	andi	r2,r2,255
    19b4:	10001e1e 	bne	r2,zero,1a30 <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
    19b8:	e0bfee83 	ldbu	r2,-70(fp)
    19bc:	10803fcc 	andi	r2,r2,255
    19c0:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
    19c4:	d0a7f117 	ldw	r2,-24636(gp)
    19c8:	e0fffd04 	addi	r3,fp,-12
    19cc:	180b883a 	mov	r5,r3
    19d0:	1009883a 	mov	r4,r2
    19d4:	00076040 	call	7604 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
    19d8:	e0bffe43 	ldbu	r2,-7(fp)
    19dc:	10803fcc 	andi	r2,r2,255
    19e0:	10000726 	beq	r2,zero,1a00 <__env_lock+0x7c>
    19e4:	d0a00517 	ldw	r2,-32748(gp)
    19e8:	e0ffe117 	ldw	r3,-124(fp)
    19ec:	1880041e 	bne	r3,r2,1a00 <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
    19f0:	d0a7f017 	ldw	r2,-24640(gp)
    19f4:	10800044 	addi	r2,r2,1
    19f8:	d0a7f015 	stw	r2,-24640(gp)
    19fc:	00000a06 	br	1a28 <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
    1a00:	d0a7f117 	ldw	r2,-24636(gp)
    1a04:	e0fffe84 	addi	r3,fp,-6
    1a08:	180d883a 	mov	r6,r3
    1a0c:	000b883a 	mov	r5,zero
    1a10:	1009883a 	mov	r4,r2
    1a14:	000717c0 	call	717c <OSSemPend>
    locks  = 1;
    1a18:	00800044 	movi	r2,1
    1a1c:	d0a7f015 	stw	r2,-24640(gp)
    lockid = id;
    1a20:	e0bfe117 	ldw	r2,-124(fp)
    1a24:	d0a00515 	stw	r2,-32748(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    1a28:	0001883a 	nop
    1a2c:	00000106 	br	1a34 <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
    1a30:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
    1a34:	e037883a 	mov	sp,fp
    1a38:	dfc00117 	ldw	ra,4(sp)
    1a3c:	df000017 	ldw	fp,0(sp)
    1a40:	dec00204 	addi	sp,sp,8
    1a44:	f800283a 	ret

00001a48 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
    1a48:	defffd04 	addi	sp,sp,-12
    1a4c:	dfc00215 	stw	ra,8(sp)
    1a50:	df000115 	stw	fp,4(sp)
    1a54:	df000104 	addi	fp,sp,4
    1a58:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    1a5c:	d0a7f017 	ldw	r2,-24640(gp)
    1a60:	10000b26 	beq	r2,zero,1a90 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
    1a64:	d0a7f017 	ldw	r2,-24640(gp)
    1a68:	10bfffc4 	addi	r2,r2,-1
    1a6c:	d0a7f015 	stw	r2,-24640(gp)
    1a70:	d0a7f017 	ldw	r2,-24640(gp)
    1a74:	1000071e 	bne	r2,zero,1a94 <__env_unlock+0x4c>
  {
    lockid = -1;
    1a78:	00bfffc4 	movi	r2,-1
    1a7c:	d0a00515 	stw	r2,-32748(gp)
    OSSemPost( alt_envsem );
    1a80:	d0a7f117 	ldw	r2,-24636(gp)
    1a84:	1009883a 	mov	r4,r2
    1a88:	00074f40 	call	74f4 <OSSemPost>
    1a8c:	00000106 	br	1a94 <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
    1a90:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    1a94:	e037883a 	mov	sp,fp
    1a98:	dfc00117 	ldw	ra,4(sp)
    1a9c:	df000017 	ldw	fp,0(sp)
    1aa0:	dec00204 	addi	sp,sp,8
    1aa4:	f800283a 	ret

00001aa8 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
    1aa8:	deffdb04 	addi	sp,sp,-148
    1aac:	dfc02415 	stw	ra,144(sp)
    1ab0:	df002315 	stw	fp,140(sp)
    1ab4:	df002304 	addi	fp,sp,140
    1ab8:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    1abc:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
    1ac0:	d0a7f443 	ldbu	r2,-24623(gp)
    1ac4:	10803fcc 	andi	r2,r2,255
    1ac8:	10800060 	cmpeqi	r2,r2,1
    1acc:	10003626 	beq	r2,zero,1ba8 <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    1ad0:	e0bfe204 	addi	r2,fp,-120
    1ad4:	100b883a 	mov	r5,r2
    1ad8:	01003fc4 	movi	r4,255
    1adc:	0008dec0 	call	8dec <OSTaskQuery>
    1ae0:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    1ae4:	e0bffe83 	ldbu	r2,-6(fp)
    1ae8:	10803fcc 	andi	r2,r2,255
    1aec:	1000301e 	bne	r2,zero,1bb0 <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
    1af0:	e0bfee83 	ldbu	r2,-70(fp)
    1af4:	10803fcc 	andi	r2,r2,255
    1af8:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
    1afc:	d0a7f317 	ldw	r2,-24628(gp)
    1b00:	e0fffd04 	addi	r3,fp,-12
    1b04:	180b883a 	mov	r5,r3
    1b08:	1009883a 	mov	r4,r2
    1b0c:	00076040 	call	7604 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1b10:	0005303a 	rdctl	r2,status
    1b14:	e0bfe115 	stw	r2,-124(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1b18:	e0ffe117 	ldw	r3,-124(fp)
    1b1c:	00bfff84 	movi	r2,-2
    1b20:	1884703a 	and	r2,r3,r2
    1b24:	1001703a 	wrctl	status,r2
  
  return context;
    1b28:	e0bfe117 	ldw	r2,-124(fp)
  
  OS_ENTER_CRITICAL();
    1b2c:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
    1b30:	e0bffd0b 	ldhu	r2,-12(fp)
    1b34:	10bfffcc 	andi	r2,r2,65535
    1b38:	10000b1e 	bne	r2,zero,1b68 <__malloc_lock+0xc0>
    1b3c:	d0a00617 	ldw	r2,-32744(gp)
    1b40:	e0ffde17 	ldw	r3,-136(fp)
    1b44:	1880081e 	bne	r3,r2,1b68 <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
    1b48:	d0a7f217 	ldw	r2,-24632(gp)
    1b4c:	10800044 	addi	r2,r2,1
    1b50:	d0a7f215 	stw	r2,-24632(gp)
    1b54:	e0bfdd17 	ldw	r2,-140(fp)
    1b58:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1b5c:	e0bfdf17 	ldw	r2,-132(fp)
    1b60:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    1b64:	00000e06 	br	1ba0 <__malloc_lock+0xf8>
    1b68:	e0bfdd17 	ldw	r2,-140(fp)
    1b6c:	e0bfe015 	stw	r2,-128(fp)
    1b70:	e0bfe017 	ldw	r2,-128(fp)
    1b74:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
    1b78:	d0a7f317 	ldw	r2,-24628(gp)
    1b7c:	e0fffe84 	addi	r3,fp,-6
    1b80:	180d883a 	mov	r6,r3
    1b84:	000b883a 	mov	r5,zero
    1b88:	1009883a 	mov	r4,r2
    1b8c:	000717c0 	call	717c <OSSemPend>
    locks  = 1;
    1b90:	00800044 	movi	r2,1
    1b94:	d0a7f215 	stw	r2,-24632(gp)
    lockid = id;
    1b98:	e0bfde17 	ldw	r2,-136(fp)
    1b9c:	d0a00615 	stw	r2,-32744(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    1ba0:	0001883a 	nop
    1ba4:	00000306 	br	1bb4 <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
    1ba8:	0001883a 	nop
    1bac:	00000106 	br	1bb4 <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
    1bb0:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
    1bb4:	e037883a 	mov	sp,fp
    1bb8:	dfc00117 	ldw	ra,4(sp)
    1bbc:	df000017 	ldw	fp,0(sp)
    1bc0:	dec00204 	addi	sp,sp,8
    1bc4:	f800283a 	ret

00001bc8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    1bc8:	defff804 	addi	sp,sp,-32
    1bcc:	dfc00715 	stw	ra,28(sp)
    1bd0:	df000615 	stw	fp,24(sp)
    1bd4:	df000604 	addi	fp,sp,24
    1bd8:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    1bdc:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
    1be0:	d0a7f443 	ldbu	r2,-24623(gp)
    1be4:	10803fcc 	andi	r2,r2,255
    1be8:	10800060 	cmpeqi	r2,r2,1
    1bec:	10002326 	beq	r2,zero,1c7c <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1bf0:	0005303a 	rdctl	r2,status
    1bf4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1bf8:	e0fffe17 	ldw	r3,-8(fp)
    1bfc:	00bfff84 	movi	r2,-2
    1c00:	1884703a 	and	r2,r3,r2
    1c04:	1001703a 	wrctl	status,r2
  
  return context;
    1c08:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
    1c0c:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
    1c10:	d0a7f217 	ldw	r2,-24632(gp)
    1c14:	1000051e 	bne	r2,zero,1c2c <__malloc_unlock+0x64>
    1c18:	e0bffa17 	ldw	r2,-24(fp)
    1c1c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1c20:	e0bffb17 	ldw	r2,-20(fp)
    1c24:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
    1c28:	00001506 	br	1c80 <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
    1c2c:	d0a7f217 	ldw	r2,-24632(gp)
    1c30:	10bfffc4 	addi	r2,r2,-1
    1c34:	d0a7f215 	stw	r2,-24632(gp)
    1c38:	d0a7f217 	ldw	r2,-24632(gp)
    1c3c:	10000a1e 	bne	r2,zero,1c68 <__malloc_unlock+0xa0>
  {
    lockid = -1;
    1c40:	00bfffc4 	movi	r2,-1
    1c44:	d0a00615 	stw	r2,-32744(gp)
    1c48:	e0bffa17 	ldw	r2,-24(fp)
    1c4c:	e0bffc15 	stw	r2,-16(fp)
    1c50:	e0bffc17 	ldw	r2,-16(fp)
    1c54:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
    1c58:	d0a7f317 	ldw	r2,-24628(gp)
    1c5c:	1009883a 	mov	r4,r2
    1c60:	00074f40 	call	74f4 <OSSemPost>
    1c64:	00000606 	br	1c80 <__malloc_unlock+0xb8>
    1c68:	e0bffa17 	ldw	r2,-24(fp)
    1c6c:	e0bffd15 	stw	r2,-12(fp)
    1c70:	e0bffd17 	ldw	r2,-12(fp)
    1c74:	1001703a 	wrctl	status,r2
    1c78:	00000106 	br	1c80 <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
    1c7c:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    1c80:	e037883a 	mov	sp,fp
    1c84:	dfc00117 	ldw	ra,4(sp)
    1c88:	df000017 	ldw	fp,0(sp)
    1c8c:	dec00204 	addi	sp,sp,8
    1c90:	f800283a 	ret

00001c94 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    1c94:	defff704 	addi	sp,sp,-36
    1c98:	dfc00815 	stw	ra,32(sp)
    1c9c:	df000715 	stw	fp,28(sp)
    1ca0:	df000704 	addi	fp,sp,28
    1ca4:	e13ffd15 	stw	r4,-12(fp)
    1ca8:	e17ffe15 	stw	r5,-8(fp)
    1cac:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    1cb0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    1cb4:	e0bfff17 	ldw	r2,-4(fp)
    1cb8:	1000021e 	bne	r2,zero,1cc4 <OSEventNameGet+0x30>
        return (0);
    1cbc:	0005883a 	mov	r2,zero
    1cc0:	00003706 	br	1da0 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    1cc4:	e0bffd17 	ldw	r2,-12(fp)
    1cc8:	1000051e 	bne	r2,zero,1ce0 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
    1ccc:	e0bfff17 	ldw	r2,-4(fp)
    1cd0:	00c00104 	movi	r3,4
    1cd4:	10c00005 	stb	r3,0(r2)
        return (0);
    1cd8:	0005883a 	mov	r2,zero
    1cdc:	00003006 	br	1da0 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    1ce0:	e0bffe17 	ldw	r2,-8(fp)
    1ce4:	1000051e 	bne	r2,zero,1cfc <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    1ce8:	e0bfff17 	ldw	r2,-4(fp)
    1cec:	00c00304 	movi	r3,12
    1cf0:	10c00005 	stb	r3,0(r2)
        return (0);
    1cf4:	0005883a 	mov	r2,zero
    1cf8:	00002906 	br	1da0 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    1cfc:	d0a80203 	ldbu	r2,-24568(gp)
    1d00:	10803fcc 	andi	r2,r2,255
    1d04:	10000526 	beq	r2,zero,1d1c <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
    1d08:	e0bfff17 	ldw	r2,-4(fp)
    1d0c:	00c00444 	movi	r3,17
    1d10:	10c00005 	stb	r3,0(r2)
        return (0);
    1d14:	0005883a 	mov	r2,zero
    1d18:	00002106 	br	1da0 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
    1d1c:	e0bffd17 	ldw	r2,-12(fp)
    1d20:	10800003 	ldbu	r2,0(r2)
    1d24:	10803fcc 	andi	r2,r2,255
    1d28:	10bfffc4 	addi	r2,r2,-1
    1d2c:	10800128 	cmpgeui	r2,r2,4
    1d30:	10000526 	beq	r2,zero,1d48 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    1d34:	e0bfff17 	ldw	r2,-4(fp)
    1d38:	00c00044 	movi	r3,1
    1d3c:	10c00005 	stb	r3,0(r2)
             return (0);
    1d40:	0005883a 	mov	r2,zero
    1d44:	00001606 	br	1da0 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
    1d48:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1d4c:	0005303a 	rdctl	r2,status
    1d50:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1d54:	e0fffb17 	ldw	r3,-20(fp)
    1d58:	00bfff84 	movi	r2,-2
    1d5c:	1884703a 	and	r2,r3,r2
    1d60:	1001703a 	wrctl	status,r2
  
  return context;
    1d64:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
    1d68:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    1d6c:	e0bffd17 	ldw	r2,-12(fp)
    1d70:	10800384 	addi	r2,r2,14
    1d74:	100b883a 	mov	r5,r2
    1d78:	e13ffe17 	ldw	r4,-8(fp)
    1d7c:	00037180 	call	3718 <OS_StrCopy>
    1d80:	e0bffa05 	stb	r2,-24(fp)
    1d84:	e0bff917 	ldw	r2,-28(fp)
    1d88:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1d8c:	e0bffc17 	ldw	r2,-16(fp)
    1d90:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    1d94:	e0bfff17 	ldw	r2,-4(fp)
    1d98:	10000005 	stb	zero,0(r2)
    return (len);
    1d9c:	e0bffa03 	ldbu	r2,-24(fp)
}
    1da0:	e037883a 	mov	sp,fp
    1da4:	dfc00117 	ldw	ra,4(sp)
    1da8:	df000017 	ldw	fp,0(sp)
    1dac:	dec00204 	addi	sp,sp,8
    1db0:	f800283a 	ret

00001db4 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    1db4:	defff604 	addi	sp,sp,-40
    1db8:	dfc00915 	stw	ra,36(sp)
    1dbc:	df000815 	stw	fp,32(sp)
    1dc0:	df000804 	addi	fp,sp,32
    1dc4:	e13ffd15 	stw	r4,-12(fp)
    1dc8:	e17ffe15 	stw	r5,-8(fp)
    1dcc:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    1dd0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    1dd4:	e0bfff17 	ldw	r2,-4(fp)
    1dd8:	10004026 	beq	r2,zero,1edc <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    1ddc:	e0bffd17 	ldw	r2,-12(fp)
    1de0:	1000041e 	bne	r2,zero,1df4 <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
    1de4:	e0bfff17 	ldw	r2,-4(fp)
    1de8:	00c00104 	movi	r3,4
    1dec:	10c00005 	stb	r3,0(r2)
        return;
    1df0:	00003b06 	br	1ee0 <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    1df4:	e0bffe17 	ldw	r2,-8(fp)
    1df8:	1000041e 	bne	r2,zero,1e0c <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
    1dfc:	e0bfff17 	ldw	r2,-4(fp)
    1e00:	00c00304 	movi	r3,12
    1e04:	10c00005 	stb	r3,0(r2)
        return;
    1e08:	00003506 	br	1ee0 <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    1e0c:	d0a80203 	ldbu	r2,-24568(gp)
    1e10:	10803fcc 	andi	r2,r2,255
    1e14:	10000426 	beq	r2,zero,1e28 <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
    1e18:	e0bfff17 	ldw	r2,-4(fp)
    1e1c:	00c00484 	movi	r3,18
    1e20:	10c00005 	stb	r3,0(r2)
        return;
    1e24:	00002e06 	br	1ee0 <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
    1e28:	e0bffd17 	ldw	r2,-12(fp)
    1e2c:	10800003 	ldbu	r2,0(r2)
    1e30:	10803fcc 	andi	r2,r2,255
    1e34:	10bfffc4 	addi	r2,r2,-1
    1e38:	10800128 	cmpgeui	r2,r2,4
    1e3c:	10000426 	beq	r2,zero,1e50 <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    1e40:	e0bfff17 	ldw	r2,-4(fp)
    1e44:	00c00044 	movi	r3,1
    1e48:	10c00005 	stb	r3,0(r2)
             return;
    1e4c:	00002406 	br	1ee0 <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
    1e50:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1e54:	0005303a 	rdctl	r2,status
    1e58:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1e5c:	e0fffc17 	ldw	r3,-16(fp)
    1e60:	00bfff84 	movi	r2,-2
    1e64:	1884703a 	and	r2,r3,r2
    1e68:	1001703a 	wrctl	status,r2
  
  return context;
    1e6c:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
    1e70:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    1e74:	e13ffe17 	ldw	r4,-8(fp)
    1e78:	000378c0 	call	378c <OS_StrLen>
    1e7c:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
    1e80:	e0bffa03 	ldbu	r2,-24(fp)
    1e84:	10800830 	cmpltui	r2,r2,32
    1e88:	1000081e 	bne	r2,zero,1eac <OSEventNameSet+0xf8>
    1e8c:	e0bff817 	ldw	r2,-32(fp)
    1e90:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1e94:	e0bff917 	ldw	r2,-28(fp)
    1e98:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
    1e9c:	e0bfff17 	ldw	r2,-4(fp)
    1ea0:	00c002c4 	movi	r3,11
    1ea4:	10c00005 	stb	r3,0(r2)
        return;
    1ea8:	00000d06 	br	1ee0 <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    1eac:	e0bffd17 	ldw	r2,-12(fp)
    1eb0:	10800384 	addi	r2,r2,14
    1eb4:	e17ffe17 	ldw	r5,-8(fp)
    1eb8:	1009883a 	mov	r4,r2
    1ebc:	00037180 	call	3718 <OS_StrCopy>
    1ec0:	e0bff817 	ldw	r2,-32(fp)
    1ec4:	e0bffb15 	stw	r2,-20(fp)
    1ec8:	e0bffb17 	ldw	r2,-20(fp)
    1ecc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    1ed0:	e0bfff17 	ldw	r2,-4(fp)
    1ed4:	10000005 	stb	zero,0(r2)
    1ed8:	00000106 	br	1ee0 <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
    1edc:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
    1ee0:	e037883a 	mov	sp,fp
    1ee4:	dfc00117 	ldw	ra,4(sp)
    1ee8:	df000017 	ldw	fp,0(sp)
    1eec:	dec00204 	addi	sp,sp,8
    1ef0:	f800283a 	ret

00001ef4 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
    1ef4:	deffed04 	addi	sp,sp,-76
    1ef8:	dfc01215 	stw	ra,72(sp)
    1efc:	df001115 	stw	fp,68(sp)
    1f00:	df001104 	addi	fp,sp,68
    1f04:	e13ffc15 	stw	r4,-16(fp)
    1f08:	e17ffd15 	stw	r5,-12(fp)
    1f0c:	e1bffe15 	stw	r6,-8(fp)
    1f10:	3805883a 	mov	r2,r7
    1f14:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
    1f18:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
    1f1c:	e0800217 	ldw	r2,8(fp)
    1f20:	1000021e 	bne	r2,zero,1f2c <OSEventPendMulti+0x38>
        return (0);
    1f24:	0005883a 	mov	r2,zero
    1f28:	00017106 	br	24f0 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
    1f2c:	e0bffc17 	ldw	r2,-16(fp)
    1f30:	1000051e 	bne	r2,zero,1f48 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
    1f34:	e0800217 	ldw	r2,8(fp)
    1f38:	00c00104 	movi	r3,4
    1f3c:	10c00005 	stb	r3,0(r2)
        return (0);
    1f40:	0005883a 	mov	r2,zero
    1f44:	00016a06 	br	24f0 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
    1f48:	e0bffd17 	ldw	r2,-12(fp)
    1f4c:	1000051e 	bne	r2,zero,1f64 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
    1f50:	e0800217 	ldw	r2,8(fp)
    1f54:	00c00104 	movi	r3,4
    1f58:	10c00005 	stb	r3,0(r2)
        return (0);
    1f5c:	0005883a 	mov	r2,zero
    1f60:	00016306 	br	24f0 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
    1f64:	e0bffe17 	ldw	r2,-8(fp)
    1f68:	1000051e 	bne	r2,zero,1f80 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
    1f6c:	e0800217 	ldw	r2,8(fp)
    1f70:	00c00104 	movi	r3,4
    1f74:	10c00005 	stb	r3,0(r2)
        return (0);
    1f78:	0005883a 	mov	r2,zero
    1f7c:	00015c06 	br	24f0 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
    1f80:	e0bffd17 	ldw	r2,-12(fp)
    1f84:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
    1f88:	e0bffc17 	ldw	r2,-16(fp)
    1f8c:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
    1f90:	e0bfef17 	ldw	r2,-68(fp)
    1f94:	10800017 	ldw	r2,0(r2)
    1f98:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
    1f9c:	00001906 	br	2004 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
    1fa0:	e0bff017 	ldw	r2,-64(fp)
    1fa4:	10800003 	ldbu	r2,0(r2)
    1fa8:	10803fcc 	andi	r2,r2,255
    1fac:	10c000a0 	cmpeqi	r3,r2,2
    1fb0:	1800091e 	bne	r3,zero,1fd8 <OSEventPendMulti+0xe4>
    1fb4:	10c000e0 	cmpeqi	r3,r2,3
    1fb8:	1800091e 	bne	r3,zero,1fe0 <OSEventPendMulti+0xec>
    1fbc:	10800060 	cmpeqi	r2,r2,1
    1fc0:	1000091e 	bne	r2,zero,1fe8 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
    1fc4:	e0800217 	ldw	r2,8(fp)
    1fc8:	00c00044 	movi	r3,1
    1fcc:	10c00005 	stb	r3,0(r2)
                 return (0);
    1fd0:	0005883a 	mov	r2,zero
    1fd4:	00014606 	br	24f0 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
    1fd8:	0001883a 	nop
    1fdc:	00000306 	br	1fec <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
    1fe0:	0001883a 	nop
    1fe4:	00000106 	br	1fec <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
    1fe8:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
    1fec:	e0bfef17 	ldw	r2,-68(fp)
    1ff0:	10800104 	addi	r2,r2,4
    1ff4:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
    1ff8:	e0bfef17 	ldw	r2,-68(fp)
    1ffc:	10800017 	ldw	r2,0(r2)
    2000:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
    2004:	e0bff017 	ldw	r2,-64(fp)
    2008:	103fe51e 	bne	r2,zero,1fa0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001fa0>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
    200c:	d0a80203 	ldbu	r2,-24568(gp)
    2010:	10803fcc 	andi	r2,r2,255
    2014:	10000526 	beq	r2,zero,202c <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
    2018:	e0800217 	ldw	r2,8(fp)
    201c:	00c00084 	movi	r3,2
    2020:	10c00005 	stb	r3,0(r2)
        return (0);
    2024:	0005883a 	mov	r2,zero
    2028:	00013106 	br	24f0 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
    202c:	d0a7f403 	ldbu	r2,-24624(gp)
    2030:	10803fcc 	andi	r2,r2,255
    2034:	10000526 	beq	r2,zero,204c <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
    2038:	e0800217 	ldw	r2,8(fp)
    203c:	00c00344 	movi	r3,13
    2040:	10c00005 	stb	r3,0(r2)
        return (0);
    2044:	0005883a 	mov	r2,zero
    2048:	00012906 	br	24f0 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    204c:	0005303a 	rdctl	r2,status
    2050:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2054:	e0fffb17 	ldw	r3,-20(fp)
    2058:	00bfff84 	movi	r2,-2
    205c:	1884703a 	and	r2,r3,r2
    2060:	1001703a 	wrctl	status,r2
  
  return context;
    2064:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
    2068:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
    206c:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
    2070:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
    2074:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
    2078:	e0bffc17 	ldw	r2,-16(fp)
    207c:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
    2080:	e0bfef17 	ldw	r2,-68(fp)
    2084:	10800017 	ldw	r2,0(r2)
    2088:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    208c:	00008106 	br	2294 <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
    2090:	e0bff017 	ldw	r2,-64(fp)
    2094:	10800003 	ldbu	r2,0(r2)
    2098:	10803fcc 	andi	r2,r2,255
    209c:	10c000a0 	cmpeqi	r3,r2,2
    20a0:	18003c1e 	bne	r3,zero,2194 <OSEventPendMulti+0x2a0>
    20a4:	10c000e0 	cmpeqi	r3,r2,3
    20a8:	1800031e 	bne	r3,zero,20b8 <OSEventPendMulti+0x1c4>
    20ac:	10800060 	cmpeqi	r2,r2,1
    20b0:	10001e1e 	bne	r2,zero,212c <OSEventPendMulti+0x238>
    20b4:	00006606 	br	2250 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
    20b8:	e0bff017 	ldw	r2,-64(fp)
    20bc:	1080020b 	ldhu	r2,8(r2)
    20c0:	10bfffcc 	andi	r2,r2,65535
    20c4:	10001526 	beq	r2,zero,211c <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
    20c8:	e0bff017 	ldw	r2,-64(fp)
    20cc:	1080020b 	ldhu	r2,8(r2)
    20d0:	10bfffc4 	addi	r2,r2,-1
    20d4:	1007883a 	mov	r3,r2
    20d8:	e0bff017 	ldw	r2,-64(fp)
    20dc:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
    20e0:	e0bffd17 	ldw	r2,-12(fp)
    20e4:	10c00104 	addi	r3,r2,4
    20e8:	e0fffd15 	stw	r3,-12(fp)
    20ec:	e0fff017 	ldw	r3,-64(fp)
    20f0:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
    20f4:	00800044 	movi	r2,1
    20f8:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
    20fc:	e0bffe17 	ldw	r2,-8(fp)
    2100:	10c00104 	addi	r3,r2,4
    2104:	e0fffe15 	stw	r3,-8(fp)
    2108:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
    210c:	e0bff18b 	ldhu	r2,-58(fp)
    2110:	10800044 	addi	r2,r2,1
    2114:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
    2118:	00005806 	br	227c <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
    211c:	e0bff203 	ldbu	r2,-56(fp)
    2120:	10800054 	ori	r2,r2,1
    2124:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    2128:	00005406 	br	227c <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
    212c:	e0bff017 	ldw	r2,-64(fp)
    2130:	10800117 	ldw	r2,4(r2)
    2134:	10001326 	beq	r2,zero,2184 <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
    2138:	e0bffe17 	ldw	r2,-8(fp)
    213c:	10c00104 	addi	r3,r2,4
    2140:	e0fffe15 	stw	r3,-8(fp)
    2144:	e0fff017 	ldw	r3,-64(fp)
    2148:	18c00117 	ldw	r3,4(r3)
    214c:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
    2150:	e0bff017 	ldw	r2,-64(fp)
    2154:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
    2158:	e0bffd17 	ldw	r2,-12(fp)
    215c:	10c00104 	addi	r3,r2,4
    2160:	e0fffd15 	stw	r3,-12(fp)
    2164:	e0fff017 	ldw	r3,-64(fp)
    2168:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
    216c:	00800044 	movi	r2,1
    2170:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
    2174:	e0bff18b 	ldhu	r2,-58(fp)
    2178:	10800044 	addi	r2,r2,1
    217c:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
    2180:	00003e06 	br	227c <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
    2184:	e0bff203 	ldbu	r2,-56(fp)
    2188:	10800094 	ori	r2,r2,2
    218c:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    2190:	00003a06 	br	227c <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
    2194:	e0bff017 	ldw	r2,-64(fp)
    2198:	10800117 	ldw	r2,4(r2)
    219c:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
    21a0:	e0bff517 	ldw	r2,-44(fp)
    21a4:	1080058b 	ldhu	r2,22(r2)
    21a8:	10bfffcc 	andi	r2,r2,65535
    21ac:	10002426 	beq	r2,zero,2240 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
    21b0:	e0bffe17 	ldw	r2,-8(fp)
    21b4:	10c00104 	addi	r3,r2,4
    21b8:	e0fffe15 	stw	r3,-8(fp)
    21bc:	e0fff517 	ldw	r3,-44(fp)
    21c0:	18c00417 	ldw	r3,16(r3)
    21c4:	19400104 	addi	r5,r3,4
    21c8:	e13ff517 	ldw	r4,-44(fp)
    21cc:	21400415 	stw	r5,16(r4)
    21d0:	18c00017 	ldw	r3,0(r3)
    21d4:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
    21d8:	e0bff517 	ldw	r2,-44(fp)
    21dc:	10c00417 	ldw	r3,16(r2)
    21e0:	e0bff517 	ldw	r2,-44(fp)
    21e4:	10800217 	ldw	r2,8(r2)
    21e8:	1880041e 	bne	r3,r2,21fc <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
    21ec:	e0bff517 	ldw	r2,-44(fp)
    21f0:	10c00117 	ldw	r3,4(r2)
    21f4:	e0bff517 	ldw	r2,-44(fp)
    21f8:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
    21fc:	e0bff517 	ldw	r2,-44(fp)
    2200:	1080058b 	ldhu	r2,22(r2)
    2204:	10bfffc4 	addi	r2,r2,-1
    2208:	1007883a 	mov	r3,r2
    220c:	e0bff517 	ldw	r2,-44(fp)
    2210:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
    2214:	e0bffd17 	ldw	r2,-12(fp)
    2218:	10c00104 	addi	r3,r2,4
    221c:	e0fffd15 	stw	r3,-12(fp)
    2220:	e0fff017 	ldw	r3,-64(fp)
    2224:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
    2228:	00800044 	movi	r2,1
    222c:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
    2230:	e0bff18b 	ldhu	r2,-58(fp)
    2234:	10800044 	addi	r2,r2,1
    2238:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
    223c:	00000f06 	br	227c <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
    2240:	e0bff203 	ldbu	r2,-56(fp)
    2244:	10800114 	ori	r2,r2,4
    2248:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    224c:	00000b06 	br	227c <OSEventPendMulti+0x388>
    2250:	e0bff317 	ldw	r2,-52(fp)
    2254:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2258:	e0bff417 	ldw	r2,-48(fp)
    225c:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
    2260:	e0bffd17 	ldw	r2,-12(fp)
    2264:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
    2268:	e0800217 	ldw	r2,8(fp)
    226c:	00c00044 	movi	r3,1
    2270:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
    2274:	e0bff18b 	ldhu	r2,-58(fp)
    2278:	00009d06 	br	24f0 <OSEventPendMulti+0x5fc>
        }
        pevents++;
    227c:	e0bfef17 	ldw	r2,-68(fp)
    2280:	10800104 	addi	r2,r2,4
    2284:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
    2288:	e0bfef17 	ldw	r2,-68(fp)
    228c:	10800017 	ldw	r2,0(r2)
    2290:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    2294:	e0bff017 	ldw	r2,-64(fp)
    2298:	103f7d1e 	bne	r2,zero,2090 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002090>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
    229c:	e0bff103 	ldbu	r2,-60(fp)
    22a0:	10800058 	cmpnei	r2,r2,1
    22a4:	10000a1e 	bne	r2,zero,22d0 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
    22a8:	e0bffd17 	ldw	r2,-12(fp)
    22ac:	10000015 	stw	zero,0(r2)
    22b0:	e0bff317 	ldw	r2,-52(fp)
    22b4:	e0bff615 	stw	r2,-40(fp)
    22b8:	e0bff617 	ldw	r2,-40(fp)
    22bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
    22c0:	e0800217 	ldw	r2,8(fp)
    22c4:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
    22c8:	e0bff18b 	ldhu	r2,-58(fp)
    22cc:	00008806 	br	24f0 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
    22d0:	d0a80317 	ldw	r2,-24564(gp)
    22d4:	d0e80317 	ldw	r3,-24564(gp)
    22d8:	19000c03 	ldbu	r4,48(r3)
    22dc:	e0fff203 	ldbu	r3,-56(fp)
    22e0:	20c6b03a 	or	r3,r4,r3
    22e4:	1809883a 	mov	r4,r3
    22e8:	00ffe004 	movi	r3,-128
    22ec:	20c6b03a 	or	r3,r4,r3
    22f0:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    22f4:	d0a80317 	ldw	r2,-24564(gp)
    22f8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
    22fc:	d0a80317 	ldw	r2,-24564(gp)
    2300:	e0ffff0b 	ldhu	r3,-4(fp)
    2304:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
    2308:	e13ffc17 	ldw	r4,-16(fp)
    230c:	0002e300 	call	2e30 <OS_EventTaskWaitMulti>
    2310:	e0bff317 	ldw	r2,-52(fp)
    2314:	e0bff915 	stw	r2,-28(fp)
    2318:	e0bff917 	ldw	r2,-28(fp)
    231c:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
    2320:	00035d40 	call	35d4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2324:	0005303a 	rdctl	r2,status
    2328:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    232c:	e0fff717 	ldw	r3,-36(fp)
    2330:	00bfff84 	movi	r2,-2
    2334:	1884703a 	and	r2,r3,r2
    2338:	1001703a 	wrctl	status,r2
  
  return context;
    233c:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
    2340:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
    2344:	d0a80317 	ldw	r2,-24564(gp)
    2348:	10800c43 	ldbu	r2,49(r2)
    234c:	10803fcc 	andi	r2,r2,255
    2350:	10000226 	beq	r2,zero,235c <OSEventPendMulti+0x468>
    2354:	108000a0 	cmpeqi	r2,r2,2
    2358:	10001826 	beq	r2,zero,23bc <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
    235c:	d0a80317 	ldw	r2,-24564(gp)
    2360:	10800717 	ldw	r2,28(r2)
    2364:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
    2368:	e0bff017 	ldw	r2,-64(fp)
    236c:	10000b26 	beq	r2,zero,239c <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
    2370:	e0bffd17 	ldw	r2,-12(fp)
    2374:	10c00104 	addi	r3,r2,4
    2378:	e0fffd15 	stw	r3,-12(fp)
    237c:	e0fff017 	ldw	r3,-64(fp)
    2380:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
    2384:	e0bffd17 	ldw	r2,-12(fp)
    2388:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
    238c:	e0bff18b 	ldhu	r2,-58(fp)
    2390:	10800044 	addi	r2,r2,1
    2394:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
    2398:	00000d06 	br	23d0 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
    239c:	d0a80317 	ldw	r2,-24564(gp)
    23a0:	00c00044 	movi	r3,1
    23a4:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    23a8:	d0a80317 	ldw	r2,-24564(gp)
    23ac:	e17ffc17 	ldw	r5,-16(fp)
    23b0:	1009883a 	mov	r4,r2
    23b4:	00030380 	call	3038 <OS_EventTaskRemoveMulti>
             }
			 break;
    23b8:	00000506 	br	23d0 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    23bc:	d0a80317 	ldw	r2,-24564(gp)
    23c0:	e17ffc17 	ldw	r5,-16(fp)
    23c4:	1009883a 	mov	r4,r2
    23c8:	00030380 	call	3038 <OS_EventTaskRemoveMulti>
             break;
    23cc:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
    23d0:	d0a80317 	ldw	r2,-24564(gp)
    23d4:	10800c43 	ldbu	r2,49(r2)
    23d8:	10803fcc 	andi	r2,r2,255
    23dc:	10000326 	beq	r2,zero,23ec <OSEventPendMulti+0x4f8>
    23e0:	108000a0 	cmpeqi	r2,r2,2
    23e4:	1000231e 	bne	r2,zero,2474 <OSEventPendMulti+0x580>
    23e8:	00002a06 	br	2494 <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
    23ec:	e0bff017 	ldw	r2,-64(fp)
    23f0:	10800003 	ldbu	r2,0(r2)
    23f4:	10803fcc 	andi	r2,r2,255
    23f8:	0080100e 	bge	zero,r2,243c <OSEventPendMulti+0x548>
    23fc:	10c000d0 	cmplti	r3,r2,3
    2400:	1800071e 	bne	r3,zero,2420 <OSEventPendMulti+0x52c>
    2404:	108000e0 	cmpeqi	r2,r2,3
    2408:	10000c26 	beq	r2,zero,243c <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
    240c:	e0bffe17 	ldw	r2,-8(fp)
    2410:	10c00104 	addi	r3,r2,4
    2414:	e0fffe15 	stw	r3,-8(fp)
    2418:	10000015 	stw	zero,0(r2)
                      break;
    241c:	00001206 	br	2468 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
    2420:	e0bffe17 	ldw	r2,-8(fp)
    2424:	10c00104 	addi	r3,r2,4
    2428:	e0fffe15 	stw	r3,-8(fp)
    242c:	d0e80317 	ldw	r3,-24564(gp)
    2430:	18c00917 	ldw	r3,36(r3)
    2434:	10c00015 	stw	r3,0(r2)
                      break;
    2438:	00000b06 	br	2468 <OSEventPendMulti+0x574>
    243c:	e0bff317 	ldw	r2,-52(fp)
    2440:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2444:	e0bff817 	ldw	r2,-32(fp)
    2448:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
    244c:	e0bffd17 	ldw	r2,-12(fp)
    2450:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
    2454:	e0800217 	ldw	r2,8(fp)
    2458:	00c00044 	movi	r3,1
    245c:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
    2460:	e0bff18b 	ldhu	r2,-58(fp)
    2464:	00002206 	br	24f0 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
    2468:	e0800217 	ldw	r2,8(fp)
    246c:	10000005 	stb	zero,0(r2)
             break;
    2470:	00001006 	br	24b4 <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
    2474:	e0bffe17 	ldw	r2,-8(fp)
    2478:	10c00104 	addi	r3,r2,4
    247c:	e0fffe15 	stw	r3,-8(fp)
    2480:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
    2484:	e0800217 	ldw	r2,8(fp)
    2488:	00c00384 	movi	r3,14
    248c:	10c00005 	stb	r3,0(r2)
             break;
    2490:	00000806 	br	24b4 <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
    2494:	e0bffe17 	ldw	r2,-8(fp)
    2498:	10c00104 	addi	r3,r2,4
    249c:	e0fffe15 	stw	r3,-8(fp)
    24a0:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
    24a4:	e0800217 	ldw	r2,8(fp)
    24a8:	00c00284 	movi	r3,10
    24ac:	10c00005 	stb	r3,0(r2)
             break;
    24b0:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
    24b4:	d0a80317 	ldw	r2,-24564(gp)
    24b8:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
    24bc:	d0a80317 	ldw	r2,-24564(gp)
    24c0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
    24c4:	d0a80317 	ldw	r2,-24564(gp)
    24c8:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    24cc:	d0a80317 	ldw	r2,-24564(gp)
    24d0:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
    24d4:	d0a80317 	ldw	r2,-24564(gp)
    24d8:	10000915 	stw	zero,36(r2)
    24dc:	e0bff317 	ldw	r2,-52(fp)
    24e0:	e0bffa15 	stw	r2,-24(fp)
    24e4:	e0bffa17 	ldw	r2,-24(fp)
    24e8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
    24ec:	e0bff18b 	ldhu	r2,-58(fp)
}
    24f0:	e037883a 	mov	sp,fp
    24f4:	dfc00117 	ldw	ra,4(sp)
    24f8:	df000017 	ldw	fp,0(sp)
    24fc:	dec00204 	addi	sp,sp,8
    2500:	f800283a 	ret

00002504 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
    2504:	defffe04 	addi	sp,sp,-8
    2508:	dfc00115 	stw	ra,4(sp)
    250c:	df000015 	stw	fp,0(sp)
    2510:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
    2514:	000ccc40 	call	ccc4 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
    2518:	00032800 	call	3280 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
    251c:	00032c80 	call	32c8 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
    2520:	00034340 	call	3434 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
    2524:	00031a00 	call	31a0 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
    2528:	00052e40 	call	52e4 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
    252c:	0005be40 	call	5be4 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
    2530:	0006d0c0 	call	6d0c <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
    2534:	00033340 	call	3334 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
    2538:	00033b40 	call	33b4 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
    253c:	000cce40 	call	cce4 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
    2540:	0003cb80 	call	3cb8 <OSDebugInit>
#endif
}
    2544:	0001883a 	nop
    2548:	e037883a 	mov	sp,fp
    254c:	dfc00117 	ldw	ra,4(sp)
    2550:	df000017 	ldw	fp,0(sp)
    2554:	dec00204 	addi	sp,sp,8
    2558:	f800283a 	ret

0000255c <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
    255c:	deffff04 	addi	sp,sp,-4
    2560:	df000015 	stw	fp,0(sp)
    2564:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
    2568:	d0a7f443 	ldbu	r2,-24623(gp)
    256c:	10803fcc 	andi	r2,r2,255
    2570:	10800058 	cmpnei	r2,r2,1
    2574:	1000071e 	bne	r2,zero,2594 <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
    2578:	d0a80203 	ldbu	r2,-24568(gp)
    257c:	10803fcc 	andi	r2,r2,255
    2580:	10803fe0 	cmpeqi	r2,r2,255
    2584:	1000031e 	bne	r2,zero,2594 <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
    2588:	d0a80203 	ldbu	r2,-24568(gp)
    258c:	10800044 	addi	r2,r2,1
    2590:	d0a80205 	stb	r2,-24568(gp)
        }
    }
}
    2594:	0001883a 	nop
    2598:	e037883a 	mov	sp,fp
    259c:	df000017 	ldw	fp,0(sp)
    25a0:	dec00104 	addi	sp,sp,4
    25a4:	f800283a 	ret

000025a8 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
    25a8:	defffb04 	addi	sp,sp,-20
    25ac:	dfc00415 	stw	ra,16(sp)
    25b0:	df000315 	stw	fp,12(sp)
    25b4:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    25b8:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
    25bc:	d0a7f443 	ldbu	r2,-24623(gp)
    25c0:	10803fcc 	andi	r2,r2,255
    25c4:	10800058 	cmpnei	r2,r2,1
    25c8:	10002f1e 	bne	r2,zero,2688 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    25cc:	0005303a 	rdctl	r2,status
    25d0:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    25d4:	e0ffff17 	ldw	r3,-4(fp)
    25d8:	00bfff84 	movi	r2,-2
    25dc:	1884703a 	and	r2,r3,r2
    25e0:	1001703a 	wrctl	status,r2
  
  return context;
    25e4:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
    25e8:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
    25ec:	d0a80203 	ldbu	r2,-24568(gp)
    25f0:	10803fcc 	andi	r2,r2,255
    25f4:	10000326 	beq	r2,zero,2604 <OSIntExit+0x5c>
            OSIntNesting--;
    25f8:	d0a80203 	ldbu	r2,-24568(gp)
    25fc:	10bfffc4 	addi	r2,r2,-1
    2600:	d0a80205 	stb	r2,-24568(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
    2604:	d0a80203 	ldbu	r2,-24568(gp)
    2608:	10803fcc 	andi	r2,r2,255
    260c:	10001a1e 	bne	r2,zero,2678 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
    2610:	d0a7f403 	ldbu	r2,-24624(gp)
    2614:	10803fcc 	andi	r2,r2,255
    2618:	1000171e 	bne	r2,zero,2678 <OSIntExit+0xd0>
                OS_SchedNew();
    261c:	00036a40 	call	36a4 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
    2620:	d0e7f603 	ldbu	r3,-24616(gp)
    2624:	d0a7f643 	ldbu	r2,-24615(gp)
    2628:	18c03fcc 	andi	r3,r3,255
    262c:	10803fcc 	andi	r2,r2,255
    2630:	18801126 	beq	r3,r2,2678 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
    2634:	d0a7f603 	ldbu	r2,-24616(gp)
    2638:	10c03fcc 	andi	r3,r2,255
    263c:	008000b4 	movhi	r2,2
    2640:	10a29204 	addi	r2,r2,-30136
    2644:	18c7883a 	add	r3,r3,r3
    2648:	18c7883a 	add	r3,r3,r3
    264c:	10c5883a 	add	r2,r2,r3
    2650:	10800017 	ldw	r2,0(r2)
    2654:	d0a7fe15 	stw	r2,-24584(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
    2658:	d0a7fe17 	ldw	r2,-24584(gp)
    265c:	10c00e17 	ldw	r3,56(r2)
    2660:	18c00044 	addi	r3,r3,1
    2664:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
    2668:	d0a7f917 	ldw	r2,-24604(gp)
    266c:	10800044 	addi	r2,r2,1
    2670:	d0a7f915 	stw	r2,-24604(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
    2674:	000c9f00 	call	c9f0 <OSCtxSw>
    2678:	e0bffd17 	ldw	r2,-12(fp)
    267c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2680:	e0bffe17 	ldw	r2,-8(fp)
    2684:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    2688:	0001883a 	nop
    268c:	e037883a 	mov	sp,fp
    2690:	dfc00117 	ldw	ra,4(sp)
    2694:	df000017 	ldw	fp,0(sp)
    2698:	dec00204 	addi	sp,sp,8
    269c:	f800283a 	ret

000026a0 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
    26a0:	defffc04 	addi	sp,sp,-16
    26a4:	df000315 	stw	fp,12(sp)
    26a8:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    26ac:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
    26b0:	d0a7f443 	ldbu	r2,-24623(gp)
    26b4:	10803fcc 	andi	r2,r2,255
    26b8:	10800058 	cmpnei	r2,r2,1
    26bc:	1000161e 	bne	r2,zero,2718 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    26c0:	0005303a 	rdctl	r2,status
    26c4:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    26c8:	e0ffff17 	ldw	r3,-4(fp)
    26cc:	00bfff84 	movi	r2,-2
    26d0:	1884703a 	and	r2,r3,r2
    26d4:	1001703a 	wrctl	status,r2
  
  return context;
    26d8:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
    26dc:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
    26e0:	d0a80203 	ldbu	r2,-24568(gp)
    26e4:	10803fcc 	andi	r2,r2,255
    26e8:	1000071e 	bne	r2,zero,2708 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
    26ec:	d0a7f403 	ldbu	r2,-24624(gp)
    26f0:	10803fcc 	andi	r2,r2,255
    26f4:	10803fe0 	cmpeqi	r2,r2,255
    26f8:	1000031e 	bne	r2,zero,2708 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
    26fc:	d0a7f403 	ldbu	r2,-24624(gp)
    2700:	10800044 	addi	r2,r2,1
    2704:	d0a7f405 	stb	r2,-24624(gp)
    2708:	e0bffd17 	ldw	r2,-12(fp)
    270c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2710:	e0bffe17 	ldw	r2,-8(fp)
    2714:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    2718:	0001883a 	nop
    271c:	e037883a 	mov	sp,fp
    2720:	df000017 	ldw	fp,0(sp)
    2724:	dec00104 	addi	sp,sp,4
    2728:	f800283a 	ret

0000272c <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
    272c:	defff804 	addi	sp,sp,-32
    2730:	dfc00715 	stw	ra,28(sp)
    2734:	df000615 	stw	fp,24(sp)
    2738:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    273c:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
    2740:	d0a7f443 	ldbu	r2,-24623(gp)
    2744:	10803fcc 	andi	r2,r2,255
    2748:	10800058 	cmpnei	r2,r2,1
    274c:	1000281e 	bne	r2,zero,27f0 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2750:	0005303a 	rdctl	r2,status
    2754:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2758:	e0ffff17 	ldw	r3,-4(fp)
    275c:	00bfff84 	movi	r2,-2
    2760:	1884703a 	and	r2,r3,r2
    2764:	1001703a 	wrctl	status,r2
  
  return context;
    2768:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
    276c:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
    2770:	d0a7f403 	ldbu	r2,-24624(gp)
    2774:	10803fcc 	andi	r2,r2,255
    2778:	10001926 	beq	r2,zero,27e0 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
    277c:	d0a7f403 	ldbu	r2,-24624(gp)
    2780:	10bfffc4 	addi	r2,r2,-1
    2784:	d0a7f405 	stb	r2,-24624(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
    2788:	d0a7f403 	ldbu	r2,-24624(gp)
    278c:	10803fcc 	andi	r2,r2,255
    2790:	10000e1e 	bne	r2,zero,27cc <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
    2794:	d0a80203 	ldbu	r2,-24568(gp)
    2798:	10803fcc 	andi	r2,r2,255
    279c:	1000061e 	bne	r2,zero,27b8 <OSSchedUnlock+0x8c>
    27a0:	e0bffa17 	ldw	r2,-24(fp)
    27a4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    27a8:	e0bffb17 	ldw	r2,-20(fp)
    27ac:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
    27b0:	00035d40 	call	35d4 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
    27b4:	00000e06 	br	27f0 <OSSchedUnlock+0xc4>
    27b8:	e0bffa17 	ldw	r2,-24(fp)
    27bc:	e0bffc15 	stw	r2,-16(fp)
    27c0:	e0bffc17 	ldw	r2,-16(fp)
    27c4:	1001703a 	wrctl	status,r2
    27c8:	00000906 	br	27f0 <OSSchedUnlock+0xc4>
    27cc:	e0bffa17 	ldw	r2,-24(fp)
    27d0:	e0bffd15 	stw	r2,-12(fp)
    27d4:	e0bffd17 	ldw	r2,-12(fp)
    27d8:	1001703a 	wrctl	status,r2
    27dc:	00000406 	br	27f0 <OSSchedUnlock+0xc4>
    27e0:	e0bffa17 	ldw	r2,-24(fp)
    27e4:	e0bffe15 	stw	r2,-8(fp)
    27e8:	e0bffe17 	ldw	r2,-8(fp)
    27ec:	1001703a 	wrctl	status,r2
    27f0:	0001883a 	nop
    27f4:	e037883a 	mov	sp,fp
    27f8:	dfc00117 	ldw	ra,4(sp)
    27fc:	df000017 	ldw	fp,0(sp)
    2800:	dec00204 	addi	sp,sp,8
    2804:	f800283a 	ret

00002808 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
    2808:	defffe04 	addi	sp,sp,-8
    280c:	dfc00115 	stw	ra,4(sp)
    2810:	df000015 	stw	fp,0(sp)
    2814:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
    2818:	d0a7f443 	ldbu	r2,-24623(gp)
    281c:	10803fcc 	andi	r2,r2,255
    2820:	10000f1e 	bne	r2,zero,2860 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
    2824:	00036a40 	call	36a4 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
    2828:	d0a7f603 	ldbu	r2,-24616(gp)
    282c:	d0a7f645 	stb	r2,-24615(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
    2830:	d0a7f603 	ldbu	r2,-24616(gp)
    2834:	10c03fcc 	andi	r3,r2,255
    2838:	008000b4 	movhi	r2,2
    283c:	10a29204 	addi	r2,r2,-30136
    2840:	18c7883a 	add	r3,r3,r3
    2844:	18c7883a 	add	r3,r3,r3
    2848:	10c5883a 	add	r2,r2,r3
    284c:	10800017 	ldw	r2,0(r2)
    2850:	d0a7fe15 	stw	r2,-24584(gp)
        OSTCBCur      = OSTCBHighRdy;
    2854:	d0a7fe17 	ldw	r2,-24584(gp)
    2858:	d0a80315 	stw	r2,-24564(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
    285c:	000ca7c0 	call	ca7c <OSStartHighRdy>
    }
}
    2860:	0001883a 	nop
    2864:	e037883a 	mov	sp,fp
    2868:	dfc00117 	ldw	ra,4(sp)
    286c:	df000017 	ldw	fp,0(sp)
    2870:	dec00204 	addi	sp,sp,8
    2874:	f800283a 	ret

00002878 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
    2878:	defff904 	addi	sp,sp,-28
    287c:	dfc00615 	stw	ra,24(sp)
    2880:	df000515 	stw	fp,20(sp)
    2884:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    2888:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
    288c:	01000084 	movi	r4,2
    2890:	0008f800 	call	8f80 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2894:	0005303a 	rdctl	r2,status
    2898:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    289c:	e0fffc17 	ldw	r3,-16(fp)
    28a0:	00bfff84 	movi	r2,-2
    28a4:	1884703a 	and	r2,r3,r2
    28a8:	1001703a 	wrctl	status,r2
  
  return context;
    28ac:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
    28b0:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
    28b4:	d027f515 	stw	zero,-24620(gp)
    28b8:	e0bffb17 	ldw	r2,-20(fp)
    28bc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    28c0:	e0bffd17 	ldw	r2,-12(fp)
    28c4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
    28c8:	0009883a 	mov	r4,zero
    28cc:	0008f800 	call	8f80 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    28d0:	0005303a 	rdctl	r2,status
    28d4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    28d8:	e0fffe17 	ldw	r3,-8(fp)
    28dc:	00bfff84 	movi	r2,-2
    28e0:	1884703a 	and	r2,r3,r2
    28e4:	1001703a 	wrctl	status,r2
  
  return context;
    28e8:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
    28ec:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
    28f0:	d0a7f517 	ldw	r2,-24620(gp)
    28f4:	d0a7fa15 	stw	r2,-24600(gp)
    OSStatRdy    = OS_TRUE;
    28f8:	00800044 	movi	r2,1
    28fc:	d0a80605 	stb	r2,-24552(gp)
    2900:	e0bffb17 	ldw	r2,-20(fp)
    2904:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2908:	e0bfff17 	ldw	r2,-4(fp)
    290c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
    2910:	0001883a 	nop
    2914:	e037883a 	mov	sp,fp
    2918:	dfc00117 	ldw	ra,4(sp)
    291c:	df000017 	ldw	fp,0(sp)
    2920:	dec00204 	addi	sp,sp,8
    2924:	f800283a 	ret

00002928 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
    2928:	defff704 	addi	sp,sp,-36
    292c:	dfc00815 	stw	ra,32(sp)
    2930:	df000715 	stw	fp,28(sp)
    2934:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    2938:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
    293c:	000cca40 	call	cca4 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2940:	0005303a 	rdctl	r2,status
    2944:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2948:	e0fffd17 	ldw	r3,-12(fp)
    294c:	00bfff84 	movi	r2,-2
    2950:	1884703a 	and	r2,r3,r2
    2954:	1001703a 	wrctl	status,r2
  
  return context;
    2958:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
    295c:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
    2960:	d0a80417 	ldw	r2,-24560(gp)
    2964:	10800044 	addi	r2,r2,1
    2968:	d0a80415 	stw	r2,-24560(gp)
    296c:	e0bffb17 	ldw	r2,-20(fp)
    2970:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2974:	e0bfff17 	ldw	r2,-4(fp)
    2978:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
    297c:	d0a7f443 	ldbu	r2,-24623(gp)
    2980:	10803fcc 	andi	r2,r2,255
    2984:	10800058 	cmpnei	r2,r2,1
    2988:	10006a1e 	bne	r2,zero,2b34 <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
    298c:	d0a7f803 	ldbu	r2,-24608(gp)
    2990:	10803fcc 	andi	r2,r2,255
    2994:	10c00060 	cmpeqi	r3,r2,1
    2998:	1800061e 	bne	r3,zero,29b4 <OSTimeTick+0x8c>
    299c:	10c000a0 	cmpeqi	r3,r2,2
    29a0:	1800061e 	bne	r3,zero,29bc <OSTimeTick+0x94>
    29a4:	10000a1e 	bne	r2,zero,29d0 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
    29a8:	00800044 	movi	r2,1
    29ac:	e0bffa05 	stb	r2,-24(fp)
                 break;
    29b0:	00000b06 	br	29e0 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
    29b4:	e03ffa05 	stb	zero,-24(fp)
                 break;
    29b8:	00000906 	br	29e0 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
    29bc:	00800044 	movi	r2,1
    29c0:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
    29c4:	00800044 	movi	r2,1
    29c8:	d0a7f805 	stb	r2,-24608(gp)
                 break;
    29cc:	00000406 	br	29e0 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
    29d0:	00800044 	movi	r2,1
    29d4:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
    29d8:	d027f805 	stb	zero,-24608(gp)
                 break;
    29dc:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
    29e0:	e0bffa03 	ldbu	r2,-24(fp)
    29e4:	10005226 	beq	r2,zero,2b30 <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
    29e8:	d0a7f717 	ldw	r2,-24612(gp)
    29ec:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    29f0:	00004906 	br	2b18 <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    29f4:	0005303a 	rdctl	r2,status
    29f8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    29fc:	e0fffc17 	ldw	r3,-16(fp)
    2a00:	00bfff84 	movi	r2,-2
    2a04:	1884703a 	and	r2,r3,r2
    2a08:	1001703a 	wrctl	status,r2
  
  return context;
    2a0c:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
    2a10:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
    2a14:	e0bff917 	ldw	r2,-28(fp)
    2a18:	10800b8b 	ldhu	r2,46(r2)
    2a1c:	10bfffcc 	andi	r2,r2,65535
    2a20:	10003626 	beq	r2,zero,2afc <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
    2a24:	e0bff917 	ldw	r2,-28(fp)
    2a28:	10800b8b 	ldhu	r2,46(r2)
    2a2c:	10bfffc4 	addi	r2,r2,-1
    2a30:	1007883a 	mov	r3,r2
    2a34:	e0bff917 	ldw	r2,-28(fp)
    2a38:	10c00b8d 	sth	r3,46(r2)
    2a3c:	e0bff917 	ldw	r2,-28(fp)
    2a40:	10800b8b 	ldhu	r2,46(r2)
    2a44:	10bfffcc 	andi	r2,r2,65535
    2a48:	10002c1e 	bne	r2,zero,2afc <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
    2a4c:	e0bff917 	ldw	r2,-28(fp)
    2a50:	10800c03 	ldbu	r2,48(r2)
    2a54:	10803fcc 	andi	r2,r2,255
    2a58:	10800dcc 	andi	r2,r2,55
    2a5c:	10000b26 	beq	r2,zero,2a8c <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
    2a60:	e0bff917 	ldw	r2,-28(fp)
    2a64:	10c00c03 	ldbu	r3,48(r2)
    2a68:	00bff204 	movi	r2,-56
    2a6c:	1884703a 	and	r2,r3,r2
    2a70:	1007883a 	mov	r3,r2
    2a74:	e0bff917 	ldw	r2,-28(fp)
    2a78:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
    2a7c:	e0bff917 	ldw	r2,-28(fp)
    2a80:	00c00044 	movi	r3,1
    2a84:	10c00c45 	stb	r3,49(r2)
    2a88:	00000206 	br	2a94 <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
    2a8c:	e0bff917 	ldw	r2,-28(fp)
    2a90:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
    2a94:	e0bff917 	ldw	r2,-28(fp)
    2a98:	10800c03 	ldbu	r2,48(r2)
    2a9c:	10803fcc 	andi	r2,r2,255
    2aa0:	1080020c 	andi	r2,r2,8
    2aa4:	1000151e 	bne	r2,zero,2afc <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
    2aa8:	e0bff917 	ldw	r2,-28(fp)
    2aac:	10c00d83 	ldbu	r3,54(r2)
    2ab0:	d0a80003 	ldbu	r2,-24576(gp)
    2ab4:	1884b03a 	or	r2,r3,r2
    2ab8:	d0a80005 	stb	r2,-24576(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    2abc:	e0bff917 	ldw	r2,-28(fp)
    2ac0:	10800d03 	ldbu	r2,52(r2)
    2ac4:	10c03fcc 	andi	r3,r2,255
    2ac8:	e0bff917 	ldw	r2,-28(fp)
    2acc:	10800d03 	ldbu	r2,52(r2)
    2ad0:	11003fcc 	andi	r4,r2,255
    2ad4:	d0a80044 	addi	r2,gp,-24575
    2ad8:	2085883a 	add	r2,r4,r2
    2adc:	11000003 	ldbu	r4,0(r2)
    2ae0:	e0bff917 	ldw	r2,-28(fp)
    2ae4:	10800d43 	ldbu	r2,53(r2)
    2ae8:	2084b03a 	or	r2,r4,r2
    2aec:	1009883a 	mov	r4,r2
    2af0:	d0a80044 	addi	r2,gp,-24575
    2af4:	1885883a 	add	r2,r3,r2
    2af8:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
    2afc:	e0bff917 	ldw	r2,-28(fp)
    2b00:	10800517 	ldw	r2,20(r2)
    2b04:	e0bff915 	stw	r2,-28(fp)
    2b08:	e0bffb17 	ldw	r2,-20(fp)
    2b0c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2b10:	e0bffe17 	ldw	r2,-8(fp)
    2b14:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    2b18:	e0bff917 	ldw	r2,-28(fp)
    2b1c:	10800c83 	ldbu	r2,50(r2)
    2b20:	10803fcc 	andi	r2,r2,255
    2b24:	10800518 	cmpnei	r2,r2,20
    2b28:	103fb21e 	bne	r2,zero,29f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70029f4>
    2b2c:	00000106 	br	2b34 <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
    2b30:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
    2b34:	e037883a 	mov	sp,fp
    2b38:	dfc00117 	ldw	ra,4(sp)
    2b3c:	df000017 	ldw	fp,0(sp)
    2b40:	dec00204 	addi	sp,sp,8
    2b44:	f800283a 	ret

00002b48 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
    2b48:	deffff04 	addi	sp,sp,-4
    2b4c:	df000015 	stw	fp,0(sp)
    2b50:	d839883a 	mov	fp,sp
    return (OS_VERSION);
    2b54:	00804784 	movi	r2,286
}
    2b58:	e037883a 	mov	sp,fp
    2b5c:	df000017 	ldw	fp,0(sp)
    2b60:	dec00104 	addi	sp,sp,4
    2b64:	f800283a 	ret

00002b68 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
    2b68:	deffff04 	addi	sp,sp,-4
    2b6c:	df000015 	stw	fp,0(sp)
    2b70:	d839883a 	mov	fp,sp
}
    2b74:	0001883a 	nop
    2b78:	e037883a 	mov	sp,fp
    2b7c:	df000017 	ldw	fp,0(sp)
    2b80:	dec00104 	addi	sp,sp,4
    2b84:	f800283a 	ret

00002b88 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
    2b88:	defff804 	addi	sp,sp,-32
    2b8c:	dfc00715 	stw	ra,28(sp)
    2b90:	df000615 	stw	fp,24(sp)
    2b94:	df000604 	addi	fp,sp,24
    2b98:	e13ffc15 	stw	r4,-16(fp)
    2b9c:	e17ffd15 	stw	r5,-12(fp)
    2ba0:	3007883a 	mov	r3,r6
    2ba4:	3805883a 	mov	r2,r7
    2ba8:	e0fffe05 	stb	r3,-8(fp)
    2bac:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
    2bb0:	e0bffc17 	ldw	r2,-16(fp)
    2bb4:	10800283 	ldbu	r2,10(r2)
    2bb8:	10c03fcc 	andi	r3,r2,255
    2bbc:	00800074 	movhi	r2,1
    2bc0:	10b5c204 	addi	r2,r2,-10488
    2bc4:	10c5883a 	add	r2,r2,r3
    2bc8:	10800003 	ldbu	r2,0(r2)
    2bcc:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
    2bd0:	e0bffa03 	ldbu	r2,-24(fp)
    2bd4:	e0fffc17 	ldw	r3,-16(fp)
    2bd8:	1885883a 	add	r2,r3,r2
    2bdc:	108002c4 	addi	r2,r2,11
    2be0:	10800003 	ldbu	r2,0(r2)
    2be4:	10c03fcc 	andi	r3,r2,255
    2be8:	00800074 	movhi	r2,1
    2bec:	10b5c204 	addi	r2,r2,-10488
    2bf0:	10c5883a 	add	r2,r2,r3
    2bf4:	10800003 	ldbu	r2,0(r2)
    2bf8:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
    2bfc:	e0bffa03 	ldbu	r2,-24(fp)
    2c00:	100490fa 	slli	r2,r2,3
    2c04:	1007883a 	mov	r3,r2
    2c08:	e0bffa43 	ldbu	r2,-23(fp)
    2c0c:	1885883a 	add	r2,r3,r2
    2c10:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
    2c14:	e0fffa83 	ldbu	r3,-22(fp)
    2c18:	008000b4 	movhi	r2,2
    2c1c:	10a29204 	addi	r2,r2,-30136
    2c20:	18c7883a 	add	r3,r3,r3
    2c24:	18c7883a 	add	r3,r3,r3
    2c28:	10c5883a 	add	r2,r2,r3
    2c2c:	10800017 	ldw	r2,0(r2)
    2c30:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
    2c34:	e0bffb17 	ldw	r2,-20(fp)
    2c38:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
    2c3c:	e0bffb17 	ldw	r2,-20(fp)
    2c40:	e0fffd17 	ldw	r3,-12(fp)
    2c44:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
    2c48:	e0bffb17 	ldw	r2,-20(fp)
    2c4c:	10800c03 	ldbu	r2,48(r2)
    2c50:	1007883a 	mov	r3,r2
    2c54:	e0bffe03 	ldbu	r2,-8(fp)
    2c58:	0084303a 	nor	r2,zero,r2
    2c5c:	1884703a 	and	r2,r3,r2
    2c60:	1007883a 	mov	r3,r2
    2c64:	e0bffb17 	ldw	r2,-20(fp)
    2c68:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
    2c6c:	e0bffb17 	ldw	r2,-20(fp)
    2c70:	e0ffff03 	ldbu	r3,-4(fp)
    2c74:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
    2c78:	e0bffb17 	ldw	r2,-20(fp)
    2c7c:	10800c03 	ldbu	r2,48(r2)
    2c80:	10803fcc 	andi	r2,r2,255
    2c84:	1080020c 	andi	r2,r2,8
    2c88:	1000111e 	bne	r2,zero,2cd0 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
    2c8c:	e0bffb17 	ldw	r2,-20(fp)
    2c90:	10c00d83 	ldbu	r3,54(r2)
    2c94:	d0a80003 	ldbu	r2,-24576(gp)
    2c98:	1884b03a 	or	r2,r3,r2
    2c9c:	d0a80005 	stb	r2,-24576(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
    2ca0:	e0fffa03 	ldbu	r3,-24(fp)
    2ca4:	e13ffa03 	ldbu	r4,-24(fp)
    2ca8:	d0a80044 	addi	r2,gp,-24575
    2cac:	2085883a 	add	r2,r4,r2
    2cb0:	11000003 	ldbu	r4,0(r2)
    2cb4:	e0bffb17 	ldw	r2,-20(fp)
    2cb8:	10800d43 	ldbu	r2,53(r2)
    2cbc:	2084b03a 	or	r2,r4,r2
    2cc0:	1009883a 	mov	r4,r2
    2cc4:	d0a80044 	addi	r2,gp,-24575
    2cc8:	1885883a 	add	r2,r3,r2
    2ccc:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
    2cd0:	e17ffc17 	ldw	r5,-16(fp)
    2cd4:	e13ffb17 	ldw	r4,-20(fp)
    2cd8:	0002f800 	call	2f80 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
    2cdc:	e0bffb17 	ldw	r2,-20(fp)
    2ce0:	10800817 	ldw	r2,32(r2)
    2ce4:	10000826 	beq	r2,zero,2d08 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
    2ce8:	e0bffb17 	ldw	r2,-20(fp)
    2cec:	10800817 	ldw	r2,32(r2)
    2cf0:	100b883a 	mov	r5,r2
    2cf4:	e13ffb17 	ldw	r4,-20(fp)
    2cf8:	00030380 	call	3038 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
    2cfc:	e0bffb17 	ldw	r2,-20(fp)
    2d00:	e0fffc17 	ldw	r3,-16(fp)
    2d04:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
    2d08:	e0bffa83 	ldbu	r2,-22(fp)
}
    2d0c:	e037883a 	mov	sp,fp
    2d10:	dfc00117 	ldw	ra,4(sp)
    2d14:	df000017 	ldw	fp,0(sp)
    2d18:	dec00204 	addi	sp,sp,8
    2d1c:	f800283a 	ret

00002d20 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
    2d20:	defffd04 	addi	sp,sp,-12
    2d24:	df000215 	stw	fp,8(sp)
    2d28:	df000204 	addi	fp,sp,8
    2d2c:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
    2d30:	d0a80317 	ldw	r2,-24564(gp)
    2d34:	e0ffff17 	ldw	r3,-4(fp)
    2d38:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
    2d3c:	d0a80317 	ldw	r2,-24564(gp)
    2d40:	10800d03 	ldbu	r2,52(r2)
    2d44:	10803fcc 	andi	r2,r2,255
    2d48:	d0e80317 	ldw	r3,-24564(gp)
    2d4c:	18c00d03 	ldbu	r3,52(r3)
    2d50:	18c03fcc 	andi	r3,r3,255
    2d54:	e13fff17 	ldw	r4,-4(fp)
    2d58:	20c7883a 	add	r3,r4,r3
    2d5c:	18c002c4 	addi	r3,r3,11
    2d60:	19000003 	ldbu	r4,0(r3)
    2d64:	d0e80317 	ldw	r3,-24564(gp)
    2d68:	18c00d43 	ldbu	r3,53(r3)
    2d6c:	20c6b03a 	or	r3,r4,r3
    2d70:	1809883a 	mov	r4,r3
    2d74:	e0ffff17 	ldw	r3,-4(fp)
    2d78:	1885883a 	add	r2,r3,r2
    2d7c:	108002c4 	addi	r2,r2,11
    2d80:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    2d84:	e0bfff17 	ldw	r2,-4(fp)
    2d88:	10c00283 	ldbu	r3,10(r2)
    2d8c:	d0a80317 	ldw	r2,-24564(gp)
    2d90:	10800d83 	ldbu	r2,54(r2)
    2d94:	1884b03a 	or	r2,r3,r2
    2d98:	1007883a 	mov	r3,r2
    2d9c:	e0bfff17 	ldw	r2,-4(fp)
    2da0:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    2da4:	d0a80317 	ldw	r2,-24564(gp)
    2da8:	10800d03 	ldbu	r2,52(r2)
    2dac:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    2db0:	e0fffe03 	ldbu	r3,-8(fp)
    2db4:	e13ffe03 	ldbu	r4,-8(fp)
    2db8:	d0a80044 	addi	r2,gp,-24575
    2dbc:	2085883a 	add	r2,r4,r2
    2dc0:	10800003 	ldbu	r2,0(r2)
    2dc4:	1009883a 	mov	r4,r2
    2dc8:	d0a80317 	ldw	r2,-24564(gp)
    2dcc:	10800d43 	ldbu	r2,53(r2)
    2dd0:	0084303a 	nor	r2,zero,r2
    2dd4:	2084703a 	and	r2,r4,r2
    2dd8:	1009883a 	mov	r4,r2
    2ddc:	d0a80044 	addi	r2,gp,-24575
    2de0:	1885883a 	add	r2,r3,r2
    2de4:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    2de8:	e0fffe03 	ldbu	r3,-8(fp)
    2dec:	d0a80044 	addi	r2,gp,-24575
    2df0:	1885883a 	add	r2,r3,r2
    2df4:	10800003 	ldbu	r2,0(r2)
    2df8:	10803fcc 	andi	r2,r2,255
    2dfc:	1000071e 	bne	r2,zero,2e1c <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    2e00:	d0a80317 	ldw	r2,-24564(gp)
    2e04:	10800d83 	ldbu	r2,54(r2)
    2e08:	0084303a 	nor	r2,zero,r2
    2e0c:	1007883a 	mov	r3,r2
    2e10:	d0a80003 	ldbu	r2,-24576(gp)
    2e14:	1884703a 	and	r2,r3,r2
    2e18:	d0a80005 	stb	r2,-24576(gp)
    }
}
    2e1c:	0001883a 	nop
    2e20:	e037883a 	mov	sp,fp
    2e24:	df000017 	ldw	fp,0(sp)
    2e28:	dec00104 	addi	sp,sp,4
    2e2c:	f800283a 	ret

00002e30 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
    2e30:	defffb04 	addi	sp,sp,-20
    2e34:	df000415 	stw	fp,16(sp)
    2e38:	df000404 	addi	fp,sp,16
    2e3c:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    2e40:	d0a80317 	ldw	r2,-24564(gp)
    2e44:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
    2e48:	d0a80317 	ldw	r2,-24564(gp)
    2e4c:	e0ffff17 	ldw	r3,-4(fp)
    2e50:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
    2e54:	e0bfff17 	ldw	r2,-4(fp)
    2e58:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
    2e5c:	e0bffc17 	ldw	r2,-16(fp)
    2e60:	10800017 	ldw	r2,0(r2)
    2e64:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    2e68:	00002006 	br	2eec <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
    2e6c:	d0a80317 	ldw	r2,-24564(gp)
    2e70:	10800d03 	ldbu	r2,52(r2)
    2e74:	10803fcc 	andi	r2,r2,255
    2e78:	d0e80317 	ldw	r3,-24564(gp)
    2e7c:	18c00d03 	ldbu	r3,52(r3)
    2e80:	18c03fcc 	andi	r3,r3,255
    2e84:	e13ffd17 	ldw	r4,-12(fp)
    2e88:	20c7883a 	add	r3,r4,r3
    2e8c:	18c002c4 	addi	r3,r3,11
    2e90:	19000003 	ldbu	r4,0(r3)
    2e94:	d0e80317 	ldw	r3,-24564(gp)
    2e98:	18c00d43 	ldbu	r3,53(r3)
    2e9c:	20c6b03a 	or	r3,r4,r3
    2ea0:	1809883a 	mov	r4,r3
    2ea4:	e0fffd17 	ldw	r3,-12(fp)
    2ea8:	1885883a 	add	r2,r3,r2
    2eac:	108002c4 	addi	r2,r2,11
    2eb0:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    2eb4:	e0bffd17 	ldw	r2,-12(fp)
    2eb8:	10c00283 	ldbu	r3,10(r2)
    2ebc:	d0a80317 	ldw	r2,-24564(gp)
    2ec0:	10800d83 	ldbu	r2,54(r2)
    2ec4:	1884b03a 	or	r2,r3,r2
    2ec8:	1007883a 	mov	r3,r2
    2ecc:	e0bffd17 	ldw	r2,-12(fp)
    2ed0:	10c00285 	stb	r3,10(r2)
        pevents++;
    2ed4:	e0bffc17 	ldw	r2,-16(fp)
    2ed8:	10800104 	addi	r2,r2,4
    2edc:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
    2ee0:	e0bffc17 	ldw	r2,-16(fp)
    2ee4:	10800017 	ldw	r2,0(r2)
    2ee8:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    2eec:	e0bffd17 	ldw	r2,-12(fp)
    2ef0:	103fde1e 	bne	r2,zero,2e6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002e6c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    2ef4:	d0a80317 	ldw	r2,-24564(gp)
    2ef8:	10800d03 	ldbu	r2,52(r2)
    2efc:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    2f00:	e0fffe03 	ldbu	r3,-8(fp)
    2f04:	e13ffe03 	ldbu	r4,-8(fp)
    2f08:	d0a80044 	addi	r2,gp,-24575
    2f0c:	2085883a 	add	r2,r4,r2
    2f10:	10800003 	ldbu	r2,0(r2)
    2f14:	1009883a 	mov	r4,r2
    2f18:	d0a80317 	ldw	r2,-24564(gp)
    2f1c:	10800d43 	ldbu	r2,53(r2)
    2f20:	0084303a 	nor	r2,zero,r2
    2f24:	2084703a 	and	r2,r4,r2
    2f28:	1009883a 	mov	r4,r2
    2f2c:	d0a80044 	addi	r2,gp,-24575
    2f30:	1885883a 	add	r2,r3,r2
    2f34:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    2f38:	e0fffe03 	ldbu	r3,-8(fp)
    2f3c:	d0a80044 	addi	r2,gp,-24575
    2f40:	1885883a 	add	r2,r3,r2
    2f44:	10800003 	ldbu	r2,0(r2)
    2f48:	10803fcc 	andi	r2,r2,255
    2f4c:	1000071e 	bne	r2,zero,2f6c <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    2f50:	d0a80317 	ldw	r2,-24564(gp)
    2f54:	10800d83 	ldbu	r2,54(r2)
    2f58:	0084303a 	nor	r2,zero,r2
    2f5c:	1007883a 	mov	r3,r2
    2f60:	d0a80003 	ldbu	r2,-24576(gp)
    2f64:	1884703a 	and	r2,r3,r2
    2f68:	d0a80005 	stb	r2,-24576(gp)
    }
}
    2f6c:	0001883a 	nop
    2f70:	e037883a 	mov	sp,fp
    2f74:	df000017 	ldw	fp,0(sp)
    2f78:	dec00104 	addi	sp,sp,4
    2f7c:	f800283a 	ret

00002f80 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
    2f80:	defffc04 	addi	sp,sp,-16
    2f84:	df000315 	stw	fp,12(sp)
    2f88:	df000304 	addi	fp,sp,12
    2f8c:	e13ffe15 	stw	r4,-8(fp)
    2f90:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
    2f94:	e0bffe17 	ldw	r2,-8(fp)
    2f98:	10800d03 	ldbu	r2,52(r2)
    2f9c:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
    2fa0:	e0bffd03 	ldbu	r2,-12(fp)
    2fa4:	e0fffd03 	ldbu	r3,-12(fp)
    2fa8:	e13fff17 	ldw	r4,-4(fp)
    2fac:	20c7883a 	add	r3,r4,r3
    2fb0:	18c002c4 	addi	r3,r3,11
    2fb4:	18c00003 	ldbu	r3,0(r3)
    2fb8:	1809883a 	mov	r4,r3
    2fbc:	e0fffe17 	ldw	r3,-8(fp)
    2fc0:	18c00d43 	ldbu	r3,53(r3)
    2fc4:	00c6303a 	nor	r3,zero,r3
    2fc8:	20c6703a 	and	r3,r4,r3
    2fcc:	1809883a 	mov	r4,r3
    2fd0:	e0ffff17 	ldw	r3,-4(fp)
    2fd4:	1885883a 	add	r2,r3,r2
    2fd8:	108002c4 	addi	r2,r2,11
    2fdc:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
    2fe0:	e0bffd03 	ldbu	r2,-12(fp)
    2fe4:	e0ffff17 	ldw	r3,-4(fp)
    2fe8:	1885883a 	add	r2,r3,r2
    2fec:	108002c4 	addi	r2,r2,11
    2ff0:	10800003 	ldbu	r2,0(r2)
    2ff4:	10803fcc 	andi	r2,r2,255
    2ff8:	10000a1e 	bne	r2,zero,3024 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
    2ffc:	e0bfff17 	ldw	r2,-4(fp)
    3000:	10800283 	ldbu	r2,10(r2)
    3004:	1007883a 	mov	r3,r2
    3008:	e0bffe17 	ldw	r2,-8(fp)
    300c:	10800d83 	ldbu	r2,54(r2)
    3010:	0084303a 	nor	r2,zero,r2
    3014:	1884703a 	and	r2,r3,r2
    3018:	1007883a 	mov	r3,r2
    301c:	e0bfff17 	ldw	r2,-4(fp)
    3020:	10c00285 	stb	r3,10(r2)
    }
}
    3024:	0001883a 	nop
    3028:	e037883a 	mov	sp,fp
    302c:	df000017 	ldw	fp,0(sp)
    3030:	dec00104 	addi	sp,sp,4
    3034:	f800283a 	ret

00003038 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
    3038:	defffa04 	addi	sp,sp,-24
    303c:	df000515 	stw	fp,20(sp)
    3040:	df000504 	addi	fp,sp,20
    3044:	e13ffe15 	stw	r4,-8(fp)
    3048:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
    304c:	e0bffe17 	ldw	r2,-8(fp)
    3050:	10800d03 	ldbu	r2,52(r2)
    3054:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
    3058:	e0bffe17 	ldw	r2,-8(fp)
    305c:	10800d83 	ldbu	r2,54(r2)
    3060:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
    3064:	e0bffe17 	ldw	r2,-8(fp)
    3068:	10800d43 	ldbu	r2,53(r2)
    306c:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
    3070:	e0bfff17 	ldw	r2,-4(fp)
    3074:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
    3078:	e0bffb17 	ldw	r2,-20(fp)
    307c:	10800017 	ldw	r2,0(r2)
    3080:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    3084:	00002506 	br	311c <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
    3088:	e0bffd03 	ldbu	r2,-12(fp)
    308c:	e0fffd03 	ldbu	r3,-12(fp)
    3090:	e13ffc17 	ldw	r4,-16(fp)
    3094:	20c7883a 	add	r3,r4,r3
    3098:	18c002c4 	addi	r3,r3,11
    309c:	18c00003 	ldbu	r3,0(r3)
    30a0:	1809883a 	mov	r4,r3
    30a4:	e0fffd83 	ldbu	r3,-10(fp)
    30a8:	00c6303a 	nor	r3,zero,r3
    30ac:	20c6703a 	and	r3,r4,r3
    30b0:	1809883a 	mov	r4,r3
    30b4:	e0fffc17 	ldw	r3,-16(fp)
    30b8:	1885883a 	add	r2,r3,r2
    30bc:	108002c4 	addi	r2,r2,11
    30c0:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
    30c4:	e0bffd03 	ldbu	r2,-12(fp)
    30c8:	e0fffc17 	ldw	r3,-16(fp)
    30cc:	1885883a 	add	r2,r3,r2
    30d0:	108002c4 	addi	r2,r2,11
    30d4:	10800003 	ldbu	r2,0(r2)
    30d8:	10803fcc 	andi	r2,r2,255
    30dc:	1000091e 	bne	r2,zero,3104 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
    30e0:	e0bffc17 	ldw	r2,-16(fp)
    30e4:	10800283 	ldbu	r2,10(r2)
    30e8:	1007883a 	mov	r3,r2
    30ec:	e0bffd43 	ldbu	r2,-11(fp)
    30f0:	0084303a 	nor	r2,zero,r2
    30f4:	1884703a 	and	r2,r3,r2
    30f8:	1007883a 	mov	r3,r2
    30fc:	e0bffc17 	ldw	r2,-16(fp)
    3100:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
    3104:	e0bffb17 	ldw	r2,-20(fp)
    3108:	10800104 	addi	r2,r2,4
    310c:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
    3110:	e0bffb17 	ldw	r2,-20(fp)
    3114:	10800017 	ldw	r2,0(r2)
    3118:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    311c:	e0bffc17 	ldw	r2,-16(fp)
    3120:	103fd91e 	bne	r2,zero,3088 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003088>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
    3124:	0001883a 	nop
    3128:	e037883a 	mov	sp,fp
    312c:	df000017 	ldw	fp,0(sp)
    3130:	dec00104 	addi	sp,sp,4
    3134:	f800283a 	ret

00003138 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
    3138:	defffc04 	addi	sp,sp,-16
    313c:	df000315 	stw	fp,12(sp)
    3140:	df000304 	addi	fp,sp,12
    3144:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    3148:	e0bfff17 	ldw	r2,-4(fp)
    314c:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
    3150:	e0bfff17 	ldw	r2,-4(fp)
    3154:	108002c4 	addi	r2,r2,11
    3158:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    315c:	e03ffe05 	stb	zero,-8(fp)
    3160:	00000706 	br	3180 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
    3164:	e0bffd17 	ldw	r2,-12(fp)
    3168:	10c00044 	addi	r3,r2,1
    316c:	e0fffd15 	stw	r3,-12(fp)
    3170:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    3174:	e0bffe03 	ldbu	r2,-8(fp)
    3178:	10800044 	addi	r2,r2,1
    317c:	e0bffe05 	stb	r2,-8(fp)
    3180:	e0bffe03 	ldbu	r2,-8(fp)
    3184:	108000f0 	cmpltui	r2,r2,3
    3188:	103ff61e 	bne	r2,zero,3164 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003164>
        *ptbl++ = 0;
    }
}
    318c:	0001883a 	nop
    3190:	e037883a 	mov	sp,fp
    3194:	df000017 	ldw	fp,0(sp)
    3198:	dec00104 	addi	sp,sp,4
    319c:	f800283a 	ret

000031a0 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
    31a0:	defffb04 	addi	sp,sp,-20
    31a4:	dfc00415 	stw	ra,16(sp)
    31a8:	df000315 	stw	fp,12(sp)
    31ac:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    31b0:	0142d004 	movi	r5,2880
    31b4:	01000074 	movhi	r4,1
    31b8:	211e7e04 	addi	r4,r4,31224
    31bc:	00035180 	call	3518 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
    31c0:	00800074 	movhi	r2,1
    31c4:	109e7e04 	addi	r2,r2,31224
    31c8:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
    31cc:	00800074 	movhi	r2,1
    31d0:	109e8a04 	addi	r2,r2,31272
    31d4:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    31d8:	e03ffd0d 	sth	zero,-12(fp)
    31dc:	00001306 	br	322c <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
    31e0:	e0bffe17 	ldw	r2,-8(fp)
    31e4:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
    31e8:	e0bffe17 	ldw	r2,-8(fp)
    31ec:	e0ffff17 	ldw	r3,-4(fp)
    31f0:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
    31f4:	e0bffe17 	ldw	r2,-8(fp)
    31f8:	00c00fc4 	movi	r3,63
    31fc:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
    3200:	e0bffe17 	ldw	r2,-8(fp)
    3204:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
    3208:	e0bffe17 	ldw	r2,-8(fp)
    320c:	10800c04 	addi	r2,r2,48
    3210:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
    3214:	e0bfff17 	ldw	r2,-4(fp)
    3218:	10800c04 	addi	r2,r2,48
    321c:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    3220:	e0bffd0b 	ldhu	r2,-12(fp)
    3224:	10800044 	addi	r2,r2,1
    3228:	e0bffd0d 	sth	r2,-12(fp)
    322c:	e0bffd0b 	ldhu	r2,-12(fp)
    3230:	10800ef0 	cmpltui	r2,r2,59
    3234:	103fea1e 	bne	r2,zero,31e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70031e0>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
    3238:	e0bffe17 	ldw	r2,-8(fp)
    323c:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
    3240:	e0bffe17 	ldw	r2,-8(fp)
    3244:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
    3248:	e0bffe17 	ldw	r2,-8(fp)
    324c:	00c00fc4 	movi	r3,63
    3250:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
    3254:	e0bffe17 	ldw	r2,-8(fp)
    3258:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
    325c:	00800074 	movhi	r2,1
    3260:	109e7e04 	addi	r2,r2,31224
    3264:	d0a80115 	stw	r2,-24572(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
    3268:	0001883a 	nop
    326c:	e037883a 	mov	sp,fp
    3270:	dfc00117 	ldw	ra,4(sp)
    3274:	df000017 	ldw	fp,0(sp)
    3278:	dec00204 	addi	sp,sp,8
    327c:	f800283a 	ret

00003280 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
    3280:	deffff04 	addi	sp,sp,-4
    3284:	df000015 	stw	fp,0(sp)
    3288:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
    328c:	d0280415 	stw	zero,-24560(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
    3290:	d0280205 	stb	zero,-24568(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
    3294:	d027f405 	stb	zero,-24624(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
    3298:	d027fc45 	stb	zero,-24591(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
    329c:	d027f445 	stb	zero,-24623(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
    32a0:	d027f915 	stw	zero,-24604(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
    32a4:	d027f515 	stw	zero,-24620(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
    32a8:	d0280715 	stw	zero,-24548(gp)
    OSIdleCtrMax  = 0L;
    32ac:	d027fa15 	stw	zero,-24600(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
    32b0:	d0280605 	stb	zero,-24552(gp)
#endif
}
    32b4:	0001883a 	nop
    32b8:	e037883a 	mov	sp,fp
    32bc:	df000017 	ldw	fp,0(sp)
    32c0:	dec00104 	addi	sp,sp,4
    32c4:	f800283a 	ret

000032c8 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
    32c8:	defffd04 	addi	sp,sp,-12
    32cc:	df000215 	stw	fp,8(sp)
    32d0:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    32d4:	d0280005 	stb	zero,-24576(gp)
    prdytbl       = &OSRdyTbl[0];
    32d8:	d0a80044 	addi	r2,gp,-24575
    32dc:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    32e0:	e03ffe05 	stb	zero,-8(fp)
    32e4:	00000706 	br	3304 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
    32e8:	e0bfff17 	ldw	r2,-4(fp)
    32ec:	10c00044 	addi	r3,r2,1
    32f0:	e0ffff15 	stw	r3,-4(fp)
    32f4:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    32f8:	e0bffe03 	ldbu	r2,-8(fp)
    32fc:	10800044 	addi	r2,r2,1
    3300:	e0bffe05 	stb	r2,-8(fp)
    3304:	e0bffe03 	ldbu	r2,-8(fp)
    3308:	108000f0 	cmpltui	r2,r2,3
    330c:	103ff61e 	bne	r2,zero,32e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70032e8>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
    3310:	d027f645 	stb	zero,-24615(gp)
    OSPrioHighRdy = 0;
    3314:	d027f605 	stb	zero,-24616(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
    3318:	d027fe15 	stw	zero,-24584(gp)
    OSTCBCur      = (OS_TCB *)0;
    331c:	d0280315 	stw	zero,-24564(gp)
}
    3320:	0001883a 	nop
    3324:	e037883a 	mov	sp,fp
    3328:	df000017 	ldw	fp,0(sp)
    332c:	dec00104 	addi	sp,sp,4
    3330:	f800283a 	ret

00003334 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
    3334:	defff804 	addi	sp,sp,-32
    3338:	dfc00715 	stw	ra,28(sp)
    333c:	df000615 	stw	fp,24(sp)
    3340:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
    3344:	008000c4 	movi	r2,3
    3348:	d8800415 	stw	r2,16(sp)
    334c:	d8000315 	stw	zero,12(sp)
    3350:	00808004 	movi	r2,512
    3354:	d8800215 	stw	r2,8(sp)
    3358:	00800074 	movhi	r2,1
    335c:	109c7e04 	addi	r2,r2,29176
    3360:	d8800115 	stw	r2,4(sp)
    3364:	00bfffd4 	movui	r2,65535
    3368:	d8800015 	stw	r2,0(sp)
    336c:	01c00504 	movi	r7,20
    3370:	01800074 	movhi	r6,1
    3374:	319e7d04 	addi	r6,r6,31220
    3378:	000b883a 	mov	r5,zero
    337c:	01000034 	movhi	r4,0
    3380:	210df804 	addi	r4,r4,14304
    3384:	0007eb00 	call	7eb0 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
    3388:	e1bfff04 	addi	r6,fp,-4
    338c:	01400074 	movhi	r5,1
    3390:	29760204 	addi	r5,r5,-10232
    3394:	01000504 	movi	r4,20
    3398:	00086c00 	call	86c0 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
    339c:	0001883a 	nop
    33a0:	e037883a 	mov	sp,fp
    33a4:	dfc00117 	ldw	ra,4(sp)
    33a8:	df000017 	ldw	fp,0(sp)
    33ac:	dec00204 	addi	sp,sp,8
    33b0:	f800283a 	ret

000033b4 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
    33b4:	defff804 	addi	sp,sp,-32
    33b8:	dfc00715 	stw	ra,28(sp)
    33bc:	df000615 	stw	fp,24(sp)
    33c0:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
    33c4:	008000c4 	movi	r2,3
    33c8:	d8800415 	stw	r2,16(sp)
    33cc:	d8000315 	stw	zero,12(sp)
    33d0:	00808004 	movi	r2,512
    33d4:	d8800215 	stw	r2,8(sp)
    33d8:	00800074 	movhi	r2,1
    33dc:	109a0604 	addi	r2,r2,26648
    33e0:	d8800115 	stw	r2,4(sp)
    33e4:	00bfff94 	movui	r2,65534
    33e8:	d8800015 	stw	r2,0(sp)
    33ec:	01c004c4 	movi	r7,19
    33f0:	01800074 	movhi	r6,1
    33f4:	319c0504 	addi	r6,r6,28692
    33f8:	000b883a 	mov	r5,zero
    33fc:	01000034 	movhi	r4,0
    3400:	210e0f04 	addi	r4,r4,14396
    3404:	0007eb00 	call	7eb0 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
    3408:	e1bfff04 	addi	r6,fp,-4
    340c:	01400074 	movhi	r5,1
    3410:	29760604 	addi	r5,r5,-10216
    3414:	010004c4 	movi	r4,19
    3418:	00086c00 	call	86c0 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
    341c:	0001883a 	nop
    3420:	e037883a 	mov	sp,fp
    3424:	dfc00117 	ldw	ra,4(sp)
    3428:	df000017 	ldw	fp,0(sp)
    342c:	dec00204 	addi	sp,sp,8
    3430:	f800283a 	ret

00003434 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
    3434:	defffb04 	addi	sp,sp,-20
    3438:	dfc00415 	stw	ra,16(sp)
    343c:	df000315 	stw	fp,12(sp)
    3440:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    3444:	01414404 	movi	r5,1296
    3448:	010000b4 	movhi	r4,2
    344c:	21214e04 	addi	r4,r4,-31432
    3450:	00035180 	call	3518 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    3454:	01401504 	movi	r5,84
    3458:	010000b4 	movhi	r4,2
    345c:	21229204 	addi	r4,r4,-30136
    3460:	00035180 	call	3518 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
    3464:	008000b4 	movhi	r2,2
    3468:	10a14e04 	addi	r2,r2,-31432
    346c:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
    3470:	008000b4 	movhi	r2,2
    3474:	10a16904 	addi	r2,r2,-31324
    3478:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    347c:	e03ffd05 	stb	zero,-12(fp)
    3480:	00001106 	br	34c8 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
    3484:	e0bffe17 	ldw	r2,-8(fp)
    3488:	e0ffff17 	ldw	r3,-4(fp)
    348c:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
    3490:	e0bffe17 	ldw	r2,-8(fp)
    3494:	00c00fc4 	movi	r3,63
    3498:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    349c:	e0bffe17 	ldw	r2,-8(fp)
    34a0:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
    34a4:	e0bffe17 	ldw	r2,-8(fp)
    34a8:	10801b04 	addi	r2,r2,108
    34ac:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
    34b0:	e0bfff17 	ldw	r2,-4(fp)
    34b4:	10801b04 	addi	r2,r2,108
    34b8:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    34bc:	e0bffd03 	ldbu	r2,-12(fp)
    34c0:	10800044 	addi	r2,r2,1
    34c4:	e0bffd05 	stb	r2,-12(fp)
    34c8:	e0bffd03 	ldbu	r2,-12(fp)
    34cc:	108002f0 	cmpltui	r2,r2,11
    34d0:	103fec1e 	bne	r2,zero,3484 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003484>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
    34d4:	e0bffe17 	ldw	r2,-8(fp)
    34d8:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
    34dc:	e0bffe17 	ldw	r2,-8(fp)
    34e0:	00c00fc4 	movi	r3,63
    34e4:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    34e8:	e0bffe17 	ldw	r2,-8(fp)
    34ec:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
    34f0:	d027f715 	stw	zero,-24612(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
    34f4:	008000b4 	movhi	r2,2
    34f8:	10a14e04 	addi	r2,r2,-31432
    34fc:	d0a7fb15 	stw	r2,-24596(gp)
}
    3500:	0001883a 	nop
    3504:	e037883a 	mov	sp,fp
    3508:	dfc00117 	ldw	ra,4(sp)
    350c:	df000017 	ldw	fp,0(sp)
    3510:	dec00204 	addi	sp,sp,8
    3514:	f800283a 	ret

00003518 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    3518:	defffd04 	addi	sp,sp,-12
    351c:	df000215 	stw	fp,8(sp)
    3520:	df000204 	addi	fp,sp,8
    3524:	e13ffe15 	stw	r4,-8(fp)
    3528:	2805883a 	mov	r2,r5
    352c:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
    3530:	00000706 	br	3550 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
    3534:	e0bffe17 	ldw	r2,-8(fp)
    3538:	10c00044 	addi	r3,r2,1
    353c:	e0fffe15 	stw	r3,-8(fp)
    3540:	10000005 	stb	zero,0(r2)
        size--;
    3544:	e0bfff0b 	ldhu	r2,-4(fp)
    3548:	10bfffc4 	addi	r2,r2,-1
    354c:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
    3550:	e0bfff0b 	ldhu	r2,-4(fp)
    3554:	103ff71e 	bne	r2,zero,3534 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003534>
        *pdest++ = (INT8U)0;
        size--;
    }
}
    3558:	0001883a 	nop
    355c:	e037883a 	mov	sp,fp
    3560:	df000017 	ldw	fp,0(sp)
    3564:	dec00104 	addi	sp,sp,4
    3568:	f800283a 	ret

0000356c <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    356c:	defffc04 	addi	sp,sp,-16
    3570:	df000315 	stw	fp,12(sp)
    3574:	df000304 	addi	fp,sp,12
    3578:	e13ffd15 	stw	r4,-12(fp)
    357c:	e17ffe15 	stw	r5,-8(fp)
    3580:	3005883a 	mov	r2,r6
    3584:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
    3588:	00000b06 	br	35b8 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
    358c:	e0bffd17 	ldw	r2,-12(fp)
    3590:	10c00044 	addi	r3,r2,1
    3594:	e0fffd15 	stw	r3,-12(fp)
    3598:	e0fffe17 	ldw	r3,-8(fp)
    359c:	19000044 	addi	r4,r3,1
    35a0:	e13ffe15 	stw	r4,-8(fp)
    35a4:	18c00003 	ldbu	r3,0(r3)
    35a8:	10c00005 	stb	r3,0(r2)
        size--;
    35ac:	e0bfff0b 	ldhu	r2,-4(fp)
    35b0:	10bfffc4 	addi	r2,r2,-1
    35b4:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
    35b8:	e0bfff0b 	ldhu	r2,-4(fp)
    35bc:	103ff31e 	bne	r2,zero,358c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700358c>
        *pdest++ = *psrc++;
        size--;
    }
}
    35c0:	0001883a 	nop
    35c4:	e037883a 	mov	sp,fp
    35c8:	df000017 	ldw	fp,0(sp)
    35cc:	dec00104 	addi	sp,sp,4
    35d0:	f800283a 	ret

000035d4 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
    35d4:	defffb04 	addi	sp,sp,-20
    35d8:	dfc00415 	stw	ra,16(sp)
    35dc:	df000315 	stw	fp,12(sp)
    35e0:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    35e4:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    35e8:	0005303a 	rdctl	r2,status
    35ec:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    35f0:	e0ffff17 	ldw	r3,-4(fp)
    35f4:	00bfff84 	movi	r2,-2
    35f8:	1884703a 	and	r2,r3,r2
    35fc:	1001703a 	wrctl	status,r2
  
  return context;
    3600:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
    3604:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
    3608:	d0a80203 	ldbu	r2,-24568(gp)
    360c:	10803fcc 	andi	r2,r2,255
    3610:	10001a1e 	bne	r2,zero,367c <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
    3614:	d0a7f403 	ldbu	r2,-24624(gp)
    3618:	10803fcc 	andi	r2,r2,255
    361c:	1000171e 	bne	r2,zero,367c <OS_Sched+0xa8>
            OS_SchedNew();
    3620:	00036a40 	call	36a4 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
    3624:	d0e7f603 	ldbu	r3,-24616(gp)
    3628:	d0a7f643 	ldbu	r2,-24615(gp)
    362c:	18c03fcc 	andi	r3,r3,255
    3630:	10803fcc 	andi	r2,r2,255
    3634:	18801126 	beq	r3,r2,367c <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
    3638:	d0a7f603 	ldbu	r2,-24616(gp)
    363c:	10c03fcc 	andi	r3,r2,255
    3640:	008000b4 	movhi	r2,2
    3644:	10a29204 	addi	r2,r2,-30136
    3648:	18c7883a 	add	r3,r3,r3
    364c:	18c7883a 	add	r3,r3,r3
    3650:	10c5883a 	add	r2,r2,r3
    3654:	10800017 	ldw	r2,0(r2)
    3658:	d0a7fe15 	stw	r2,-24584(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
    365c:	d0a7fe17 	ldw	r2,-24584(gp)
    3660:	10c00e17 	ldw	r3,56(r2)
    3664:	18c00044 	addi	r3,r3,1
    3668:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
    366c:	d0a7f917 	ldw	r2,-24604(gp)
    3670:	10800044 	addi	r2,r2,1
    3674:	d0a7f915 	stw	r2,-24604(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
    3678:	000c9f00 	call	c9f0 <OSCtxSw>
    367c:	e0bffd17 	ldw	r2,-12(fp)
    3680:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3684:	e0bffe17 	ldw	r2,-8(fp)
    3688:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
    368c:	0001883a 	nop
    3690:	e037883a 	mov	sp,fp
    3694:	dfc00117 	ldw	ra,4(sp)
    3698:	df000017 	ldw	fp,0(sp)
    369c:	dec00204 	addi	sp,sp,8
    36a0:	f800283a 	ret

000036a4 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
    36a4:	defffe04 	addi	sp,sp,-8
    36a8:	df000115 	stw	fp,4(sp)
    36ac:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
    36b0:	d0a80003 	ldbu	r2,-24576(gp)
    36b4:	10c03fcc 	andi	r3,r2,255
    36b8:	00800074 	movhi	r2,1
    36bc:	10b5c204 	addi	r2,r2,-10488
    36c0:	10c5883a 	add	r2,r2,r3
    36c4:	10800003 	ldbu	r2,0(r2)
    36c8:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
    36cc:	e0bfff03 	ldbu	r2,-4(fp)
    36d0:	100490fa 	slli	r2,r2,3
    36d4:	1009883a 	mov	r4,r2
    36d8:	e0ffff03 	ldbu	r3,-4(fp)
    36dc:	d0a80044 	addi	r2,gp,-24575
    36e0:	1885883a 	add	r2,r3,r2
    36e4:	10800003 	ldbu	r2,0(r2)
    36e8:	10c03fcc 	andi	r3,r2,255
    36ec:	00800074 	movhi	r2,1
    36f0:	10b5c204 	addi	r2,r2,-10488
    36f4:	10c5883a 	add	r2,r2,r3
    36f8:	10800003 	ldbu	r2,0(r2)
    36fc:	2085883a 	add	r2,r4,r2
    3700:	d0a7f605 	stb	r2,-24616(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
    3704:	0001883a 	nop
    3708:	e037883a 	mov	sp,fp
    370c:	df000017 	ldw	fp,0(sp)
    3710:	dec00104 	addi	sp,sp,4
    3714:	f800283a 	ret

00003718 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
    3718:	defffc04 	addi	sp,sp,-16
    371c:	df000315 	stw	fp,12(sp)
    3720:	df000304 	addi	fp,sp,12
    3724:	e13ffe15 	stw	r4,-8(fp)
    3728:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
    372c:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
    3730:	00000b06 	br	3760 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
    3734:	e0bffe17 	ldw	r2,-8(fp)
    3738:	10c00044 	addi	r3,r2,1
    373c:	e0fffe15 	stw	r3,-8(fp)
    3740:	e0ffff17 	ldw	r3,-4(fp)
    3744:	19000044 	addi	r4,r3,1
    3748:	e13fff15 	stw	r4,-4(fp)
    374c:	18c00003 	ldbu	r3,0(r3)
    3750:	10c00005 	stb	r3,0(r2)
        len++;
    3754:	e0bffd03 	ldbu	r2,-12(fp)
    3758:	10800044 	addi	r2,r2,1
    375c:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
    3760:	e0bfff17 	ldw	r2,-4(fp)
    3764:	10800003 	ldbu	r2,0(r2)
    3768:	10803fcc 	andi	r2,r2,255
    376c:	103ff11e 	bne	r2,zero,3734 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003734>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
    3770:	e0bffe17 	ldw	r2,-8(fp)
    3774:	10000005 	stb	zero,0(r2)
    return (len);
    3778:	e0bffd03 	ldbu	r2,-12(fp)
}
    377c:	e037883a 	mov	sp,fp
    3780:	df000017 	ldw	fp,0(sp)
    3784:	dec00104 	addi	sp,sp,4
    3788:	f800283a 	ret

0000378c <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
    378c:	defffd04 	addi	sp,sp,-12
    3790:	df000215 	stw	fp,8(sp)
    3794:	df000204 	addi	fp,sp,8
    3798:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
    379c:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
    37a0:	00000606 	br	37bc <OS_StrLen+0x30>
        psrc++;
    37a4:	e0bfff17 	ldw	r2,-4(fp)
    37a8:	10800044 	addi	r2,r2,1
    37ac:	e0bfff15 	stw	r2,-4(fp)
        len++;
    37b0:	e0bffe03 	ldbu	r2,-8(fp)
    37b4:	10800044 	addi	r2,r2,1
    37b8:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
    37bc:	e0bfff17 	ldw	r2,-4(fp)
    37c0:	10800003 	ldbu	r2,0(r2)
    37c4:	10803fcc 	andi	r2,r2,255
    37c8:	103ff61e 	bne	r2,zero,37a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70037a4>
        psrc++;
        len++;
    }
    return (len);
    37cc:	e0bffe03 	ldbu	r2,-8(fp)
}
    37d0:	e037883a 	mov	sp,fp
    37d4:	df000017 	ldw	fp,0(sp)
    37d8:	dec00104 	addi	sp,sp,4
    37dc:	f800283a 	ret

000037e0 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
    37e0:	defffa04 	addi	sp,sp,-24
    37e4:	dfc00515 	stw	ra,20(sp)
    37e8:	df000415 	stw	fp,16(sp)
    37ec:	df000404 	addi	fp,sp,16
    37f0:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    37f4:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    37f8:	0005303a 	rdctl	r2,status
    37fc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3800:	e0fffd17 	ldw	r3,-12(fp)
    3804:	00bfff84 	movi	r2,-2
    3808:	1884703a 	and	r2,r3,r2
    380c:	1001703a 	wrctl	status,r2
  
  return context;
    3810:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
    3814:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
    3818:	d0a7f517 	ldw	r2,-24620(gp)
    381c:	10800044 	addi	r2,r2,1
    3820:	d0a7f515 	stw	r2,-24620(gp)
    3824:	e0bffc17 	ldw	r2,-16(fp)
    3828:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    382c:	e0bffe17 	ldw	r2,-8(fp)
    3830:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
    3834:	000cd040 	call	cd04 <OSTaskIdleHook>
    }
    3838:	003fef06 	br	37f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70037f8>

0000383c <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
    383c:	defff804 	addi	sp,sp,-32
    3840:	dfc00715 	stw	ra,28(sp)
    3844:	df000615 	stw	fp,24(sp)
    3848:	dc400515 	stw	r17,20(sp)
    384c:	dc000415 	stw	r16,16(sp)
    3850:	df000604 	addi	fp,sp,24
    3854:	e13ffd15 	stw	r4,-12(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    3858:	e03ffa15 	stw	zero,-24(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
    385c:	00000206 	br	3868 <OS_TaskStat+0x2c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    3860:	01000044 	movi	r4,1
    3864:	0008f800 	call	8f80 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
    3868:	d0a80603 	ldbu	r2,-24552(gp)
    386c:	10803fcc 	andi	r2,r2,255
    3870:	103ffb26 	beq	r2,zero,3860 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003860>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
    3874:	d0e7fa17 	ldw	r3,-24600(gp)
    3878:	00947b34 	movhi	r2,20972
    387c:	10a147c4 	addi	r2,r2,-31457
    3880:	1888383a 	mulxuu	r4,r3,r2
    3884:	1885383a 	mul	r2,r3,r2
    3888:	1021883a 	mov	r16,r2
    388c:	2023883a 	mov	r17,r4
    3890:	8804d17a 	srli	r2,r17,5
    3894:	d0a7fa15 	stw	r2,-24600(gp)
    if (OSIdleCtrMax == 0L) {
    3898:	d0a7fa17 	ldw	r2,-24600(gp)
    389c:	1000031e 	bne	r2,zero,38ac <OS_TaskStat+0x70>
        OSCPUUsage = 0;
    38a0:	d027fc05 	stb	zero,-24592(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
    38a4:	01003fc4 	movi	r4,255
    38a8:	0008c080 	call	8c08 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    38ac:	0005303a 	rdctl	r2,status
    38b0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    38b4:	e0fffb17 	ldw	r3,-20(fp)
    38b8:	00bfff84 	movi	r2,-2
    38bc:	1884703a 	and	r2,r3,r2
    38c0:	1001703a 	wrctl	status,r2
  
  return context;
    38c4:	e0bffb17 	ldw	r2,-20(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
    38c8:	e0bffa15 	stw	r2,-24(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
    38cc:	d0a7f517 	ldw	r2,-24620(gp)
    38d0:	d0a80715 	stw	r2,-24548(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
    38d4:	d027f515 	stw	zero,-24620(gp)
    38d8:	e0bffa17 	ldw	r2,-24(fp)
    38dc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    38e0:	e0bffc17 	ldw	r2,-16(fp)
    38e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
    38e8:	d0e80717 	ldw	r3,-24548(gp)
    38ec:	d0a7fa17 	ldw	r2,-24600(gp)
    38f0:	1885203a 	divu	r2,r3,r2
    38f4:	1007883a 	mov	r3,r2
    38f8:	00801904 	movi	r2,100
    38fc:	10c5c83a 	sub	r2,r2,r3
    3900:	d0a7fc05 	stb	r2,-24592(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
    3904:	000cc840 	call	cc84 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
    3908:	00039180 	call	3918 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
    390c:	0009883a 	mov	r4,zero
    3910:	0008f800 	call	8f80 <OSTimeDly>
    }
    3914:	003fe506 	br	38ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70038ac>

00003918 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
    3918:	defffa04 	addi	sp,sp,-24
    391c:	dfc00515 	stw	ra,20(sp)
    3920:	df000415 	stw	fp,16(sp)
    3924:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
    3928:	e03ffc05 	stb	zero,-16(fp)
    392c:	00002406 	br	39c0 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
    3930:	e0bffc03 	ldbu	r2,-16(fp)
    3934:	e0fffe04 	addi	r3,fp,-8
    3938:	180b883a 	mov	r5,r3
    393c:	1009883a 	mov	r4,r2
    3940:	0008a480 	call	8a48 <OSTaskStkChk>
    3944:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
    3948:	e0bffc43 	ldbu	r2,-15(fp)
    394c:	1000191e 	bne	r2,zero,39b4 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
    3950:	e0fffc03 	ldbu	r3,-16(fp)
    3954:	008000b4 	movhi	r2,2
    3958:	10a29204 	addi	r2,r2,-30136
    395c:	18c7883a 	add	r3,r3,r3
    3960:	18c7883a 	add	r3,r3,r3
    3964:	10c5883a 	add	r2,r2,r3
    3968:	10800017 	ldw	r2,0(r2)
    396c:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
    3970:	e0bffd17 	ldw	r2,-12(fp)
    3974:	10000f26 	beq	r2,zero,39b4 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
    3978:	e0bffd17 	ldw	r2,-12(fp)
    397c:	10800060 	cmpeqi	r2,r2,1
    3980:	10000c1e 	bne	r2,zero,39b4 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
    3984:	e0bffd17 	ldw	r2,-12(fp)
    3988:	10c00217 	ldw	r3,8(r2)
    398c:	e0bffd17 	ldw	r2,-12(fp)
    3990:	10800317 	ldw	r2,12(r2)
    3994:	1085883a 	add	r2,r2,r2
    3998:	1085883a 	add	r2,r2,r2
    399c:	1887883a 	add	r3,r3,r2
    39a0:	e0bffd17 	ldw	r2,-12(fp)
    39a4:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
    39a8:	e0ffff17 	ldw	r3,-4(fp)
    39ac:	e0bffd17 	ldw	r2,-12(fp)
    39b0:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
    39b4:	e0bffc03 	ldbu	r2,-16(fp)
    39b8:	10800044 	addi	r2,r2,1
    39bc:	e0bffc05 	stb	r2,-16(fp)
    39c0:	e0bffc03 	ldbu	r2,-16(fp)
    39c4:	10800570 	cmpltui	r2,r2,21
    39c8:	103fd91e 	bne	r2,zero,3930 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003930>
#endif
                }
            }
        }
    }
}
    39cc:	0001883a 	nop
    39d0:	e037883a 	mov	sp,fp
    39d4:	dfc00117 	ldw	ra,4(sp)
    39d8:	df000017 	ldw	fp,0(sp)
    39dc:	dec00204 	addi	sp,sp,8
    39e0:	f800283a 	ret

000039e4 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
    39e4:	defff204 	addi	sp,sp,-56
    39e8:	dfc00d15 	stw	ra,52(sp)
    39ec:	df000c15 	stw	fp,48(sp)
    39f0:	df000c04 	addi	fp,sp,48
    39f4:	e17ffc15 	stw	r5,-16(fp)
    39f8:	e1bffd15 	stw	r6,-12(fp)
    39fc:	3807883a 	mov	r3,r7
    3a00:	e0800417 	ldw	r2,16(fp)
    3a04:	e13ffb05 	stb	r4,-20(fp)
    3a08:	e0fffe0d 	sth	r3,-8(fp)
    3a0c:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    3a10:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3a14:	0005303a 	rdctl	r2,status
    3a18:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3a1c:	e0fffa17 	ldw	r3,-24(fp)
    3a20:	00bfff84 	movi	r2,-2
    3a24:	1884703a 	and	r2,r3,r2
    3a28:	1001703a 	wrctl	status,r2
  
  return context;
    3a2c:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
    3a30:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
    3a34:	d0a7fb17 	ldw	r2,-24596(gp)
    3a38:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
    3a3c:	e0bff617 	ldw	r2,-40(fp)
    3a40:	10009326 	beq	r2,zero,3c90 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
    3a44:	e0bff617 	ldw	r2,-40(fp)
    3a48:	10800517 	ldw	r2,20(r2)
    3a4c:	d0a7fb15 	stw	r2,-24596(gp)
    3a50:	e0bff417 	ldw	r2,-48(fp)
    3a54:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3a58:	e0bff817 	ldw	r2,-32(fp)
    3a5c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
    3a60:	e0bff617 	ldw	r2,-40(fp)
    3a64:	e0fffc17 	ldw	r3,-16(fp)
    3a68:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
    3a6c:	e0bff617 	ldw	r2,-40(fp)
    3a70:	e0fffb03 	ldbu	r3,-20(fp)
    3a74:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
    3a78:	e0bff617 	ldw	r2,-40(fp)
    3a7c:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
    3a80:	e0bff617 	ldw	r2,-40(fp)
    3a84:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
    3a88:	e0bff617 	ldw	r2,-40(fp)
    3a8c:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
    3a90:	e0bff617 	ldw	r2,-40(fp)
    3a94:	e0c00317 	ldw	r3,12(fp)
    3a98:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
    3a9c:	e0bff617 	ldw	r2,-40(fp)
    3aa0:	e0c00217 	ldw	r3,8(fp)
    3aa4:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
    3aa8:	e0bff617 	ldw	r2,-40(fp)
    3aac:	e0fffd17 	ldw	r3,-12(fp)
    3ab0:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
    3ab4:	e0bff617 	ldw	r2,-40(fp)
    3ab8:	e0ffff0b 	ldhu	r3,-4(fp)
    3abc:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
    3ac0:	e0bff617 	ldw	r2,-40(fp)
    3ac4:	e0fffe0b 	ldhu	r3,-8(fp)
    3ac8:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
    3acc:	e0bff617 	ldw	r2,-40(fp)
    3ad0:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
    3ad4:	e0bffb03 	ldbu	r2,-20(fp)
    3ad8:	1004d0fa 	srli	r2,r2,3
    3adc:	1007883a 	mov	r3,r2
    3ae0:	e0bff617 	ldw	r2,-40(fp)
    3ae4:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
    3ae8:	e0bffb03 	ldbu	r2,-20(fp)
    3aec:	108001cc 	andi	r2,r2,7
    3af0:	1007883a 	mov	r3,r2
    3af4:	e0bff617 	ldw	r2,-40(fp)
    3af8:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
    3afc:	e0bff617 	ldw	r2,-40(fp)
    3b00:	10800d03 	ldbu	r2,52(r2)
    3b04:	10803fcc 	andi	r2,r2,255
    3b08:	00c00044 	movi	r3,1
    3b0c:	1884983a 	sll	r2,r3,r2
    3b10:	1007883a 	mov	r3,r2
    3b14:	e0bff617 	ldw	r2,-40(fp)
    3b18:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
    3b1c:	e0bff617 	ldw	r2,-40(fp)
    3b20:	10800cc3 	ldbu	r2,51(r2)
    3b24:	10803fcc 	andi	r2,r2,255
    3b28:	00c00044 	movi	r3,1
    3b2c:	1884983a 	sll	r2,r3,r2
    3b30:	1007883a 	mov	r3,r2
    3b34:	e0bff617 	ldw	r2,-40(fp)
    3b38:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
    3b3c:	e0bff617 	ldw	r2,-40(fp)
    3b40:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
    3b44:	e0bff617 	ldw	r2,-40(fp)
    3b48:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
    3b4c:	e0bff617 	ldw	r2,-40(fp)
    3b50:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
    3b54:	e0bff617 	ldw	r2,-40(fp)
    3b58:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
    3b5c:	e0bff617 	ldw	r2,-40(fp)
    3b60:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
    3b64:	e0bff617 	ldw	r2,-40(fp)
    3b68:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
    3b6c:	e0bff617 	ldw	r2,-40(fp)
    3b70:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
    3b74:	e0bff617 	ldw	r2,-40(fp)
    3b78:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
    3b7c:	e0bff617 	ldw	r2,-40(fp)
    3b80:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
    3b84:	e0bff617 	ldw	r2,-40(fp)
    3b88:	00c00fc4 	movi	r3,63
    3b8c:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
    3b90:	e0bff617 	ldw	r2,-40(fp)
    3b94:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
    3b98:	e13ff617 	ldw	r4,-40(fp)
    3b9c:	000cd240 	call	cd24 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
    3ba0:	e13ff617 	ldw	r4,-40(fp)
    3ba4:	000cc1c0 	call	cc1c <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3ba8:	0005303a 	rdctl	r2,status
    3bac:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3bb0:	e0fff517 	ldw	r3,-44(fp)
    3bb4:	00bfff84 	movi	r2,-2
    3bb8:	1884703a 	and	r2,r3,r2
    3bbc:	1001703a 	wrctl	status,r2
  
  return context;
    3bc0:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
    3bc4:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
    3bc8:	e0fffb03 	ldbu	r3,-20(fp)
    3bcc:	008000b4 	movhi	r2,2
    3bd0:	10a29204 	addi	r2,r2,-30136
    3bd4:	18c7883a 	add	r3,r3,r3
    3bd8:	18c7883a 	add	r3,r3,r3
    3bdc:	10c5883a 	add	r2,r2,r3
    3be0:	e0fff617 	ldw	r3,-40(fp)
    3be4:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
    3be8:	d0e7f717 	ldw	r3,-24612(gp)
    3bec:	e0bff617 	ldw	r2,-40(fp)
    3bf0:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
    3bf4:	e0bff617 	ldw	r2,-40(fp)
    3bf8:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
    3bfc:	d0a7f717 	ldw	r2,-24612(gp)
    3c00:	10000326 	beq	r2,zero,3c10 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
    3c04:	d0a7f717 	ldw	r2,-24612(gp)
    3c08:	e0fff617 	ldw	r3,-40(fp)
    3c0c:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
    3c10:	e0bff617 	ldw	r2,-40(fp)
    3c14:	d0a7f715 	stw	r2,-24612(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
    3c18:	e0bff617 	ldw	r2,-40(fp)
    3c1c:	10c00d83 	ldbu	r3,54(r2)
    3c20:	d0a80003 	ldbu	r2,-24576(gp)
    3c24:	1884b03a 	or	r2,r3,r2
    3c28:	d0a80005 	stb	r2,-24576(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    3c2c:	e0bff617 	ldw	r2,-40(fp)
    3c30:	10800d03 	ldbu	r2,52(r2)
    3c34:	10c03fcc 	andi	r3,r2,255
    3c38:	e0bff617 	ldw	r2,-40(fp)
    3c3c:	10800d03 	ldbu	r2,52(r2)
    3c40:	11003fcc 	andi	r4,r2,255
    3c44:	d0a80044 	addi	r2,gp,-24575
    3c48:	2085883a 	add	r2,r4,r2
    3c4c:	11000003 	ldbu	r4,0(r2)
    3c50:	e0bff617 	ldw	r2,-40(fp)
    3c54:	10800d43 	ldbu	r2,53(r2)
    3c58:	2084b03a 	or	r2,r4,r2
    3c5c:	1009883a 	mov	r4,r2
    3c60:	d0a80044 	addi	r2,gp,-24575
    3c64:	1885883a 	add	r2,r3,r2
    3c68:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
    3c6c:	d0a7fc43 	ldbu	r2,-24591(gp)
    3c70:	10800044 	addi	r2,r2,1
    3c74:	d0a7fc45 	stb	r2,-24591(gp)
    3c78:	e0bff417 	ldw	r2,-48(fp)
    3c7c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3c80:	e0bff717 	ldw	r2,-36(fp)
    3c84:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
    3c88:	0005883a 	mov	r2,zero
    3c8c:	00000506 	br	3ca4 <OS_TCBInit+0x2c0>
    3c90:	e0bff417 	ldw	r2,-48(fp)
    3c94:	e0bff915 	stw	r2,-28(fp)
    3c98:	e0bff917 	ldw	r2,-28(fp)
    3c9c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
    3ca0:	00801084 	movi	r2,66
}
    3ca4:	e037883a 	mov	sp,fp
    3ca8:	dfc00117 	ldw	ra,4(sp)
    3cac:	df000017 	ldw	fp,0(sp)
    3cb0:	dec00204 	addi	sp,sp,8
    3cb4:	f800283a 	ret

00003cb8 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
    3cb8:	defffe04 	addi	sp,sp,-8
    3cbc:	df000115 	stw	fp,4(sp)
    3cc0:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
    3cc4:	d0a00704 	addi	r2,gp,-32740
    3cc8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
    3ccc:	d0a00804 	addi	r2,gp,-32736
    3cd0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
    3cd4:	d0a00984 	addi	r2,gp,-32730
    3cd8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
    3cdc:	d0a00a04 	addi	r2,gp,-32728
    3ce0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
    3ce4:	d0a00904 	addi	r2,gp,-32732
    3ce8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
    3cec:	d0a00a84 	addi	r2,gp,-32726
    3cf0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
    3cf4:	d0a00b04 	addi	r2,gp,-32724
    3cf8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
    3cfc:	d0a00b84 	addi	r2,gp,-32722
    3d00:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
    3d04:	d0a00c04 	addi	r2,gp,-32720
    3d08:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
    3d0c:	d0a00c84 	addi	r2,gp,-32718
    3d10:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
    3d14:	d0a00d04 	addi	r2,gp,-32716
    3d18:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
    3d1c:	d0a00d84 	addi	r2,gp,-32714
    3d20:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
    3d24:	d0a00e04 	addi	r2,gp,-32712
    3d28:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
    3d2c:	d0a00e84 	addi	r2,gp,-32710
    3d30:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
    3d34:	d0a00f04 	addi	r2,gp,-32708
    3d38:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
    3d3c:	d0a00f84 	addi	r2,gp,-32706
    3d40:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
    3d44:	d0a01004 	addi	r2,gp,-32704
    3d48:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
    3d4c:	d0a01084 	addi	r2,gp,-32702
    3d50:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
    3d54:	d0a01104 	addi	r2,gp,-32700
    3d58:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
    3d5c:	d0a01184 	addi	r2,gp,-32698
    3d60:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
    3d64:	d0a01204 	addi	r2,gp,-32696
    3d68:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
    3d6c:	d0a01284 	addi	r2,gp,-32694
    3d70:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
    3d74:	d0a01304 	addi	r2,gp,-32692
    3d78:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
    3d7c:	d0a01384 	addi	r2,gp,-32690
    3d80:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
    3d84:	d0a01404 	addi	r2,gp,-32688
    3d88:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
    3d8c:	d0a01484 	addi	r2,gp,-32686
    3d90:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
    3d94:	d0a01504 	addi	r2,gp,-32684
    3d98:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
    3d9c:	d0a01584 	addi	r2,gp,-32682
    3da0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
    3da4:	d0a01604 	addi	r2,gp,-32680
    3da8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
    3dac:	d0a01684 	addi	r2,gp,-32678
    3db0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
    3db4:	d0a01704 	addi	r2,gp,-32676
    3db8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
    3dbc:	d0a01784 	addi	r2,gp,-32674
    3dc0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
    3dc4:	d0a01804 	addi	r2,gp,-32672
    3dc8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
    3dcc:	d0a01884 	addi	r2,gp,-32670
    3dd0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
    3dd4:	d0a01904 	addi	r2,gp,-32668
    3dd8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
    3ddc:	d0a01984 	addi	r2,gp,-32666
    3de0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
    3de4:	d0a01a04 	addi	r2,gp,-32664
    3de8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
    3dec:	d0a01a84 	addi	r2,gp,-32662
    3df0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
    3df4:	d0a01b04 	addi	r2,gp,-32660
    3df8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
    3dfc:	d0a01b84 	addi	r2,gp,-32658
    3e00:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
    3e04:	d0a01c04 	addi	r2,gp,-32656
    3e08:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
    3e0c:	d0a01c84 	addi	r2,gp,-32654
    3e10:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
    3e14:	d0a01d04 	addi	r2,gp,-32652
    3e18:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
    3e1c:	d0a01d84 	addi	r2,gp,-32650
    3e20:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
    3e24:	d0a01e04 	addi	r2,gp,-32648
    3e28:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
    3e2c:	d0a02304 	addi	r2,gp,-32628
    3e30:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
    3e34:	0001883a 	nop
    3e38:	e037883a 	mov	sp,fp
    3e3c:	df000017 	ldw	fp,0(sp)
    3e40:	dec00104 	addi	sp,sp,4
    3e44:	f800283a 	ret

00003e48 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
    3e48:	defff204 	addi	sp,sp,-56
    3e4c:	df000d15 	stw	fp,52(sp)
    3e50:	df000d04 	addi	fp,sp,52
    3e54:	e13ffc15 	stw	r4,-16(fp)
    3e58:	2807883a 	mov	r3,r5
    3e5c:	3005883a 	mov	r2,r6
    3e60:	e1ffff15 	stw	r7,-4(fp)
    3e64:	e0fffd0d 	sth	r3,-12(fp)
    3e68:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    3e6c:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    3e70:	e0bfff17 	ldw	r2,-4(fp)
    3e74:	1000021e 	bne	r2,zero,3e80 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
    3e78:	0005883a 	mov	r2,zero
    3e7c:	0000b006 	br	4140 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    3e80:	e0bffc17 	ldw	r2,-16(fp)
    3e84:	1000051e 	bne	r2,zero,3e9c <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    3e88:	e0bfff17 	ldw	r2,-4(fp)
    3e8c:	00c01b84 	movi	r3,110
    3e90:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    3e94:	0005883a 	mov	r2,zero
    3e98:	0000a906 	br	4140 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
    3e9c:	e0bffc17 	ldw	r2,-16(fp)
    3ea0:	10800003 	ldbu	r2,0(r2)
    3ea4:	10803fcc 	andi	r2,r2,255
    3ea8:	10800160 	cmpeqi	r2,r2,5
    3eac:	1000051e 	bne	r2,zero,3ec4 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
    3eb0:	e0bfff17 	ldw	r2,-4(fp)
    3eb4:	00c00044 	movi	r3,1
    3eb8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    3ebc:	0005883a 	mov	r2,zero
    3ec0:	00009f06 	br	4140 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
    3ec4:	e0fffe03 	ldbu	r3,-8(fp)
    3ec8:	00bfe004 	movi	r2,-128
    3ecc:	1884703a 	and	r2,r3,r2
    3ed0:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
    3ed4:	e0bff503 	ldbu	r2,-44(fp)
    3ed8:	10000626 	beq	r2,zero,3ef4 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
    3edc:	e0bffe03 	ldbu	r2,-8(fp)
    3ee0:	10801fcc 	andi	r2,r2,127
    3ee4:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
    3ee8:	00800044 	movi	r2,1
    3eec:	e0bff385 	stb	r2,-50(fp)
    3ef0:	00000106 	br	3ef8 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
    3ef4:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
    3ef8:	e0bfff17 	ldw	r2,-4(fp)
    3efc:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3f00:	0005303a 	rdctl	r2,status
    3f04:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3f08:	e0fffb17 	ldw	r3,-20(fp)
    3f0c:	00bfff84 	movi	r2,-2
    3f10:	1884703a 	and	r2,r3,r2
    3f14:	1001703a 	wrctl	status,r2
  
  return context;
    3f18:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
    3f1c:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
    3f20:	e0bffe03 	ldbu	r2,-8(fp)
    3f24:	10c00060 	cmpeqi	r3,r2,1
    3f28:	18005f1e 	bne	r3,zero,40a8 <OSFlagAccept+0x260>
    3f2c:	10c00088 	cmpgei	r3,r2,2
    3f30:	1800021e 	bne	r3,zero,3f3c <OSFlagAccept+0xf4>
    3f34:	10003f26 	beq	r2,zero,4034 <OSFlagAccept+0x1ec>
    3f38:	00007706 	br	4118 <OSFlagAccept+0x2d0>
    3f3c:	10c000a0 	cmpeqi	r3,r2,2
    3f40:	1800031e 	bne	r3,zero,3f50 <OSFlagAccept+0x108>
    3f44:	108000e0 	cmpeqi	r2,r2,3
    3f48:	10001e1e 	bne	r2,zero,3fc4 <OSFlagAccept+0x17c>
    3f4c:	00007206 	br	4118 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
    3f50:	e0bffc17 	ldw	r2,-16(fp)
    3f54:	10c0020b 	ldhu	r3,8(r2)
    3f58:	e0bffd0b 	ldhu	r2,-12(fp)
    3f5c:	1884703a 	and	r2,r3,r2
    3f60:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    3f64:	e0fff30b 	ldhu	r3,-52(fp)
    3f68:	e0bffd0b 	ldhu	r2,-12(fp)
    3f6c:	18800d1e 	bne	r3,r2,3fa4 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    3f70:	e0bff383 	ldbu	r2,-50(fp)
    3f74:	10800058 	cmpnei	r2,r2,1
    3f78:	10000d1e 	bne	r2,zero,3fb0 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
    3f7c:	e0bffc17 	ldw	r2,-16(fp)
    3f80:	1080020b 	ldhu	r2,8(r2)
    3f84:	1007883a 	mov	r3,r2
    3f88:	e0bff30b 	ldhu	r2,-52(fp)
    3f8c:	0084303a 	nor	r2,zero,r2
    3f90:	1884703a 	and	r2,r3,r2
    3f94:	1007883a 	mov	r3,r2
    3f98:	e0bffc17 	ldw	r2,-16(fp)
    3f9c:	10c0020d 	sth	r3,8(r2)
    3fa0:	00000306 	br	3fb0 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    3fa4:	e0bfff17 	ldw	r2,-4(fp)
    3fa8:	00c01c04 	movi	r3,112
    3fac:	10c00005 	stb	r3,0(r2)
    3fb0:	e0bff417 	ldw	r2,-48(fp)
    3fb4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3fb8:	e0bff617 	ldw	r2,-40(fp)
    3fbc:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    3fc0:	00005e06 	br	413c <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
    3fc4:	e0bffc17 	ldw	r2,-16(fp)
    3fc8:	10c0020b 	ldhu	r3,8(r2)
    3fcc:	e0bffd0b 	ldhu	r2,-12(fp)
    3fd0:	1884703a 	and	r2,r3,r2
    3fd4:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
    3fd8:	e0bff30b 	ldhu	r2,-52(fp)
    3fdc:	10000d26 	beq	r2,zero,4014 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    3fe0:	e0bff383 	ldbu	r2,-50(fp)
    3fe4:	10800058 	cmpnei	r2,r2,1
    3fe8:	10000d1e 	bne	r2,zero,4020 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
    3fec:	e0bffc17 	ldw	r2,-16(fp)
    3ff0:	1080020b 	ldhu	r2,8(r2)
    3ff4:	1007883a 	mov	r3,r2
    3ff8:	e0bff30b 	ldhu	r2,-52(fp)
    3ffc:	0084303a 	nor	r2,zero,r2
    4000:	1884703a 	and	r2,r3,r2
    4004:	1007883a 	mov	r3,r2
    4008:	e0bffc17 	ldw	r2,-16(fp)
    400c:	10c0020d 	sth	r3,8(r2)
    4010:	00000306 	br	4020 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    4014:	e0bfff17 	ldw	r2,-4(fp)
    4018:	00c01c04 	movi	r3,112
    401c:	10c00005 	stb	r3,0(r2)
    4020:	e0bff417 	ldw	r2,-48(fp)
    4024:	e0bff715 	stw	r2,-36(fp)
    4028:	e0bff717 	ldw	r2,-36(fp)
    402c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    4030:	00004206 	br	413c <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
    4034:	e0bffc17 	ldw	r2,-16(fp)
    4038:	1080020b 	ldhu	r2,8(r2)
    403c:	0084303a 	nor	r2,zero,r2
    4040:	1007883a 	mov	r3,r2
    4044:	e0bffd0b 	ldhu	r2,-12(fp)
    4048:	1884703a 	and	r2,r3,r2
    404c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    4050:	e0fff30b 	ldhu	r3,-52(fp)
    4054:	e0bffd0b 	ldhu	r2,-12(fp)
    4058:	18800b1e 	bne	r3,r2,4088 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    405c:	e0bff383 	ldbu	r2,-50(fp)
    4060:	10800058 	cmpnei	r2,r2,1
    4064:	10000b1e 	bne	r2,zero,4094 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
    4068:	e0bffc17 	ldw	r2,-16(fp)
    406c:	10c0020b 	ldhu	r3,8(r2)
    4070:	e0bff30b 	ldhu	r2,-52(fp)
    4074:	1884b03a 	or	r2,r3,r2
    4078:	1007883a 	mov	r3,r2
    407c:	e0bffc17 	ldw	r2,-16(fp)
    4080:	10c0020d 	sth	r3,8(r2)
    4084:	00000306 	br	4094 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    4088:	e0bfff17 	ldw	r2,-4(fp)
    408c:	00c01c04 	movi	r3,112
    4090:	10c00005 	stb	r3,0(r2)
    4094:	e0bff417 	ldw	r2,-48(fp)
    4098:	e0bff815 	stw	r2,-32(fp)
    409c:	e0bff817 	ldw	r2,-32(fp)
    40a0:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    40a4:	00002506 	br	413c <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
    40a8:	e0bffc17 	ldw	r2,-16(fp)
    40ac:	1080020b 	ldhu	r2,8(r2)
    40b0:	0084303a 	nor	r2,zero,r2
    40b4:	1007883a 	mov	r3,r2
    40b8:	e0bffd0b 	ldhu	r2,-12(fp)
    40bc:	1884703a 	and	r2,r3,r2
    40c0:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
    40c4:	e0bff30b 	ldhu	r2,-52(fp)
    40c8:	10000b26 	beq	r2,zero,40f8 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    40cc:	e0bff383 	ldbu	r2,-50(fp)
    40d0:	10800058 	cmpnei	r2,r2,1
    40d4:	10000b1e 	bne	r2,zero,4104 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
    40d8:	e0bffc17 	ldw	r2,-16(fp)
    40dc:	10c0020b 	ldhu	r3,8(r2)
    40e0:	e0bff30b 	ldhu	r2,-52(fp)
    40e4:	1884b03a 	or	r2,r3,r2
    40e8:	1007883a 	mov	r3,r2
    40ec:	e0bffc17 	ldw	r2,-16(fp)
    40f0:	10c0020d 	sth	r3,8(r2)
    40f4:	00000306 	br	4104 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    40f8:	e0bfff17 	ldw	r2,-4(fp)
    40fc:	00c01c04 	movi	r3,112
    4100:	10c00005 	stb	r3,0(r2)
    4104:	e0bff417 	ldw	r2,-48(fp)
    4108:	e0bff915 	stw	r2,-28(fp)
    410c:	e0bff917 	ldw	r2,-28(fp)
    4110:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    4114:	00000906 	br	413c <OSFlagAccept+0x2f4>
    4118:	e0bff417 	ldw	r2,-48(fp)
    411c:	e0bffa15 	stw	r2,-24(fp)
    4120:	e0bffa17 	ldw	r2,-24(fp)
    4124:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
    4128:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
    412c:	e0bfff17 	ldw	r2,-4(fp)
    4130:	00c01bc4 	movi	r3,111
    4134:	10c00005 	stb	r3,0(r2)
             break;
    4138:	0001883a 	nop
    }
    return (flags_rdy);
    413c:	e0bff30b 	ldhu	r2,-52(fp)
}
    4140:	e037883a 	mov	sp,fp
    4144:	df000017 	ldw	fp,0(sp)
    4148:	dec00104 	addi	sp,sp,4
    414c:	f800283a 	ret

00004150 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
    4150:	defff804 	addi	sp,sp,-32
    4154:	df000715 	stw	fp,28(sp)
    4158:	df000704 	addi	fp,sp,28
    415c:	2005883a 	mov	r2,r4
    4160:	e17fff15 	stw	r5,-4(fp)
    4164:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
    4168:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
    416c:	e0bfff17 	ldw	r2,-4(fp)
    4170:	1000021e 	bne	r2,zero,417c <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
    4174:	0005883a 	mov	r2,zero
    4178:	00003306 	br	4248 <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
    417c:	d0a80203 	ldbu	r2,-24568(gp)
    4180:	10803fcc 	andi	r2,r2,255
    4184:	10000526 	beq	r2,zero,419c <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
    4188:	e0bfff17 	ldw	r2,-4(fp)
    418c:	00c00404 	movi	r3,16
    4190:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
    4194:	0005883a 	mov	r2,zero
    4198:	00002b06 	br	4248 <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    419c:	0005303a 	rdctl	r2,status
    41a0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    41a4:	e0fffd17 	ldw	r3,-12(fp)
    41a8:	00bfff84 	movi	r2,-2
    41ac:	1884703a 	and	r2,r3,r2
    41b0:	1001703a 	wrctl	status,r2
  
  return context;
    41b4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    41b8:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
    41bc:	d0a80517 	ldw	r2,-24556(gp)
    41c0:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
    41c4:	e0bffb17 	ldw	r2,-20(fp)
    41c8:	10001726 	beq	r2,zero,4228 <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
    41cc:	d0a80517 	ldw	r2,-24556(gp)
    41d0:	10800117 	ldw	r2,4(r2)
    41d4:	d0a80515 	stw	r2,-24556(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
    41d8:	e0bffb17 	ldw	r2,-20(fp)
    41dc:	00c00144 	movi	r3,5
    41e0:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
    41e4:	e0bffb17 	ldw	r2,-20(fp)
    41e8:	e0fffe0b 	ldhu	r3,-8(fp)
    41ec:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
    41f0:	e0bffb17 	ldw	r2,-20(fp)
    41f4:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
    41f8:	e0bffb17 	ldw	r2,-20(fp)
    41fc:	00c00fc4 	movi	r3,63
    4200:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    4204:	e0bffb17 	ldw	r2,-20(fp)
    4208:	100002c5 	stb	zero,11(r2)
    420c:	e0bff917 	ldw	r2,-28(fp)
    4210:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4214:	e0bffa17 	ldw	r2,-24(fp)
    4218:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
    421c:	e0bfff17 	ldw	r2,-4(fp)
    4220:	10000005 	stb	zero,0(r2)
    4224:	00000706 	br	4244 <OSFlagCreate+0xf4>
    4228:	e0bff917 	ldw	r2,-28(fp)
    422c:	e0bffc15 	stw	r2,-16(fp)
    4230:	e0bffc17 	ldw	r2,-16(fp)
    4234:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
    4238:	e0bfff17 	ldw	r2,-4(fp)
    423c:	00c01c84 	movi	r3,114
    4240:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
    4244:	e0bffb17 	ldw	r2,-20(fp)
}
    4248:	e037883a 	mov	sp,fp
    424c:	df000017 	ldw	fp,0(sp)
    4250:	dec00104 	addi	sp,sp,4
    4254:	f800283a 	ret

00004258 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
    4258:	defff204 	addi	sp,sp,-56
    425c:	dfc00d15 	stw	ra,52(sp)
    4260:	df000c15 	stw	fp,48(sp)
    4264:	df000c04 	addi	fp,sp,48
    4268:	e13ffd15 	stw	r4,-12(fp)
    426c:	2805883a 	mov	r2,r5
    4270:	e1bfff15 	stw	r6,-4(fp)
    4274:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    4278:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    427c:	e0bfff17 	ldw	r2,-4(fp)
    4280:	1000021e 	bne	r2,zero,428c <OSFlagDel+0x34>
        return (pgrp);
    4284:	e0bffd17 	ldw	r2,-12(fp)
    4288:	00008006 	br	448c <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    428c:	e0bffd17 	ldw	r2,-12(fp)
    4290:	1000051e 	bne	r2,zero,42a8 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    4294:	e0bfff17 	ldw	r2,-4(fp)
    4298:	00c01b84 	movi	r3,110
    429c:	10c00005 	stb	r3,0(r2)
        return (pgrp);
    42a0:	e0bffd17 	ldw	r2,-12(fp)
    42a4:	00007906 	br	448c <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    42a8:	d0a80203 	ldbu	r2,-24568(gp)
    42ac:	10803fcc 	andi	r2,r2,255
    42b0:	10000526 	beq	r2,zero,42c8 <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
    42b4:	e0bfff17 	ldw	r2,-4(fp)
    42b8:	00c003c4 	movi	r3,15
    42bc:	10c00005 	stb	r3,0(r2)
        return (pgrp);
    42c0:	e0bffd17 	ldw	r2,-12(fp)
    42c4:	00007106 	br	448c <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
    42c8:	e0bffd17 	ldw	r2,-12(fp)
    42cc:	10800003 	ldbu	r2,0(r2)
    42d0:	10803fcc 	andi	r2,r2,255
    42d4:	10800160 	cmpeqi	r2,r2,5
    42d8:	1000051e 	bne	r2,zero,42f0 <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
    42dc:	e0bfff17 	ldw	r2,-4(fp)
    42e0:	00c00044 	movi	r3,1
    42e4:	10c00005 	stb	r3,0(r2)
        return (pgrp);
    42e8:	e0bffd17 	ldw	r2,-12(fp)
    42ec:	00006706 	br	448c <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    42f0:	0005303a 	rdctl	r2,status
    42f4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    42f8:	e0fffc17 	ldw	r3,-16(fp)
    42fc:	00bfff84 	movi	r2,-2
    4300:	1884703a 	and	r2,r3,r2
    4304:	1001703a 	wrctl	status,r2
  
  return context;
    4308:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    430c:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
    4310:	e0bffd17 	ldw	r2,-12(fp)
    4314:	10800117 	ldw	r2,4(r2)
    4318:	10000326 	beq	r2,zero,4328 <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    431c:	00800044 	movi	r2,1
    4320:	e0bff405 	stb	r2,-48(fp)
    4324:	00000106 	br	432c <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    4328:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
    432c:	e0bffe03 	ldbu	r2,-8(fp)
    4330:	10000326 	beq	r2,zero,4340 <OSFlagDel+0xe8>
    4334:	10800060 	cmpeqi	r2,r2,1
    4338:	1000231e 	bne	r2,zero,43c8 <OSFlagDel+0x170>
    433c:	00004806 	br	4460 <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
    4340:	e0bff403 	ldbu	r2,-48(fp)
    4344:	1000161e 	bne	r2,zero,43a0 <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
    4348:	e0bffd17 	ldw	r2,-12(fp)
    434c:	00c00fc4 	movi	r3,63
    4350:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    4354:	e0bffd17 	ldw	r2,-12(fp)
    4358:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    435c:	e0bffd17 	ldw	r2,-12(fp)
    4360:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
    4364:	d0e80517 	ldw	r3,-24556(gp)
    4368:	e0bffd17 	ldw	r2,-12(fp)
    436c:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
    4370:	e0bffd17 	ldw	r2,-12(fp)
    4374:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
    4378:	e0bffd17 	ldw	r2,-12(fp)
    437c:	d0a80515 	stw	r2,-24556(gp)
    4380:	e0bff717 	ldw	r2,-36(fp)
    4384:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4388:	e0bff817 	ldw	r2,-32(fp)
    438c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
    4390:	e0bfff17 	ldw	r2,-4(fp)
    4394:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
    4398:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
    439c:	00003a06 	br	4488 <OSFlagDel+0x230>
    43a0:	e0bff717 	ldw	r2,-36(fp)
    43a4:	e0bff915 	stw	r2,-28(fp)
    43a8:	e0bff917 	ldw	r2,-28(fp)
    43ac:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
    43b0:	e0bfff17 	ldw	r2,-4(fp)
    43b4:	00c01244 	movi	r3,73
    43b8:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
    43bc:	e0bffd17 	ldw	r2,-12(fp)
    43c0:	e0bff615 	stw	r2,-40(fp)
             }
             break;
    43c4:	00003006 	br	4488 <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    43c8:	e0bffd17 	ldw	r2,-12(fp)
    43cc:	10800117 	ldw	r2,4(r2)
    43d0:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
    43d4:	00000606 	br	43f0 <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
    43d8:	000b883a 	mov	r5,zero
    43dc:	e13ff517 	ldw	r4,-44(fp)
    43e0:	00053c40 	call	53c4 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
    43e4:	e0bff517 	ldw	r2,-44(fp)
    43e8:	10800017 	ldw	r2,0(r2)
    43ec:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
    43f0:	e0bff517 	ldw	r2,-44(fp)
    43f4:	103ff81e 	bne	r2,zero,43d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70043d8>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
    43f8:	e0bffd17 	ldw	r2,-12(fp)
    43fc:	00c00fc4 	movi	r3,63
    4400:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    4404:	e0bffd17 	ldw	r2,-12(fp)
    4408:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    440c:	e0bffd17 	ldw	r2,-12(fp)
    4410:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
    4414:	d0e80517 	ldw	r3,-24556(gp)
    4418:	e0bffd17 	ldw	r2,-12(fp)
    441c:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
    4420:	e0bffd17 	ldw	r2,-12(fp)
    4424:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
    4428:	e0bffd17 	ldw	r2,-12(fp)
    442c:	d0a80515 	stw	r2,-24556(gp)
    4430:	e0bff717 	ldw	r2,-36(fp)
    4434:	e0bffa15 	stw	r2,-24(fp)
    4438:	e0bffa17 	ldw	r2,-24(fp)
    443c:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    4440:	e0bff403 	ldbu	r2,-48(fp)
    4444:	10800058 	cmpnei	r2,r2,1
    4448:	1000011e 	bne	r2,zero,4450 <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    444c:	00035d40 	call	35d4 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
    4450:	e0bfff17 	ldw	r2,-4(fp)
    4454:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
    4458:	e03ff615 	stw	zero,-40(fp)
             break;
    445c:	00000a06 	br	4488 <OSFlagDel+0x230>
    4460:	e0bff717 	ldw	r2,-36(fp)
    4464:	e0bffb15 	stw	r2,-20(fp)
    4468:	e0bffb17 	ldw	r2,-20(fp)
    446c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
    4470:	e0bfff17 	ldw	r2,-4(fp)
    4474:	00c001c4 	movi	r3,7
    4478:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
    447c:	e0bffd17 	ldw	r2,-12(fp)
    4480:	e0bff615 	stw	r2,-40(fp)
             break;
    4484:	0001883a 	nop
    }
    return (pgrp_return);
    4488:	e0bff617 	ldw	r2,-40(fp)
}
    448c:	e037883a 	mov	sp,fp
    4490:	dfc00117 	ldw	ra,4(sp)
    4494:	df000017 	ldw	fp,0(sp)
    4498:	dec00204 	addi	sp,sp,8
    449c:	f800283a 	ret

000044a0 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
    44a0:	defff604 	addi	sp,sp,-40
    44a4:	dfc00915 	stw	ra,36(sp)
    44a8:	df000815 	stw	fp,32(sp)
    44ac:	df000804 	addi	fp,sp,32
    44b0:	e13ffd15 	stw	r4,-12(fp)
    44b4:	e17ffe15 	stw	r5,-8(fp)
    44b8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    44bc:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    44c0:	e0bfff17 	ldw	r2,-4(fp)
    44c4:	1000021e 	bne	r2,zero,44d0 <OSFlagNameGet+0x30>
        return (0);
    44c8:	0005883a 	mov	r2,zero
    44cc:	00003906 	br	45b4 <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
    44d0:	e0bffd17 	ldw	r2,-12(fp)
    44d4:	1000051e 	bne	r2,zero,44ec <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    44d8:	e0bfff17 	ldw	r2,-4(fp)
    44dc:	00c01b84 	movi	r3,110
    44e0:	10c00005 	stb	r3,0(r2)
        return (0);
    44e4:	0005883a 	mov	r2,zero
    44e8:	00003206 	br	45b4 <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    44ec:	e0bffe17 	ldw	r2,-8(fp)
    44f0:	1000051e 	bne	r2,zero,4508 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    44f4:	e0bfff17 	ldw	r2,-4(fp)
    44f8:	00c00304 	movi	r3,12
    44fc:	10c00005 	stb	r3,0(r2)
        return (0);
    4500:	0005883a 	mov	r2,zero
    4504:	00002b06 	br	45b4 <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    4508:	d0a80203 	ldbu	r2,-24568(gp)
    450c:	10803fcc 	andi	r2,r2,255
    4510:	10000526 	beq	r2,zero,4528 <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
    4514:	e0bfff17 	ldw	r2,-4(fp)
    4518:	00c00444 	movi	r3,17
    451c:	10c00005 	stb	r3,0(r2)
        return (0);
    4520:	0005883a 	mov	r2,zero
    4524:	00002306 	br	45b4 <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4528:	0005303a 	rdctl	r2,status
    452c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4530:	e0fffc17 	ldw	r3,-16(fp)
    4534:	00bfff84 	movi	r2,-2
    4538:	1884703a 	and	r2,r3,r2
    453c:	1001703a 	wrctl	status,r2
  
  return context;
    4540:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    4544:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
    4548:	e0bffd17 	ldw	r2,-12(fp)
    454c:	10800003 	ldbu	r2,0(r2)
    4550:	10803fcc 	andi	r2,r2,255
    4554:	10800160 	cmpeqi	r2,r2,5
    4558:	1000091e 	bne	r2,zero,4580 <OSFlagNameGet+0xe0>
    455c:	e0bff817 	ldw	r2,-32(fp)
    4560:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4564:	e0bff917 	ldw	r2,-28(fp)
    4568:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
    456c:	e0bfff17 	ldw	r2,-4(fp)
    4570:	00c00044 	movi	r3,1
    4574:	10c00005 	stb	r3,0(r2)
        return (0);
    4578:	0005883a 	mov	r2,zero
    457c:	00000d06 	br	45b4 <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
    4580:	e0bffd17 	ldw	r2,-12(fp)
    4584:	10800284 	addi	r2,r2,10
    4588:	100b883a 	mov	r5,r2
    458c:	e13ffe17 	ldw	r4,-8(fp)
    4590:	00037180 	call	3718 <OS_StrCopy>
    4594:	e0bffb05 	stb	r2,-20(fp)
    4598:	e0bff817 	ldw	r2,-32(fp)
    459c:	e0bffa15 	stw	r2,-24(fp)
    45a0:	e0bffa17 	ldw	r2,-24(fp)
    45a4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    45a8:	e0bfff17 	ldw	r2,-4(fp)
    45ac:	10000005 	stb	zero,0(r2)
    return (len);
    45b0:	e0bffb03 	ldbu	r2,-20(fp)
}
    45b4:	e037883a 	mov	sp,fp
    45b8:	dfc00117 	ldw	ra,4(sp)
    45bc:	df000017 	ldw	fp,0(sp)
    45c0:	dec00204 	addi	sp,sp,8
    45c4:	f800283a 	ret

000045c8 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
    45c8:	defff504 	addi	sp,sp,-44
    45cc:	dfc00a15 	stw	ra,40(sp)
    45d0:	df000915 	stw	fp,36(sp)
    45d4:	df000904 	addi	fp,sp,36
    45d8:	e13ffd15 	stw	r4,-12(fp)
    45dc:	e17ffe15 	stw	r5,-8(fp)
    45e0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    45e4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    45e8:	e0bfff17 	ldw	r2,-4(fp)
    45ec:	10004326 	beq	r2,zero,46fc <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
    45f0:	e0bffd17 	ldw	r2,-12(fp)
    45f4:	1000041e 	bne	r2,zero,4608 <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    45f8:	e0bfff17 	ldw	r2,-4(fp)
    45fc:	00c01b84 	movi	r3,110
    4600:	10c00005 	stb	r3,0(r2)
        return;
    4604:	00003e06 	br	4700 <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    4608:	e0bffe17 	ldw	r2,-8(fp)
    460c:	1000041e 	bne	r2,zero,4620 <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
    4610:	e0bfff17 	ldw	r2,-4(fp)
    4614:	00c00304 	movi	r3,12
    4618:	10c00005 	stb	r3,0(r2)
        return;
    461c:	00003806 	br	4700 <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    4620:	d0a80203 	ldbu	r2,-24568(gp)
    4624:	10803fcc 	andi	r2,r2,255
    4628:	10000426 	beq	r2,zero,463c <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
    462c:	e0bfff17 	ldw	r2,-4(fp)
    4630:	00c00484 	movi	r3,18
    4634:	10c00005 	stb	r3,0(r2)
        return;
    4638:	00003106 	br	4700 <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    463c:	0005303a 	rdctl	r2,status
    4640:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4644:	e0fffc17 	ldw	r3,-16(fp)
    4648:	00bfff84 	movi	r2,-2
    464c:	1884703a 	and	r2,r3,r2
    4650:	1001703a 	wrctl	status,r2
  
  return context;
    4654:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    4658:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
    465c:	e0bffd17 	ldw	r2,-12(fp)
    4660:	10800003 	ldbu	r2,0(r2)
    4664:	10803fcc 	andi	r2,r2,255
    4668:	10800160 	cmpeqi	r2,r2,5
    466c:	1000081e 	bne	r2,zero,4690 <OSFlagNameSet+0xc8>
    4670:	e0bff717 	ldw	r2,-36(fp)
    4674:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4678:	e0bff817 	ldw	r2,-32(fp)
    467c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
    4680:	e0bfff17 	ldw	r2,-4(fp)
    4684:	00c00044 	movi	r3,1
    4688:	10c00005 	stb	r3,0(r2)
        return;
    468c:	00001c06 	br	4700 <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
    4690:	e13ffe17 	ldw	r4,-8(fp)
    4694:	000378c0 	call	378c <OS_StrLen>
    4698:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
    469c:	e0bffa03 	ldbu	r2,-24(fp)
    46a0:	10800830 	cmpltui	r2,r2,32
    46a4:	1000081e 	bne	r2,zero,46c8 <OSFlagNameSet+0x100>
    46a8:	e0bff717 	ldw	r2,-36(fp)
    46ac:	e0bff915 	stw	r2,-28(fp)
    46b0:	e0bff917 	ldw	r2,-28(fp)
    46b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
    46b8:	e0bfff17 	ldw	r2,-4(fp)
    46bc:	00c01cc4 	movi	r3,115
    46c0:	10c00005 	stb	r3,0(r2)
        return;
    46c4:	00000e06 	br	4700 <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    46c8:	e0bffd17 	ldw	r2,-12(fp)
    46cc:	10800284 	addi	r2,r2,10
    46d0:	e17ffe17 	ldw	r5,-8(fp)
    46d4:	1009883a 	mov	r4,r2
    46d8:	00037180 	call	3718 <OS_StrCopy>
    46dc:	e0bff717 	ldw	r2,-36(fp)
    46e0:	e0bffb15 	stw	r2,-20(fp)
    46e4:	e0bffb17 	ldw	r2,-20(fp)
    46e8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    46ec:	e0bfff17 	ldw	r2,-4(fp)
    46f0:	10000005 	stb	zero,0(r2)
    return;
    46f4:	0001883a 	nop
    46f8:	00000106 	br	4700 <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
    46fc:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
    4700:	e037883a 	mov	sp,fp
    4704:	dfc00117 	ldw	ra,4(sp)
    4708:	df000017 	ldw	fp,0(sp)
    470c:	dec00204 	addi	sp,sp,8
    4710:	f800283a 	ret

00004714 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
    4714:	deffe104 	addi	sp,sp,-124
    4718:	dfc01e15 	stw	ra,120(sp)
    471c:	df001d15 	stw	fp,116(sp)
    4720:	df001d04 	addi	fp,sp,116
    4724:	e13ffc15 	stw	r4,-16(fp)
    4728:	2809883a 	mov	r4,r5
    472c:	3007883a 	mov	r3,r6
    4730:	3805883a 	mov	r2,r7
    4734:	e13ffd0d 	sth	r4,-12(fp)
    4738:	e0fffe05 	stb	r3,-8(fp)
    473c:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    4740:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    4744:	e0800217 	ldw	r2,8(fp)
    4748:	1000021e 	bne	r2,zero,4754 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
    474c:	0005883a 	mov	r2,zero
    4750:	00015906 	br	4cb8 <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    4754:	e0bffc17 	ldw	r2,-16(fp)
    4758:	1000051e 	bne	r2,zero,4770 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    475c:	e0800217 	ldw	r2,8(fp)
    4760:	00c01b84 	movi	r3,110
    4764:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    4768:	0005883a 	mov	r2,zero
    476c:	00015206 	br	4cb8 <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    4770:	d0a80203 	ldbu	r2,-24568(gp)
    4774:	10803fcc 	andi	r2,r2,255
    4778:	10000526 	beq	r2,zero,4790 <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
    477c:	e0800217 	ldw	r2,8(fp)
    4780:	00c00084 	movi	r3,2
    4784:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    4788:	0005883a 	mov	r2,zero
    478c:	00014a06 	br	4cb8 <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
    4790:	d0a7f403 	ldbu	r2,-24624(gp)
    4794:	10803fcc 	andi	r2,r2,255
    4798:	10000526 	beq	r2,zero,47b0 <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
    479c:	e0800217 	ldw	r2,8(fp)
    47a0:	00c00344 	movi	r3,13
    47a4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    47a8:	0005883a 	mov	r2,zero
    47ac:	00014206 	br	4cb8 <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
    47b0:	e0bffc17 	ldw	r2,-16(fp)
    47b4:	10800003 	ldbu	r2,0(r2)
    47b8:	10803fcc 	andi	r2,r2,255
    47bc:	10800160 	cmpeqi	r2,r2,5
    47c0:	1000051e 	bne	r2,zero,47d8 <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
    47c4:	e0800217 	ldw	r2,8(fp)
    47c8:	00c00044 	movi	r3,1
    47cc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    47d0:	0005883a 	mov	r2,zero
    47d4:	00013806 	br	4cb8 <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
    47d8:	e0fffe03 	ldbu	r3,-8(fp)
    47dc:	00bfe004 	movi	r2,-128
    47e0:	1884703a 	and	r2,r3,r2
    47e4:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
    47e8:	e0bfe603 	ldbu	r2,-104(fp)
    47ec:	10000626 	beq	r2,zero,4808 <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
    47f0:	e0bffe03 	ldbu	r2,-8(fp)
    47f4:	10801fcc 	andi	r2,r2,127
    47f8:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
    47fc:	00800044 	movi	r2,1
    4800:	e0bfe405 	stb	r2,-112(fp)
    4804:	00000106 	br	480c <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
    4808:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    480c:	0005303a 	rdctl	r2,status
    4810:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4814:	e0fff617 	ldw	r3,-40(fp)
    4818:	00bfff84 	movi	r2,-2
    481c:	1884703a 	and	r2,r3,r2
    4820:	1001703a 	wrctl	status,r2
  
  return context;
    4824:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
    4828:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
    482c:	e0bffe03 	ldbu	r2,-8(fp)
    4830:	10c00060 	cmpeqi	r3,r2,1
    4834:	1800921e 	bne	r3,zero,4a80 <OSFlagPend+0x36c>
    4838:	10c00088 	cmpgei	r3,r2,2
    483c:	1800021e 	bne	r3,zero,4848 <OSFlagPend+0x134>
    4840:	10006126 	beq	r2,zero,49c8 <OSFlagPend+0x2b4>
    4844:	0000bb06 	br	4b34 <OSFlagPend+0x420>
    4848:	10c000a0 	cmpeqi	r3,r2,2
    484c:	1800031e 	bne	r3,zero,485c <OSFlagPend+0x148>
    4850:	108000e0 	cmpeqi	r2,r2,3
    4854:	10002f1e 	bne	r2,zero,4914 <OSFlagPend+0x200>
    4858:	0000b606 	br	4b34 <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
    485c:	e0bffc17 	ldw	r2,-16(fp)
    4860:	10c0020b 	ldhu	r3,8(r2)
    4864:	e0bffd0b 	ldhu	r2,-12(fp)
    4868:	1884703a 	and	r2,r3,r2
    486c:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    4870:	e0ffe80b 	ldhu	r3,-96(fp)
    4874:	e0bffd0b 	ldhu	r2,-12(fp)
    4878:	1880171e 	bne	r3,r2,48d8 <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    487c:	e0bfe403 	ldbu	r2,-112(fp)
    4880:	10800058 	cmpnei	r2,r2,1
    4884:	1000091e 	bne	r2,zero,48ac <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
    4888:	e0bffc17 	ldw	r2,-16(fp)
    488c:	1080020b 	ldhu	r2,8(r2)
    4890:	1007883a 	mov	r3,r2
    4894:	e0bfe80b 	ldhu	r2,-96(fp)
    4898:	0084303a 	nor	r2,zero,r2
    489c:	1884703a 	and	r2,r3,r2
    48a0:	1007883a 	mov	r3,r2
    48a4:	e0bffc17 	ldw	r2,-16(fp)
    48a8:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    48ac:	d0a80317 	ldw	r2,-24564(gp)
    48b0:	e0ffe80b 	ldhu	r3,-96(fp)
    48b4:	10c00b0d 	sth	r3,44(r2)
    48b8:	e0bfe517 	ldw	r2,-108(fp)
    48bc:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    48c0:	e0bfe717 	ldw	r2,-100(fp)
    48c4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    48c8:	e0800217 	ldw	r2,8(fp)
    48cc:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    48d0:	e0bfe80b 	ldhu	r2,-96(fp)
    48d4:	0000f806 	br	4cb8 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    48d8:	e13ffd0b 	ldhu	r4,-12(fp)
    48dc:	e17ffe03 	ldbu	r5,-8(fp)
    48e0:	e0bfff0b 	ldhu	r2,-4(fp)
    48e4:	e0fff704 	addi	r3,fp,-36
    48e8:	d8800015 	stw	r2,0(sp)
    48ec:	280f883a 	mov	r7,r5
    48f0:	200d883a 	mov	r6,r4
    48f4:	180b883a 	mov	r5,r3
    48f8:	e13ffc17 	ldw	r4,-16(fp)
    48fc:	00051840 	call	5184 <OS_FlagBlock>
    4900:	e0bfe517 	ldw	r2,-108(fp)
    4904:	e0bfe915 	stw	r2,-92(fp)
    4908:	e0bfe917 	ldw	r2,-92(fp)
    490c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    4910:	00009206 	br	4b5c <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
    4914:	e0bffc17 	ldw	r2,-16(fp)
    4918:	10c0020b 	ldhu	r3,8(r2)
    491c:	e0bffd0b 	ldhu	r2,-12(fp)
    4920:	1884703a 	and	r2,r3,r2
    4924:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
    4928:	e0bfe80b 	ldhu	r2,-96(fp)
    492c:	10001726 	beq	r2,zero,498c <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    4930:	e0bfe403 	ldbu	r2,-112(fp)
    4934:	10800058 	cmpnei	r2,r2,1
    4938:	1000091e 	bne	r2,zero,4960 <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
    493c:	e0bffc17 	ldw	r2,-16(fp)
    4940:	1080020b 	ldhu	r2,8(r2)
    4944:	1007883a 	mov	r3,r2
    4948:	e0bfe80b 	ldhu	r2,-96(fp)
    494c:	0084303a 	nor	r2,zero,r2
    4950:	1884703a 	and	r2,r3,r2
    4954:	1007883a 	mov	r3,r2
    4958:	e0bffc17 	ldw	r2,-16(fp)
    495c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    4960:	d0a80317 	ldw	r2,-24564(gp)
    4964:	e0ffe80b 	ldhu	r3,-96(fp)
    4968:	10c00b0d 	sth	r3,44(r2)
    496c:	e0bfe517 	ldw	r2,-108(fp)
    4970:	e0bfea15 	stw	r2,-88(fp)
    4974:	e0bfea17 	ldw	r2,-88(fp)
    4978:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    497c:	e0800217 	ldw	r2,8(fp)
    4980:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    4984:	e0bfe80b 	ldhu	r2,-96(fp)
    4988:	0000cb06 	br	4cb8 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    498c:	e13ffd0b 	ldhu	r4,-12(fp)
    4990:	e17ffe03 	ldbu	r5,-8(fp)
    4994:	e0bfff0b 	ldhu	r2,-4(fp)
    4998:	e0fff704 	addi	r3,fp,-36
    499c:	d8800015 	stw	r2,0(sp)
    49a0:	280f883a 	mov	r7,r5
    49a4:	200d883a 	mov	r6,r4
    49a8:	180b883a 	mov	r5,r3
    49ac:	e13ffc17 	ldw	r4,-16(fp)
    49b0:	00051840 	call	5184 <OS_FlagBlock>
    49b4:	e0bfe517 	ldw	r2,-108(fp)
    49b8:	e0bfeb15 	stw	r2,-84(fp)
    49bc:	e0bfeb17 	ldw	r2,-84(fp)
    49c0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    49c4:	00006506 	br	4b5c <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
    49c8:	e0bffc17 	ldw	r2,-16(fp)
    49cc:	1080020b 	ldhu	r2,8(r2)
    49d0:	0084303a 	nor	r2,zero,r2
    49d4:	1007883a 	mov	r3,r2
    49d8:	e0bffd0b 	ldhu	r2,-12(fp)
    49dc:	1884703a 	and	r2,r3,r2
    49e0:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    49e4:	e0ffe80b 	ldhu	r3,-96(fp)
    49e8:	e0bffd0b 	ldhu	r2,-12(fp)
    49ec:	1880151e 	bne	r3,r2,4a44 <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    49f0:	e0bfe403 	ldbu	r2,-112(fp)
    49f4:	10800058 	cmpnei	r2,r2,1
    49f8:	1000071e 	bne	r2,zero,4a18 <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
    49fc:	e0bffc17 	ldw	r2,-16(fp)
    4a00:	10c0020b 	ldhu	r3,8(r2)
    4a04:	e0bfe80b 	ldhu	r2,-96(fp)
    4a08:	1884b03a 	or	r2,r3,r2
    4a0c:	1007883a 	mov	r3,r2
    4a10:	e0bffc17 	ldw	r2,-16(fp)
    4a14:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    4a18:	d0a80317 	ldw	r2,-24564(gp)
    4a1c:	e0ffe80b 	ldhu	r3,-96(fp)
    4a20:	10c00b0d 	sth	r3,44(r2)
    4a24:	e0bfe517 	ldw	r2,-108(fp)
    4a28:	e0bfec15 	stw	r2,-80(fp)
    4a2c:	e0bfec17 	ldw	r2,-80(fp)
    4a30:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    4a34:	e0800217 	ldw	r2,8(fp)
    4a38:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    4a3c:	e0bfe80b 	ldhu	r2,-96(fp)
    4a40:	00009d06 	br	4cb8 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    4a44:	e13ffd0b 	ldhu	r4,-12(fp)
    4a48:	e17ffe03 	ldbu	r5,-8(fp)
    4a4c:	e0bfff0b 	ldhu	r2,-4(fp)
    4a50:	e0fff704 	addi	r3,fp,-36
    4a54:	d8800015 	stw	r2,0(sp)
    4a58:	280f883a 	mov	r7,r5
    4a5c:	200d883a 	mov	r6,r4
    4a60:	180b883a 	mov	r5,r3
    4a64:	e13ffc17 	ldw	r4,-16(fp)
    4a68:	00051840 	call	5184 <OS_FlagBlock>
    4a6c:	e0bfe517 	ldw	r2,-108(fp)
    4a70:	e0bfed15 	stw	r2,-76(fp)
    4a74:	e0bfed17 	ldw	r2,-76(fp)
    4a78:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    4a7c:	00003706 	br	4b5c <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
    4a80:	e0bffc17 	ldw	r2,-16(fp)
    4a84:	1080020b 	ldhu	r2,8(r2)
    4a88:	0084303a 	nor	r2,zero,r2
    4a8c:	1007883a 	mov	r3,r2
    4a90:	e0bffd0b 	ldhu	r2,-12(fp)
    4a94:	1884703a 	and	r2,r3,r2
    4a98:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
    4a9c:	e0bfe80b 	ldhu	r2,-96(fp)
    4aa0:	10001526 	beq	r2,zero,4af8 <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    4aa4:	e0bfe403 	ldbu	r2,-112(fp)
    4aa8:	10800058 	cmpnei	r2,r2,1
    4aac:	1000071e 	bne	r2,zero,4acc <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
    4ab0:	e0bffc17 	ldw	r2,-16(fp)
    4ab4:	10c0020b 	ldhu	r3,8(r2)
    4ab8:	e0bfe80b 	ldhu	r2,-96(fp)
    4abc:	1884b03a 	or	r2,r3,r2
    4ac0:	1007883a 	mov	r3,r2
    4ac4:	e0bffc17 	ldw	r2,-16(fp)
    4ac8:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    4acc:	d0a80317 	ldw	r2,-24564(gp)
    4ad0:	e0ffe80b 	ldhu	r3,-96(fp)
    4ad4:	10c00b0d 	sth	r3,44(r2)
    4ad8:	e0bfe517 	ldw	r2,-108(fp)
    4adc:	e0bfee15 	stw	r2,-72(fp)
    4ae0:	e0bfee17 	ldw	r2,-72(fp)
    4ae4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    4ae8:	e0800217 	ldw	r2,8(fp)
    4aec:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    4af0:	e0bfe80b 	ldhu	r2,-96(fp)
    4af4:	00007006 	br	4cb8 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    4af8:	e13ffd0b 	ldhu	r4,-12(fp)
    4afc:	e17ffe03 	ldbu	r5,-8(fp)
    4b00:	e0bfff0b 	ldhu	r2,-4(fp)
    4b04:	e0fff704 	addi	r3,fp,-36
    4b08:	d8800015 	stw	r2,0(sp)
    4b0c:	280f883a 	mov	r7,r5
    4b10:	200d883a 	mov	r6,r4
    4b14:	180b883a 	mov	r5,r3
    4b18:	e13ffc17 	ldw	r4,-16(fp)
    4b1c:	00051840 	call	5184 <OS_FlagBlock>
    4b20:	e0bfe517 	ldw	r2,-108(fp)
    4b24:	e0bfef15 	stw	r2,-68(fp)
    4b28:	e0bfef17 	ldw	r2,-68(fp)
    4b2c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    4b30:	00000a06 	br	4b5c <OSFlagPend+0x448>
    4b34:	e0bfe517 	ldw	r2,-108(fp)
    4b38:	e0bff015 	stw	r2,-64(fp)
    4b3c:	e0bff017 	ldw	r2,-64(fp)
    4b40:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
    4b44:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
    4b48:	e0800217 	ldw	r2,8(fp)
    4b4c:	00c01bc4 	movi	r3,111
    4b50:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
    4b54:	e0bfe80b 	ldhu	r2,-96(fp)
    4b58:	00005706 	br	4cb8 <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
    4b5c:	00035d40 	call	35d4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4b60:	0005303a 	rdctl	r2,status
    4b64:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4b68:	e0fff117 	ldw	r3,-60(fp)
    4b6c:	00bfff84 	movi	r2,-2
    4b70:	1884703a 	and	r2,r3,r2
    4b74:	1001703a 	wrctl	status,r2
  
  return context;
    4b78:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
    4b7c:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
    4b80:	d0a80317 	ldw	r2,-24564(gp)
    4b84:	10800c43 	ldbu	r2,49(r2)
    4b88:	10803fcc 	andi	r2,r2,255
    4b8c:	10001c26 	beq	r2,zero,4c00 <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
    4b90:	d0a80317 	ldw	r2,-24564(gp)
    4b94:	10800c43 	ldbu	r2,49(r2)
    4b98:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    4b9c:	d0a80317 	ldw	r2,-24564(gp)
    4ba0:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
    4ba4:	e0bff704 	addi	r2,fp,-36
    4ba8:	1009883a 	mov	r4,r2
    4bac:	00054b80 	call	54b8 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
    4bb0:	d0a80317 	ldw	r2,-24564(gp)
    4bb4:	10000c05 	stb	zero,48(r2)
    4bb8:	e0bfe517 	ldw	r2,-108(fp)
    4bbc:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4bc0:	e0bff217 	ldw	r2,-56(fp)
    4bc4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
    4bc8:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
    4bcc:	e0bff303 	ldbu	r2,-52(fp)
    4bd0:	108000a0 	cmpeqi	r2,r2,2
    4bd4:	10000426 	beq	r2,zero,4be8 <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
    4bd8:	e0800217 	ldw	r2,8(fp)
    4bdc:	00c00384 	movi	r3,14
    4be0:	10c00005 	stb	r3,0(r2)
                 break;
    4be4:	00000406 	br	4bf8 <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
    4be8:	e0800217 	ldw	r2,8(fp)
    4bec:	00c00284 	movi	r3,10
    4bf0:	10c00005 	stb	r3,0(r2)
                 break;
    4bf4:	0001883a 	nop
        }
        return (flags_rdy);
    4bf8:	e0bfe80b 	ldhu	r2,-96(fp)
    4bfc:	00002e06 	br	4cb8 <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
    4c00:	d0a80317 	ldw	r2,-24564(gp)
    4c04:	10800b0b 	ldhu	r2,44(r2)
    4c08:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
    4c0c:	e0bfe403 	ldbu	r2,-112(fp)
    4c10:	10800058 	cmpnei	r2,r2,1
    4c14:	1000211e 	bne	r2,zero,4c9c <OSFlagPend+0x588>
        switch (wait_type) {
    4c18:	e0bffe03 	ldbu	r2,-8(fp)
    4c1c:	10001616 	blt	r2,zero,4c78 <OSFlagPend+0x564>
    4c20:	10c00090 	cmplti	r3,r2,2
    4c24:	18000c1e 	bne	r3,zero,4c58 <OSFlagPend+0x544>
    4c28:	10800108 	cmpgei	r2,r2,4
    4c2c:	1000121e 	bne	r2,zero,4c78 <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
    4c30:	e0bffc17 	ldw	r2,-16(fp)
    4c34:	1080020b 	ldhu	r2,8(r2)
    4c38:	1007883a 	mov	r3,r2
    4c3c:	e0bfe80b 	ldhu	r2,-96(fp)
    4c40:	0084303a 	nor	r2,zero,r2
    4c44:	1884703a 	and	r2,r3,r2
    4c48:	1007883a 	mov	r3,r2
    4c4c:	e0bffc17 	ldw	r2,-16(fp)
    4c50:	10c0020d 	sth	r3,8(r2)
                 break;
    4c54:	00001106 	br	4c9c <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
    4c58:	e0bffc17 	ldw	r2,-16(fp)
    4c5c:	10c0020b 	ldhu	r3,8(r2)
    4c60:	e0bfe80b 	ldhu	r2,-96(fp)
    4c64:	1884b03a 	or	r2,r3,r2
    4c68:	1007883a 	mov	r3,r2
    4c6c:	e0bffc17 	ldw	r2,-16(fp)
    4c70:	10c0020d 	sth	r3,8(r2)
                 break;
    4c74:	00000906 	br	4c9c <OSFlagPend+0x588>
    4c78:	e0bfe517 	ldw	r2,-108(fp)
    4c7c:	e0bff415 	stw	r2,-48(fp)
    4c80:	e0bff417 	ldw	r2,-48(fp)
    4c84:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
    4c88:	e0800217 	ldw	r2,8(fp)
    4c8c:	00c01bc4 	movi	r3,111
    4c90:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
    4c94:	0005883a 	mov	r2,zero
    4c98:	00000706 	br	4cb8 <OSFlagPend+0x5a4>
    4c9c:	e0bfe517 	ldw	r2,-108(fp)
    4ca0:	e0bff515 	stw	r2,-44(fp)
    4ca4:	e0bff517 	ldw	r2,-44(fp)
    4ca8:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
    4cac:	e0800217 	ldw	r2,8(fp)
    4cb0:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
    4cb4:	e0bfe80b 	ldhu	r2,-96(fp)
}
    4cb8:	e037883a 	mov	sp,fp
    4cbc:	dfc00117 	ldw	ra,4(sp)
    4cc0:	df000017 	ldw	fp,0(sp)
    4cc4:	dec00204 	addi	sp,sp,8
    4cc8:	f800283a 	ret

00004ccc <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
    4ccc:	defffb04 	addi	sp,sp,-20
    4cd0:	df000415 	stw	fp,16(sp)
    4cd4:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    4cd8:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4cdc:	0005303a 	rdctl	r2,status
    4ce0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4ce4:	e0fffe17 	ldw	r3,-8(fp)
    4ce8:	00bfff84 	movi	r2,-2
    4cec:	1884703a 	and	r2,r3,r2
    4cf0:	1001703a 	wrctl	status,r2
  
  return context;
    4cf4:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
    4cf8:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
    4cfc:	d0a80317 	ldw	r2,-24564(gp)
    4d00:	10800b0b 	ldhu	r2,44(r2)
    4d04:	e0bffd0d 	sth	r2,-12(fp)
    4d08:	e0bffc17 	ldw	r2,-16(fp)
    4d0c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4d10:	e0bfff17 	ldw	r2,-4(fp)
    4d14:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
    4d18:	e0bffd0b 	ldhu	r2,-12(fp)
}
    4d1c:	e037883a 	mov	sp,fp
    4d20:	df000017 	ldw	fp,0(sp)
    4d24:	dec00104 	addi	sp,sp,4
    4d28:	f800283a 	ret

00004d2c <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
    4d2c:	deffef04 	addi	sp,sp,-68
    4d30:	dfc01015 	stw	ra,64(sp)
    4d34:	df000f15 	stw	fp,60(sp)
    4d38:	df000f04 	addi	fp,sp,60
    4d3c:	e13ffc15 	stw	r4,-16(fp)
    4d40:	2807883a 	mov	r3,r5
    4d44:	3005883a 	mov	r2,r6
    4d48:	e1ffff15 	stw	r7,-4(fp)
    4d4c:	e0fffd0d 	sth	r3,-12(fp)
    4d50:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
    4d54:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
    4d58:	e0bfff17 	ldw	r2,-4(fp)
    4d5c:	1000021e 	bne	r2,zero,4d68 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
    4d60:	0005883a 	mov	r2,zero
    4d64:	0000d106 	br	50ac <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
    4d68:	e0bffc17 	ldw	r2,-16(fp)
    4d6c:	1000051e 	bne	r2,zero,4d84 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    4d70:	e0bfff17 	ldw	r2,-4(fp)
    4d74:	00c01b84 	movi	r3,110
    4d78:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    4d7c:	0005883a 	mov	r2,zero
    4d80:	0000ca06 	br	50ac <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
    4d84:	e0bffc17 	ldw	r2,-16(fp)
    4d88:	10800003 	ldbu	r2,0(r2)
    4d8c:	10803fcc 	andi	r2,r2,255
    4d90:	10800160 	cmpeqi	r2,r2,5
    4d94:	1000051e 	bne	r2,zero,4dac <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
    4d98:	e0bfff17 	ldw	r2,-4(fp)
    4d9c:	00c00044 	movi	r3,1
    4da0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    4da4:	0005883a 	mov	r2,zero
    4da8:	0000c006 	br	50ac <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4dac:	0005303a 	rdctl	r2,status
    4db0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4db4:	e0fffb17 	ldw	r3,-20(fp)
    4db8:	00bfff84 	movi	r2,-2
    4dbc:	1884703a 	and	r2,r3,r2
    4dc0:	1001703a 	wrctl	status,r2
  
  return context;
    4dc4:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
    4dc8:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
    4dcc:	e0bffe03 	ldbu	r2,-8(fp)
    4dd0:	10000326 	beq	r2,zero,4de0 <OSFlagPost+0xb4>
    4dd4:	10800060 	cmpeqi	r2,r2,1
    4dd8:	10000b1e 	bne	r2,zero,4e08 <OSFlagPost+0xdc>
    4ddc:	00001206 	br	4e28 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
    4de0:	e0bffc17 	ldw	r2,-16(fp)
    4de4:	1080020b 	ldhu	r2,8(r2)
    4de8:	1007883a 	mov	r3,r2
    4dec:	e0bffd0b 	ldhu	r2,-12(fp)
    4df0:	0084303a 	nor	r2,zero,r2
    4df4:	1884703a 	and	r2,r3,r2
    4df8:	1007883a 	mov	r3,r2
    4dfc:	e0bffc17 	ldw	r2,-16(fp)
    4e00:	10c0020d 	sth	r3,8(r2)
             break;
    4e04:	00001106 	br	4e4c <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
    4e08:	e0bffc17 	ldw	r2,-16(fp)
    4e0c:	10c0020b 	ldhu	r3,8(r2)
    4e10:	e0bffd0b 	ldhu	r2,-12(fp)
    4e14:	1884b03a 	or	r2,r3,r2
    4e18:	1007883a 	mov	r3,r2
    4e1c:	e0bffc17 	ldw	r2,-16(fp)
    4e20:	10c0020d 	sth	r3,8(r2)
             break;
    4e24:	00000906 	br	4e4c <OSFlagPost+0x120>
    4e28:	e0bff317 	ldw	r2,-52(fp)
    4e2c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4e30:	e0bff417 	ldw	r2,-48(fp)
    4e34:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
    4e38:	e0bfff17 	ldw	r2,-4(fp)
    4e3c:	00c01c44 	movi	r3,113
    4e40:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
    4e44:	0005883a 	mov	r2,zero
    4e48:	00009806 	br	50ac <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    4e4c:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    4e50:	e0bffc17 	ldw	r2,-16(fp)
    4e54:	10800117 	ldw	r2,4(r2)
    4e58:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
    4e5c:	00007706 	br	503c <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
    4e60:	e0bff117 	ldw	r2,-60(fp)
    4e64:	10800483 	ldbu	r2,18(r2)
    4e68:	10803fcc 	andi	r2,r2,255
    4e6c:	10c00060 	cmpeqi	r3,r2,1
    4e70:	18004a1e 	bne	r3,zero,4f9c <OSFlagPost+0x270>
    4e74:	10c00088 	cmpgei	r3,r2,2
    4e78:	1800021e 	bne	r3,zero,4e84 <OSFlagPost+0x158>
    4e7c:	10002f26 	beq	r2,zero,4f3c <OSFlagPost+0x210>
    4e80:	00005b06 	br	4ff0 <OSFlagPost+0x2c4>
    4e84:	10c000a0 	cmpeqi	r3,r2,2
    4e88:	1800031e 	bne	r3,zero,4e98 <OSFlagPost+0x16c>
    4e8c:	108000e0 	cmpeqi	r2,r2,3
    4e90:	1000171e 	bne	r2,zero,4ef0 <OSFlagPost+0x1c4>
    4e94:	00005606 	br	4ff0 <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    4e98:	e0bffc17 	ldw	r2,-16(fp)
    4e9c:	10c0020b 	ldhu	r3,8(r2)
    4ea0:	e0bff117 	ldw	r2,-60(fp)
    4ea4:	1080040b 	ldhu	r2,16(r2)
    4ea8:	1884703a 	and	r2,r3,r2
    4eac:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
    4eb0:	e0bff117 	ldw	r2,-60(fp)
    4eb4:	1080040b 	ldhu	r2,16(r2)
    4eb8:	10ffffcc 	andi	r3,r2,65535
    4ebc:	e0bff60b 	ldhu	r2,-40(fp)
    4ec0:	1880541e 	bne	r3,r2,5014 <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    4ec4:	e0bff60b 	ldhu	r2,-40(fp)
    4ec8:	100b883a 	mov	r5,r2
    4ecc:	e13ff117 	ldw	r4,-60(fp)
    4ed0:	00053c40 	call	53c4 <OS_FlagTaskRdy>
    4ed4:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
    4ed8:	e0bff683 	ldbu	r2,-38(fp)
    4edc:	10800058 	cmpnei	r2,r2,1
    4ee0:	10004c1e 	bne	r2,zero,5014 <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    4ee4:	00800044 	movi	r2,1
    4ee8:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
    4eec:	00004906 	br	5014 <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    4ef0:	e0bffc17 	ldw	r2,-16(fp)
    4ef4:	10c0020b 	ldhu	r3,8(r2)
    4ef8:	e0bff117 	ldw	r2,-60(fp)
    4efc:	1080040b 	ldhu	r2,16(r2)
    4f00:	1884703a 	and	r2,r3,r2
    4f04:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
    4f08:	e0bff60b 	ldhu	r2,-40(fp)
    4f0c:	10004326 	beq	r2,zero,501c <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    4f10:	e0bff60b 	ldhu	r2,-40(fp)
    4f14:	100b883a 	mov	r5,r2
    4f18:	e13ff117 	ldw	r4,-60(fp)
    4f1c:	00053c40 	call	53c4 <OS_FlagTaskRdy>
    4f20:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
    4f24:	e0bff683 	ldbu	r2,-38(fp)
    4f28:	10800058 	cmpnei	r2,r2,1
    4f2c:	10003b1e 	bne	r2,zero,501c <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    4f30:	00800044 	movi	r2,1
    4f34:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
    4f38:	00003806 	br	501c <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    4f3c:	e0bffc17 	ldw	r2,-16(fp)
    4f40:	1080020b 	ldhu	r2,8(r2)
    4f44:	0084303a 	nor	r2,zero,r2
    4f48:	1007883a 	mov	r3,r2
    4f4c:	e0bff117 	ldw	r2,-60(fp)
    4f50:	1080040b 	ldhu	r2,16(r2)
    4f54:	1884703a 	and	r2,r3,r2
    4f58:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
    4f5c:	e0bff117 	ldw	r2,-60(fp)
    4f60:	1080040b 	ldhu	r2,16(r2)
    4f64:	10ffffcc 	andi	r3,r2,65535
    4f68:	e0bff60b 	ldhu	r2,-40(fp)
    4f6c:	18802d1e 	bne	r3,r2,5024 <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    4f70:	e0bff60b 	ldhu	r2,-40(fp)
    4f74:	100b883a 	mov	r5,r2
    4f78:	e13ff117 	ldw	r4,-60(fp)
    4f7c:	00053c40 	call	53c4 <OS_FlagTaskRdy>
    4f80:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
    4f84:	e0bff683 	ldbu	r2,-38(fp)
    4f88:	10800058 	cmpnei	r2,r2,1
    4f8c:	1000251e 	bne	r2,zero,5024 <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    4f90:	00800044 	movi	r2,1
    4f94:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
    4f98:	00002206 	br	5024 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    4f9c:	e0bffc17 	ldw	r2,-16(fp)
    4fa0:	1080020b 	ldhu	r2,8(r2)
    4fa4:	0084303a 	nor	r2,zero,r2
    4fa8:	1007883a 	mov	r3,r2
    4fac:	e0bff117 	ldw	r2,-60(fp)
    4fb0:	1080040b 	ldhu	r2,16(r2)
    4fb4:	1884703a 	and	r2,r3,r2
    4fb8:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
    4fbc:	e0bff60b 	ldhu	r2,-40(fp)
    4fc0:	10001a26 	beq	r2,zero,502c <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    4fc4:	e0bff60b 	ldhu	r2,-40(fp)
    4fc8:	100b883a 	mov	r5,r2
    4fcc:	e13ff117 	ldw	r4,-60(fp)
    4fd0:	00053c40 	call	53c4 <OS_FlagTaskRdy>
    4fd4:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
    4fd8:	e0bff683 	ldbu	r2,-38(fp)
    4fdc:	10800058 	cmpnei	r2,r2,1
    4fe0:	1000121e 	bne	r2,zero,502c <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    4fe4:	00800044 	movi	r2,1
    4fe8:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
    4fec:	00000f06 	br	502c <OSFlagPost+0x300>
    4ff0:	e0bff317 	ldw	r2,-52(fp)
    4ff4:	e0bff515 	stw	r2,-44(fp)
    4ff8:	e0bff517 	ldw	r2,-44(fp)
    4ffc:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
    5000:	e0bfff17 	ldw	r2,-4(fp)
    5004:	00c01bc4 	movi	r3,111
    5008:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
    500c:	0005883a 	mov	r2,zero
    5010:	00002606 	br	50ac <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
    5014:	0001883a 	nop
    5018:	00000506 	br	5030 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
    501c:	0001883a 	nop
    5020:	00000306 	br	5030 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
    5024:	0001883a 	nop
    5028:	00000106 	br	5030 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
    502c:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    5030:	e0bff117 	ldw	r2,-60(fp)
    5034:	10800017 	ldw	r2,0(r2)
    5038:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
    503c:	e0bff117 	ldw	r2,-60(fp)
    5040:	103f871e 	bne	r2,zero,4e60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004e60>
    5044:	e0bff317 	ldw	r2,-52(fp)
    5048:	e0bff715 	stw	r2,-36(fp)
    504c:	e0bff717 	ldw	r2,-36(fp)
    5050:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
    5054:	e0bff203 	ldbu	r2,-56(fp)
    5058:	10800058 	cmpnei	r2,r2,1
    505c:	1000011e 	bne	r2,zero,5064 <OSFlagPost+0x338>
        OS_Sched();
    5060:	00035d40 	call	35d4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5064:	0005303a 	rdctl	r2,status
    5068:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    506c:	e0fffa17 	ldw	r3,-24(fp)
    5070:	00bfff84 	movi	r2,-2
    5074:	1884703a 	and	r2,r3,r2
    5078:	1001703a 	wrctl	status,r2
  
  return context;
    507c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    5080:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
    5084:	e0bffc17 	ldw	r2,-16(fp)
    5088:	1080020b 	ldhu	r2,8(r2)
    508c:	e0bff90d 	sth	r2,-28(fp)
    5090:	e0bff317 	ldw	r2,-52(fp)
    5094:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5098:	e0bff817 	ldw	r2,-32(fp)
    509c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
    50a0:	e0bfff17 	ldw	r2,-4(fp)
    50a4:	10000005 	stb	zero,0(r2)
    return (flags_cur);
    50a8:	e0bff90b 	ldhu	r2,-28(fp)
}
    50ac:	e037883a 	mov	sp,fp
    50b0:	dfc00117 	ldw	ra,4(sp)
    50b4:	df000017 	ldw	fp,0(sp)
    50b8:	dec00204 	addi	sp,sp,8
    50bc:	f800283a 	ret

000050c0 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
    50c0:	defff904 	addi	sp,sp,-28
    50c4:	df000615 	stw	fp,24(sp)
    50c8:	df000604 	addi	fp,sp,24
    50cc:	e13ffe15 	stw	r4,-8(fp)
    50d0:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
    50d4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
    50d8:	e0bfff17 	ldw	r2,-4(fp)
    50dc:	1000021e 	bne	r2,zero,50e8 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
    50e0:	0005883a 	mov	r2,zero
    50e4:	00002306 	br	5174 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
    50e8:	e0bffe17 	ldw	r2,-8(fp)
    50ec:	1000051e 	bne	r2,zero,5104 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    50f0:	e0bfff17 	ldw	r2,-4(fp)
    50f4:	00c01b84 	movi	r3,110
    50f8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    50fc:	0005883a 	mov	r2,zero
    5100:	00001c06 	br	5174 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
    5104:	e0bffe17 	ldw	r2,-8(fp)
    5108:	10800003 	ldbu	r2,0(r2)
    510c:	10803fcc 	andi	r2,r2,255
    5110:	10800160 	cmpeqi	r2,r2,5
    5114:	1000051e 	bne	r2,zero,512c <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
    5118:	e0bfff17 	ldw	r2,-4(fp)
    511c:	00c00044 	movi	r3,1
    5120:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    5124:	0005883a 	mov	r2,zero
    5128:	00001206 	br	5174 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    512c:	0005303a 	rdctl	r2,status
    5130:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5134:	e0fffc17 	ldw	r3,-16(fp)
    5138:	00bfff84 	movi	r2,-2
    513c:	1884703a 	and	r2,r3,r2
    5140:	1001703a 	wrctl	status,r2
  
  return context;
    5144:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    5148:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
    514c:	e0bffe17 	ldw	r2,-8(fp)
    5150:	1080020b 	ldhu	r2,8(r2)
    5154:	e0bffb0d 	sth	r2,-20(fp)
    5158:	e0bffa17 	ldw	r2,-24(fp)
    515c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5160:	e0bffd17 	ldw	r2,-12(fp)
    5164:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    5168:	e0bfff17 	ldw	r2,-4(fp)
    516c:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
    5170:	e0bffb0b 	ldhu	r2,-20(fp)
}
    5174:	e037883a 	mov	sp,fp
    5178:	df000017 	ldw	fp,0(sp)
    517c:	dec00104 	addi	sp,sp,4
    5180:	f800283a 	ret

00005184 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
    5184:	defff804 	addi	sp,sp,-32
    5188:	df000715 	stw	fp,28(sp)
    518c:	df000704 	addi	fp,sp,28
    5190:	e13ffb15 	stw	r4,-20(fp)
    5194:	e17ffc15 	stw	r5,-16(fp)
    5198:	3009883a 	mov	r4,r6
    519c:	3807883a 	mov	r3,r7
    51a0:	e0800117 	ldw	r2,4(fp)
    51a4:	e13ffd0d 	sth	r4,-12(fp)
    51a8:	e0fffe05 	stb	r3,-8(fp)
    51ac:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
    51b0:	d0a80317 	ldw	r2,-24564(gp)
    51b4:	d0e80317 	ldw	r3,-24564(gp)
    51b8:	18c00c03 	ldbu	r3,48(r3)
    51bc:	18c00814 	ori	r3,r3,32
    51c0:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
    51c4:	d0a80317 	ldw	r2,-24564(gp)
    51c8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
    51cc:	d0a80317 	ldw	r2,-24564(gp)
    51d0:	e0ffff0b 	ldhu	r3,-4(fp)
    51d4:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
    51d8:	d0a80317 	ldw	r2,-24564(gp)
    51dc:	e0fffc17 	ldw	r3,-16(fp)
    51e0:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
    51e4:	e0bffc17 	ldw	r2,-16(fp)
    51e8:	e0fffd0b 	ldhu	r3,-12(fp)
    51ec:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
    51f0:	e0bffc17 	ldw	r2,-16(fp)
    51f4:	e0fffe03 	ldbu	r3,-8(fp)
    51f8:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
    51fc:	d0e80317 	ldw	r3,-24564(gp)
    5200:	e0bffc17 	ldw	r2,-16(fp)
    5204:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
    5208:	e0bffb17 	ldw	r2,-20(fp)
    520c:	10c00117 	ldw	r3,4(r2)
    5210:	e0bffc17 	ldw	r2,-16(fp)
    5214:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
    5218:	e0bffc17 	ldw	r2,-16(fp)
    521c:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
    5220:	e0bffc17 	ldw	r2,-16(fp)
    5224:	e0fffb17 	ldw	r3,-20(fp)
    5228:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    522c:	e0bffb17 	ldw	r2,-20(fp)
    5230:	10800117 	ldw	r2,4(r2)
    5234:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
    5238:	e0bff917 	ldw	r2,-28(fp)
    523c:	10000326 	beq	r2,zero,524c <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
    5240:	e0bff917 	ldw	r2,-28(fp)
    5244:	e0fffc17 	ldw	r3,-16(fp)
    5248:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
    524c:	e0bffb17 	ldw	r2,-20(fp)
    5250:	e0fffc17 	ldw	r3,-16(fp)
    5254:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
    5258:	d0a80317 	ldw	r2,-24564(gp)
    525c:	10800d03 	ldbu	r2,52(r2)
    5260:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
    5264:	e0fffa03 	ldbu	r3,-24(fp)
    5268:	e13ffa03 	ldbu	r4,-24(fp)
    526c:	d0a80044 	addi	r2,gp,-24575
    5270:	2085883a 	add	r2,r4,r2
    5274:	10800003 	ldbu	r2,0(r2)
    5278:	1009883a 	mov	r4,r2
    527c:	d0a80317 	ldw	r2,-24564(gp)
    5280:	10800d43 	ldbu	r2,53(r2)
    5284:	0084303a 	nor	r2,zero,r2
    5288:	2084703a 	and	r2,r4,r2
    528c:	1009883a 	mov	r4,r2
    5290:	d0a80044 	addi	r2,gp,-24575
    5294:	1885883a 	add	r2,r3,r2
    5298:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
    529c:	e0fffa03 	ldbu	r3,-24(fp)
    52a0:	d0a80044 	addi	r2,gp,-24575
    52a4:	1885883a 	add	r2,r3,r2
    52a8:	10800003 	ldbu	r2,0(r2)
    52ac:	10803fcc 	andi	r2,r2,255
    52b0:	1000071e 	bne	r2,zero,52d0 <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
    52b4:	d0a80317 	ldw	r2,-24564(gp)
    52b8:	10800d83 	ldbu	r2,54(r2)
    52bc:	0084303a 	nor	r2,zero,r2
    52c0:	1007883a 	mov	r3,r2
    52c4:	d0a80003 	ldbu	r2,-24576(gp)
    52c8:	1884703a 	and	r2,r3,r2
    52cc:	d0a80005 	stb	r2,-24576(gp)
    }
}
    52d0:	0001883a 	nop
    52d4:	e037883a 	mov	sp,fp
    52d8:	df000017 	ldw	fp,0(sp)
    52dc:	dec00104 	addi	sp,sp,4
    52e0:	f800283a 	ret

000052e4 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
    52e4:	defffb04 	addi	sp,sp,-20
    52e8:	dfc00415 	stw	ra,16(sp)
    52ec:	df000315 	stw	fp,12(sp)
    52f0:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    52f4:	0140dc04 	movi	r5,880
    52f8:	01000074 	movhi	r4,1
    52fc:	21161e04 	addi	r4,r4,22648
    5300:	00035180 	call	3518 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
    5304:	00800074 	movhi	r2,1
    5308:	10961e04 	addi	r2,r2,22648
    530c:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
    5310:	00800074 	movhi	r2,1
    5314:	10962904 	addi	r2,r2,22692
    5318:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
    531c:	e03ffd0d 	sth	zero,-12(fp)
    5320:	00001306 	br	5370 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    5324:	e0bffe17 	ldw	r2,-8(fp)
    5328:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
    532c:	e0bffe17 	ldw	r2,-8(fp)
    5330:	e0ffff17 	ldw	r3,-4(fp)
    5334:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
    5338:	e0bffe17 	ldw	r2,-8(fp)
    533c:	00c00fc4 	movi	r3,63
    5340:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
    5344:	e0bffe17 	ldw	r2,-8(fp)
    5348:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
    534c:	e0bffe17 	ldw	r2,-8(fp)
    5350:	10800b04 	addi	r2,r2,44
    5354:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
    5358:	e0bfff17 	ldw	r2,-4(fp)
    535c:	10800b04 	addi	r2,r2,44
    5360:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
    5364:	e0bffd0b 	ldhu	r2,-12(fp)
    5368:	10800044 	addi	r2,r2,1
    536c:	e0bffd0d 	sth	r2,-12(fp)
    5370:	e0bffd0b 	ldhu	r2,-12(fp)
    5374:	108004f0 	cmpltui	r2,r2,19
    5378:	103fea1e 	bne	r2,zero,5324 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005324>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    537c:	e0bffe17 	ldw	r2,-8(fp)
    5380:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
    5384:	e0bffe17 	ldw	r2,-8(fp)
    5388:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
    538c:	e0bffe17 	ldw	r2,-8(fp)
    5390:	00c00fc4 	movi	r3,63
    5394:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
    5398:	e0bffe17 	ldw	r2,-8(fp)
    539c:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
    53a0:	00800074 	movhi	r2,1
    53a4:	10961e04 	addi	r2,r2,22648
    53a8:	d0a80515 	stw	r2,-24556(gp)
#endif
}
    53ac:	0001883a 	nop
    53b0:	e037883a 	mov	sp,fp
    53b4:	dfc00117 	ldw	ra,4(sp)
    53b8:	df000017 	ldw	fp,0(sp)
    53bc:	dec00204 	addi	sp,sp,8
    53c0:	f800283a 	ret

000053c4 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
    53c4:	defffa04 	addi	sp,sp,-24
    53c8:	dfc00515 	stw	ra,20(sp)
    53cc:	df000415 	stw	fp,16(sp)
    53d0:	df000404 	addi	fp,sp,16
    53d4:	e13ffe15 	stw	r4,-8(fp)
    53d8:	2805883a 	mov	r2,r5
    53dc:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
    53e0:	e0bffe17 	ldw	r2,-8(fp)
    53e4:	10800217 	ldw	r2,8(r2)
    53e8:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
    53ec:	e0bffd17 	ldw	r2,-12(fp)
    53f0:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
    53f4:	e0bffd17 	ldw	r2,-12(fp)
    53f8:	e0ffff0b 	ldhu	r3,-4(fp)
    53fc:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
    5400:	e0bffd17 	ldw	r2,-12(fp)
    5404:	10c00c03 	ldbu	r3,48(r2)
    5408:	00bff7c4 	movi	r2,-33
    540c:	1884703a 	and	r2,r3,r2
    5410:	1007883a 	mov	r3,r2
    5414:	e0bffd17 	ldw	r2,-12(fp)
    5418:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
    541c:	e0bffd17 	ldw	r2,-12(fp)
    5420:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
    5424:	e0bffd17 	ldw	r2,-12(fp)
    5428:	10800c03 	ldbu	r2,48(r2)
    542c:	10803fcc 	andi	r2,r2,255
    5430:	1000181e 	bne	r2,zero,5494 <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
    5434:	e0bffd17 	ldw	r2,-12(fp)
    5438:	10c00d83 	ldbu	r3,54(r2)
    543c:	d0a80003 	ldbu	r2,-24576(gp)
    5440:	1884b03a 	or	r2,r3,r2
    5444:	d0a80005 	stb	r2,-24576(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    5448:	e0bffd17 	ldw	r2,-12(fp)
    544c:	10800d03 	ldbu	r2,52(r2)
    5450:	10c03fcc 	andi	r3,r2,255
    5454:	e0bffd17 	ldw	r2,-12(fp)
    5458:	10800d03 	ldbu	r2,52(r2)
    545c:	11003fcc 	andi	r4,r2,255
    5460:	d0a80044 	addi	r2,gp,-24575
    5464:	2085883a 	add	r2,r4,r2
    5468:	11000003 	ldbu	r4,0(r2)
    546c:	e0bffd17 	ldw	r2,-12(fp)
    5470:	10800d43 	ldbu	r2,53(r2)
    5474:	2084b03a 	or	r2,r4,r2
    5478:	1009883a 	mov	r4,r2
    547c:	d0a80044 	addi	r2,gp,-24575
    5480:	1885883a 	add	r2,r3,r2
    5484:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
    5488:	00800044 	movi	r2,1
    548c:	e0bffc05 	stb	r2,-16(fp)
    5490:	00000106 	br	5498 <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
    5494:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
    5498:	e13ffe17 	ldw	r4,-8(fp)
    549c:	00054b80 	call	54b8 <OS_FlagUnlink>
    return (sched);
    54a0:	e0bffc03 	ldbu	r2,-16(fp)
}
    54a4:	e037883a 	mov	sp,fp
    54a8:	dfc00117 	ldw	ra,4(sp)
    54ac:	df000017 	ldw	fp,0(sp)
    54b0:	dec00204 	addi	sp,sp,8
    54b4:	f800283a 	ret

000054b8 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
    54b8:	defffa04 	addi	sp,sp,-24
    54bc:	df000515 	stw	fp,20(sp)
    54c0:	df000504 	addi	fp,sp,20
    54c4:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
    54c8:	e0bfff17 	ldw	r2,-4(fp)
    54cc:	10800117 	ldw	r2,4(r2)
    54d0:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
    54d4:	e0bfff17 	ldw	r2,-4(fp)
    54d8:	10800017 	ldw	r2,0(r2)
    54dc:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
    54e0:	e0bffb17 	ldw	r2,-20(fp)
    54e4:	10000b1e 	bne	r2,zero,5514 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
    54e8:	e0bfff17 	ldw	r2,-4(fp)
    54ec:	10800317 	ldw	r2,12(r2)
    54f0:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
    54f4:	e0bffd17 	ldw	r2,-12(fp)
    54f8:	e0fffc17 	ldw	r3,-16(fp)
    54fc:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
    5500:	e0bffc17 	ldw	r2,-16(fp)
    5504:	10000b26 	beq	r2,zero,5534 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
    5508:	e0bffc17 	ldw	r2,-16(fp)
    550c:	10000115 	stw	zero,4(r2)
    5510:	00000806 	br	5534 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
    5514:	e0bffb17 	ldw	r2,-20(fp)
    5518:	e0fffc17 	ldw	r3,-16(fp)
    551c:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
    5520:	e0bffc17 	ldw	r2,-16(fp)
    5524:	10000326 	beq	r2,zero,5534 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
    5528:	e0bffc17 	ldw	r2,-16(fp)
    552c:	e0fffb17 	ldw	r3,-20(fp)
    5530:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
    5534:	e0bfff17 	ldw	r2,-4(fp)
    5538:	10800217 	ldw	r2,8(r2)
    553c:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
    5540:	e0bffe17 	ldw	r2,-8(fp)
    5544:	10000a15 	stw	zero,40(r2)
#endif
}
    5548:	0001883a 	nop
    554c:	e037883a 	mov	sp,fp
    5550:	df000017 	ldw	fp,0(sp)
    5554:	dec00104 	addi	sp,sp,4
    5558:	f800283a 	ret

0000555c <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
    555c:	defff404 	addi	sp,sp,-48
    5560:	df000b15 	stw	fp,44(sp)
    5564:	df000b04 	addi	fp,sp,44
    5568:	e13ffc15 	stw	r4,-16(fp)
    556c:	e17ffd15 	stw	r5,-12(fp)
    5570:	e1bffe15 	stw	r6,-8(fp)
    5574:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    5578:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    557c:	e0bfff17 	ldw	r2,-4(fp)
    5580:	1000021e 	bne	r2,zero,558c <OSMemCreate+0x30>
        return ((OS_MEM *)0);
    5584:	0005883a 	mov	r2,zero
    5588:	00006506 	br	5720 <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
    558c:	e0bffc17 	ldw	r2,-16(fp)
    5590:	1000051e 	bne	r2,zero,55a8 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
    5594:	e0bfff17 	ldw	r2,-4(fp)
    5598:	00c01884 	movi	r3,98
    559c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    55a0:	0005883a 	mov	r2,zero
    55a4:	00005e06 	br	5720 <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
    55a8:	e0bffc17 	ldw	r2,-16(fp)
    55ac:	108000cc 	andi	r2,r2,3
    55b0:	10000526 	beq	r2,zero,55c8 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
    55b4:	e0bfff17 	ldw	r2,-4(fp)
    55b8:	00c01884 	movi	r3,98
    55bc:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    55c0:	0005883a 	mov	r2,zero
    55c4:	00005606 	br	5720 <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
    55c8:	e0bffd17 	ldw	r2,-12(fp)
    55cc:	108000a8 	cmpgeui	r2,r2,2
    55d0:	1000051e 	bne	r2,zero,55e8 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
    55d4:	e0bfff17 	ldw	r2,-4(fp)
    55d8:	00c016c4 	movi	r3,91
    55dc:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    55e0:	0005883a 	mov	r2,zero
    55e4:	00004e06 	br	5720 <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
    55e8:	e0bffe17 	ldw	r2,-8(fp)
    55ec:	10800128 	cmpgeui	r2,r2,4
    55f0:	1000051e 	bne	r2,zero,5608 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
    55f4:	e0bfff17 	ldw	r2,-4(fp)
    55f8:	00c01704 	movi	r3,92
    55fc:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    5600:	0005883a 	mov	r2,zero
    5604:	00004606 	br	5720 <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5608:	0005303a 	rdctl	r2,status
    560c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5610:	e0fffb17 	ldw	r3,-20(fp)
    5614:	00bfff84 	movi	r2,-2
    5618:	1884703a 	and	r2,r3,r2
    561c:	1001703a 	wrctl	status,r2
  
  return context;
    5620:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    5624:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
    5628:	d0a7fd17 	ldw	r2,-24588(gp)
    562c:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
    5630:	d0a7fd17 	ldw	r2,-24588(gp)
    5634:	10000326 	beq	r2,zero,5644 <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
    5638:	d0a7fd17 	ldw	r2,-24588(gp)
    563c:	10800117 	ldw	r2,4(r2)
    5640:	d0a7fd15 	stw	r2,-24588(gp)
    5644:	e0bff817 	ldw	r2,-32(fp)
    5648:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    564c:	e0bff917 	ldw	r2,-28(fp)
    5650:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
    5654:	e0bffa17 	ldw	r2,-24(fp)
    5658:	1000051e 	bne	r2,zero,5670 <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
    565c:	e0bfff17 	ldw	r2,-4(fp)
    5660:	00c01684 	movi	r3,90
    5664:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    5668:	0005883a 	mov	r2,zero
    566c:	00002c06 	br	5720 <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    5670:	e0bffc17 	ldw	r2,-16(fp)
    5674:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
    5678:	e0fffc17 	ldw	r3,-16(fp)
    567c:	e0bffe17 	ldw	r2,-8(fp)
    5680:	1885883a 	add	r2,r3,r2
    5684:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
    5688:	e03ff715 	stw	zero,-36(fp)
    568c:	00000c06 	br	56c0 <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
    5690:	e0bff617 	ldw	r2,-40(fp)
    5694:	e0fff517 	ldw	r3,-44(fp)
    5698:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
    569c:	e0bff517 	ldw	r2,-44(fp)
    56a0:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    56a4:	e0fff517 	ldw	r3,-44(fp)
    56a8:	e0bffe17 	ldw	r2,-8(fp)
    56ac:	1885883a 	add	r2,r3,r2
    56b0:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
    56b4:	e0bff717 	ldw	r2,-36(fp)
    56b8:	10800044 	addi	r2,r2,1
    56bc:	e0bff715 	stw	r2,-36(fp)
    56c0:	e0bffd17 	ldw	r2,-12(fp)
    56c4:	10bfffc4 	addi	r2,r2,-1
    56c8:	e0fff717 	ldw	r3,-36(fp)
    56cc:	18bff036 	bltu	r3,r2,5690 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005690>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
    56d0:	e0bff617 	ldw	r2,-40(fp)
    56d4:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
    56d8:	e0bffa17 	ldw	r2,-24(fp)
    56dc:	e0fffc17 	ldw	r3,-16(fp)
    56e0:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
    56e4:	e0bffa17 	ldw	r2,-24(fp)
    56e8:	e0fffc17 	ldw	r3,-16(fp)
    56ec:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
    56f0:	e0bffa17 	ldw	r2,-24(fp)
    56f4:	e0fffd17 	ldw	r3,-12(fp)
    56f8:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
    56fc:	e0bffa17 	ldw	r2,-24(fp)
    5700:	e0fffd17 	ldw	r3,-12(fp)
    5704:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
    5708:	e0bffa17 	ldw	r2,-24(fp)
    570c:	e0fffe17 	ldw	r3,-8(fp)
    5710:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
    5714:	e0bfff17 	ldw	r2,-4(fp)
    5718:	10000005 	stb	zero,0(r2)
    return (pmem);
    571c:	e0bffa17 	ldw	r2,-24(fp)
}
    5720:	e037883a 	mov	sp,fp
    5724:	df000017 	ldw	fp,0(sp)
    5728:	dec00104 	addi	sp,sp,4
    572c:	f800283a 	ret

00005730 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
    5730:	defff804 	addi	sp,sp,-32
    5734:	df000715 	stw	fp,28(sp)
    5738:	df000704 	addi	fp,sp,28
    573c:	e13ffe15 	stw	r4,-8(fp)
    5740:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    5744:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    5748:	e0bfff17 	ldw	r2,-4(fp)
    574c:	1000021e 	bne	r2,zero,5758 <OSMemGet+0x28>
        return ((void *)0);
    5750:	0005883a 	mov	r2,zero
    5754:	00002e06 	br	5810 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
    5758:	e0bffe17 	ldw	r2,-8(fp)
    575c:	1000051e 	bne	r2,zero,5774 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
    5760:	e0bfff17 	ldw	r2,-4(fp)
    5764:	00c01804 	movi	r3,96
    5768:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    576c:	0005883a 	mov	r2,zero
    5770:	00002706 	br	5810 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5774:	0005303a 	rdctl	r2,status
    5778:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    577c:	e0fffd17 	ldw	r3,-12(fp)
    5780:	00bfff84 	movi	r2,-2
    5784:	1884703a 	and	r2,r3,r2
    5788:	1001703a 	wrctl	status,r2
  
  return context;
    578c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    5790:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
    5794:	e0bffe17 	ldw	r2,-8(fp)
    5798:	10800417 	ldw	r2,16(r2)
    579c:	10001426 	beq	r2,zero,57f0 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
    57a0:	e0bffe17 	ldw	r2,-8(fp)
    57a4:	10800117 	ldw	r2,4(r2)
    57a8:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
    57ac:	e0bffb17 	ldw	r2,-20(fp)
    57b0:	10c00017 	ldw	r3,0(r2)
    57b4:	e0bffe17 	ldw	r2,-8(fp)
    57b8:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
    57bc:	e0bffe17 	ldw	r2,-8(fp)
    57c0:	10800417 	ldw	r2,16(r2)
    57c4:	10ffffc4 	addi	r3,r2,-1
    57c8:	e0bffe17 	ldw	r2,-8(fp)
    57cc:	10c00415 	stw	r3,16(r2)
    57d0:	e0bff917 	ldw	r2,-28(fp)
    57d4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    57d8:	e0bffa17 	ldw	r2,-24(fp)
    57dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
    57e0:	e0bfff17 	ldw	r2,-4(fp)
    57e4:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
    57e8:	e0bffb17 	ldw	r2,-20(fp)
    57ec:	00000806 	br	5810 <OSMemGet+0xe0>
    57f0:	e0bff917 	ldw	r2,-28(fp)
    57f4:	e0bffc15 	stw	r2,-16(fp)
    57f8:	e0bffc17 	ldw	r2,-16(fp)
    57fc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
    5800:	e0bfff17 	ldw	r2,-4(fp)
    5804:	00c01744 	movi	r3,93
    5808:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
    580c:	0005883a 	mov	r2,zero
}
    5810:	e037883a 	mov	sp,fp
    5814:	df000017 	ldw	fp,0(sp)
    5818:	dec00104 	addi	sp,sp,4
    581c:	f800283a 	ret

00005820 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
    5820:	defff704 	addi	sp,sp,-36
    5824:	dfc00815 	stw	ra,32(sp)
    5828:	df000715 	stw	fp,28(sp)
    582c:	df000704 	addi	fp,sp,28
    5830:	e13ffd15 	stw	r4,-12(fp)
    5834:	e17ffe15 	stw	r5,-8(fp)
    5838:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    583c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    5840:	e0bfff17 	ldw	r2,-4(fp)
    5844:	1000021e 	bne	r2,zero,5850 <OSMemNameGet+0x30>
        return (0);
    5848:	0005883a 	mov	r2,zero
    584c:	00002b06 	br	58fc <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
    5850:	e0bffd17 	ldw	r2,-12(fp)
    5854:	1000051e 	bne	r2,zero,586c <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
    5858:	e0bfff17 	ldw	r2,-4(fp)
    585c:	00c01804 	movi	r3,96
    5860:	10c00005 	stb	r3,0(r2)
        return (0);
    5864:	0005883a 	mov	r2,zero
    5868:	00002406 	br	58fc <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    586c:	e0bffe17 	ldw	r2,-8(fp)
    5870:	1000051e 	bne	r2,zero,5888 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    5874:	e0bfff17 	ldw	r2,-4(fp)
    5878:	00c00304 	movi	r3,12
    587c:	10c00005 	stb	r3,0(r2)
        return (0);
    5880:	0005883a 	mov	r2,zero
    5884:	00001d06 	br	58fc <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    5888:	d0a80203 	ldbu	r2,-24568(gp)
    588c:	10803fcc 	andi	r2,r2,255
    5890:	10000526 	beq	r2,zero,58a8 <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
    5894:	e0bfff17 	ldw	r2,-4(fp)
    5898:	00c00444 	movi	r3,17
    589c:	10c00005 	stb	r3,0(r2)
        return (0);
    58a0:	0005883a 	mov	r2,zero
    58a4:	00001506 	br	58fc <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    58a8:	0005303a 	rdctl	r2,status
    58ac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    58b0:	e0fffb17 	ldw	r3,-20(fp)
    58b4:	00bfff84 	movi	r2,-2
    58b8:	1884703a 	and	r2,r3,r2
    58bc:	1001703a 	wrctl	status,r2
  
  return context;
    58c0:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
    58c4:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
    58c8:	e0bffd17 	ldw	r2,-12(fp)
    58cc:	10800504 	addi	r2,r2,20
    58d0:	100b883a 	mov	r5,r2
    58d4:	e13ffe17 	ldw	r4,-8(fp)
    58d8:	00037180 	call	3718 <OS_StrCopy>
    58dc:	e0bffa05 	stb	r2,-24(fp)
    58e0:	e0bff917 	ldw	r2,-28(fp)
    58e4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    58e8:	e0bffc17 	ldw	r2,-16(fp)
    58ec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    58f0:	e0bfff17 	ldw	r2,-4(fp)
    58f4:	10000005 	stb	zero,0(r2)
    return (len);
    58f8:	e0bffa03 	ldbu	r2,-24(fp)
}
    58fc:	e037883a 	mov	sp,fp
    5900:	dfc00117 	ldw	ra,4(sp)
    5904:	df000017 	ldw	fp,0(sp)
    5908:	dec00204 	addi	sp,sp,8
    590c:	f800283a 	ret

00005910 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
    5910:	defff604 	addi	sp,sp,-40
    5914:	dfc00915 	stw	ra,36(sp)
    5918:	df000815 	stw	fp,32(sp)
    591c:	df000804 	addi	fp,sp,32
    5920:	e13ffd15 	stw	r4,-12(fp)
    5924:	e17ffe15 	stw	r5,-8(fp)
    5928:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    592c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    5930:	e0bfff17 	ldw	r2,-4(fp)
    5934:	10003526 	beq	r2,zero,5a0c <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
    5938:	e0bffd17 	ldw	r2,-12(fp)
    593c:	1000041e 	bne	r2,zero,5950 <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
    5940:	e0bfff17 	ldw	r2,-4(fp)
    5944:	00c01804 	movi	r3,96
    5948:	10c00005 	stb	r3,0(r2)
        return;
    594c:	00003006 	br	5a10 <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    5950:	e0bffe17 	ldw	r2,-8(fp)
    5954:	1000041e 	bne	r2,zero,5968 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
    5958:	e0bfff17 	ldw	r2,-4(fp)
    595c:	00c00304 	movi	r3,12
    5960:	10c00005 	stb	r3,0(r2)
        return;
    5964:	00002a06 	br	5a10 <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    5968:	d0a80203 	ldbu	r2,-24568(gp)
    596c:	10803fcc 	andi	r2,r2,255
    5970:	10000426 	beq	r2,zero,5984 <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
    5974:	e0bfff17 	ldw	r2,-4(fp)
    5978:	00c00484 	movi	r3,18
    597c:	10c00005 	stb	r3,0(r2)
        return;
    5980:	00002306 	br	5a10 <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5984:	0005303a 	rdctl	r2,status
    5988:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    598c:	e0fffc17 	ldw	r3,-16(fp)
    5990:	00bfff84 	movi	r2,-2
    5994:	1884703a 	and	r2,r3,r2
    5998:	1001703a 	wrctl	status,r2
  
  return context;
    599c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    59a0:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
    59a4:	e13ffe17 	ldw	r4,-8(fp)
    59a8:	000378c0 	call	378c <OS_StrLen>
    59ac:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
    59b0:	e0bffa03 	ldbu	r2,-24(fp)
    59b4:	10800830 	cmpltui	r2,r2,32
    59b8:	1000081e 	bne	r2,zero,59dc <OSMemNameSet+0xcc>
    59bc:	e0bff817 	ldw	r2,-32(fp)
    59c0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    59c4:	e0bff917 	ldw	r2,-28(fp)
    59c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
    59cc:	e0bfff17 	ldw	r2,-4(fp)
    59d0:	00c018c4 	movi	r3,99
    59d4:	10c00005 	stb	r3,0(r2)
        return;
    59d8:	00000d06 	br	5a10 <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    59dc:	e0bffd17 	ldw	r2,-12(fp)
    59e0:	10800504 	addi	r2,r2,20
    59e4:	e17ffe17 	ldw	r5,-8(fp)
    59e8:	1009883a 	mov	r4,r2
    59ec:	00037180 	call	3718 <OS_StrCopy>
    59f0:	e0bff817 	ldw	r2,-32(fp)
    59f4:	e0bffb15 	stw	r2,-20(fp)
    59f8:	e0bffb17 	ldw	r2,-20(fp)
    59fc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    5a00:	e0bfff17 	ldw	r2,-4(fp)
    5a04:	10000005 	stb	zero,0(r2)
    5a08:	00000106 	br	5a10 <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
    5a0c:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
    5a10:	e037883a 	mov	sp,fp
    5a14:	dfc00117 	ldw	ra,4(sp)
    5a18:	df000017 	ldw	fp,0(sp)
    5a1c:	dec00204 	addi	sp,sp,8
    5a20:	f800283a 	ret

00005a24 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
    5a24:	defff904 	addi	sp,sp,-28
    5a28:	df000615 	stw	fp,24(sp)
    5a2c:	df000604 	addi	fp,sp,24
    5a30:	e13ffe15 	stw	r4,-8(fp)
    5a34:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    5a38:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
    5a3c:	e0bffe17 	ldw	r2,-8(fp)
    5a40:	1000021e 	bne	r2,zero,5a4c <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
    5a44:	00801804 	movi	r2,96
    5a48:	00002806 	br	5aec <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
    5a4c:	e0bfff17 	ldw	r2,-4(fp)
    5a50:	1000021e 	bne	r2,zero,5a5c <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
    5a54:	008017c4 	movi	r2,95
    5a58:	00002406 	br	5aec <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5a5c:	0005303a 	rdctl	r2,status
    5a60:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5a64:	e0fffd17 	ldw	r3,-12(fp)
    5a68:	00bfff84 	movi	r2,-2
    5a6c:	1884703a 	and	r2,r3,r2
    5a70:	1001703a 	wrctl	status,r2
  
  return context;
    5a74:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    5a78:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
    5a7c:	e0bffe17 	ldw	r2,-8(fp)
    5a80:	10c00417 	ldw	r3,16(r2)
    5a84:	e0bffe17 	ldw	r2,-8(fp)
    5a88:	10800317 	ldw	r2,12(r2)
    5a8c:	18800636 	bltu	r3,r2,5aa8 <OSMemPut+0x84>
    5a90:	e0bffa17 	ldw	r2,-24(fp)
    5a94:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5a98:	e0bffb17 	ldw	r2,-20(fp)
    5a9c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
    5aa0:	00801784 	movi	r2,94
    5aa4:	00001106 	br	5aec <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
    5aa8:	e0bffe17 	ldw	r2,-8(fp)
    5aac:	10c00117 	ldw	r3,4(r2)
    5ab0:	e0bfff17 	ldw	r2,-4(fp)
    5ab4:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
    5ab8:	e0bffe17 	ldw	r2,-8(fp)
    5abc:	e0ffff17 	ldw	r3,-4(fp)
    5ac0:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
    5ac4:	e0bffe17 	ldw	r2,-8(fp)
    5ac8:	10800417 	ldw	r2,16(r2)
    5acc:	10c00044 	addi	r3,r2,1
    5ad0:	e0bffe17 	ldw	r2,-8(fp)
    5ad4:	10c00415 	stw	r3,16(r2)
    5ad8:	e0bffa17 	ldw	r2,-24(fp)
    5adc:	e0bffc15 	stw	r2,-16(fp)
    5ae0:	e0bffc17 	ldw	r2,-16(fp)
    5ae4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
    5ae8:	0005883a 	mov	r2,zero
}
    5aec:	e037883a 	mov	sp,fp
    5af0:	df000017 	ldw	fp,0(sp)
    5af4:	dec00104 	addi	sp,sp,4
    5af8:	f800283a 	ret

00005afc <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
    5afc:	defffa04 	addi	sp,sp,-24
    5b00:	df000515 	stw	fp,20(sp)
    5b04:	df000504 	addi	fp,sp,20
    5b08:	e13ffe15 	stw	r4,-8(fp)
    5b0c:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    5b10:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
    5b14:	e0bffe17 	ldw	r2,-8(fp)
    5b18:	1000021e 	bne	r2,zero,5b24 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
    5b1c:	00801804 	movi	r2,96
    5b20:	00002c06 	br	5bd4 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
    5b24:	e0bfff17 	ldw	r2,-4(fp)
    5b28:	1000021e 	bne	r2,zero,5b34 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
    5b2c:	00801844 	movi	r2,97
    5b30:	00002806 	br	5bd4 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5b34:	0005303a 	rdctl	r2,status
    5b38:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5b3c:	e0fffc17 	ldw	r3,-16(fp)
    5b40:	00bfff84 	movi	r2,-2
    5b44:	1884703a 	and	r2,r3,r2
    5b48:	1001703a 	wrctl	status,r2
  
  return context;
    5b4c:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    5b50:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
    5b54:	e0bffe17 	ldw	r2,-8(fp)
    5b58:	10c00017 	ldw	r3,0(r2)
    5b5c:	e0bfff17 	ldw	r2,-4(fp)
    5b60:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
    5b64:	e0bffe17 	ldw	r2,-8(fp)
    5b68:	10c00117 	ldw	r3,4(r2)
    5b6c:	e0bfff17 	ldw	r2,-4(fp)
    5b70:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
    5b74:	e0bffe17 	ldw	r2,-8(fp)
    5b78:	10c00217 	ldw	r3,8(r2)
    5b7c:	e0bfff17 	ldw	r2,-4(fp)
    5b80:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
    5b84:	e0bffe17 	ldw	r2,-8(fp)
    5b88:	10c00317 	ldw	r3,12(r2)
    5b8c:	e0bfff17 	ldw	r2,-4(fp)
    5b90:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
    5b94:	e0bffe17 	ldw	r2,-8(fp)
    5b98:	10c00417 	ldw	r3,16(r2)
    5b9c:	e0bfff17 	ldw	r2,-4(fp)
    5ba0:	10c00415 	stw	r3,16(r2)
    5ba4:	e0bffb17 	ldw	r2,-20(fp)
    5ba8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5bac:	e0bffd17 	ldw	r2,-12(fp)
    5bb0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
    5bb4:	e0bfff17 	ldw	r2,-4(fp)
    5bb8:	10c00317 	ldw	r3,12(r2)
    5bbc:	e0bfff17 	ldw	r2,-4(fp)
    5bc0:	10800417 	ldw	r2,16(r2)
    5bc4:	1887c83a 	sub	r3,r3,r2
    5bc8:	e0bfff17 	ldw	r2,-4(fp)
    5bcc:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
    5bd0:	0005883a 	mov	r2,zero
}
    5bd4:	e037883a 	mov	sp,fp
    5bd8:	df000017 	ldw	fp,0(sp)
    5bdc:	dec00104 	addi	sp,sp,4
    5be0:	f800283a 	ret

00005be4 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
    5be4:	defffc04 	addi	sp,sp,-16
    5be8:	dfc00315 	stw	ra,12(sp)
    5bec:	df000215 	stw	fp,8(sp)
    5bf0:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    5bf4:	01430c04 	movi	r5,3120
    5bf8:	01000074 	movhi	r4,1
    5bfc:	2116fa04 	addi	r4,r4,23528
    5c00:	00035180 	call	3518 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    5c04:	00800074 	movhi	r2,1
    5c08:	1096fa04 	addi	r2,r2,23528
    5c0c:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
    5c10:	e03fff0d 	sth	zero,-4(fp)
    5c14:	00001306 	br	5c64 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
    5c18:	e0bfff0b 	ldhu	r2,-4(fp)
    5c1c:	10800044 	addi	r2,r2,1
    5c20:	10c00d24 	muli	r3,r2,52
    5c24:	00800074 	movhi	r2,1
    5c28:	1096fa04 	addi	r2,r2,23528
    5c2c:	1887883a 	add	r3,r3,r2
    5c30:	e0bffe17 	ldw	r2,-8(fp)
    5c34:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
    5c38:	e0bffe17 	ldw	r2,-8(fp)
    5c3c:	00c00fc4 	movi	r3,63
    5c40:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
    5c44:	e0bffe17 	ldw	r2,-8(fp)
    5c48:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
    5c4c:	e0bffe17 	ldw	r2,-8(fp)
    5c50:	10800d04 	addi	r2,r2,52
    5c54:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
    5c58:	e0bfff0b 	ldhu	r2,-4(fp)
    5c5c:	10800044 	addi	r2,r2,1
    5c60:	e0bfff0d 	sth	r2,-4(fp)
    5c64:	e0bfff0b 	ldhu	r2,-4(fp)
    5c68:	10800ef0 	cmpltui	r2,r2,59
    5c6c:	103fea1e 	bne	r2,zero,5c18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005c18>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
    5c70:	e0bffe17 	ldw	r2,-8(fp)
    5c74:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
    5c78:	e0bffe17 	ldw	r2,-8(fp)
    5c7c:	00c00fc4 	movi	r3,63
    5c80:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
    5c84:	e0bffe17 	ldw	r2,-8(fp)
    5c88:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
    5c8c:	00800074 	movhi	r2,1
    5c90:	1096fa04 	addi	r2,r2,23528
    5c94:	d0a7fd15 	stw	r2,-24588(gp)
#endif
}
    5c98:	0001883a 	nop
    5c9c:	e037883a 	mov	sp,fp
    5ca0:	dfc00117 	ldw	ra,4(sp)
    5ca4:	df000017 	ldw	fp,0(sp)
    5ca8:	dec00204 	addi	sp,sp,8
    5cac:	f800283a 	ret

00005cb0 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
    5cb0:	defff804 	addi	sp,sp,-32
    5cb4:	df000715 	stw	fp,28(sp)
    5cb8:	df000704 	addi	fp,sp,28
    5cbc:	e13ffe15 	stw	r4,-8(fp)
    5cc0:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    5cc4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    5cc8:	e0bfff17 	ldw	r2,-4(fp)
    5ccc:	1000021e 	bne	r2,zero,5cd8 <OSQAccept+0x28>
        return ((void *)0);
    5cd0:	0005883a 	mov	r2,zero
    5cd4:	00004206 	br	5de0 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
    5cd8:	e0bffe17 	ldw	r2,-8(fp)
    5cdc:	1000051e 	bne	r2,zero,5cf4 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
    5ce0:	e0bfff17 	ldw	r2,-4(fp)
    5ce4:	00c00104 	movi	r3,4
    5ce8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    5cec:	0005883a 	mov	r2,zero
    5cf0:	00003b06 	br	5de0 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
    5cf4:	e0bffe17 	ldw	r2,-8(fp)
    5cf8:	10800003 	ldbu	r2,0(r2)
    5cfc:	10803fcc 	andi	r2,r2,255
    5d00:	108000a0 	cmpeqi	r2,r2,2
    5d04:	1000051e 	bne	r2,zero,5d1c <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
    5d08:	e0bfff17 	ldw	r2,-4(fp)
    5d0c:	00c00044 	movi	r3,1
    5d10:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    5d14:	0005883a 	mov	r2,zero
    5d18:	00003106 	br	5de0 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5d1c:	0005303a 	rdctl	r2,status
    5d20:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5d24:	e0fffd17 	ldw	r3,-12(fp)
    5d28:	00bfff84 	movi	r2,-2
    5d2c:	1884703a 	and	r2,r3,r2
    5d30:	1001703a 	wrctl	status,r2
  
  return context;
    5d34:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    5d38:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
    5d3c:	e0bffe17 	ldw	r2,-8(fp)
    5d40:	10800117 	ldw	r2,4(r2)
    5d44:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
    5d48:	e0bffc17 	ldw	r2,-16(fp)
    5d4c:	1080058b 	ldhu	r2,22(r2)
    5d50:	10bfffcc 	andi	r2,r2,65535
    5d54:	10001926 	beq	r2,zero,5dbc <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
    5d58:	e0bffc17 	ldw	r2,-16(fp)
    5d5c:	10800417 	ldw	r2,16(r2)
    5d60:	11000104 	addi	r4,r2,4
    5d64:	e0fffc17 	ldw	r3,-16(fp)
    5d68:	19000415 	stw	r4,16(r3)
    5d6c:	10800017 	ldw	r2,0(r2)
    5d70:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
    5d74:	e0bffc17 	ldw	r2,-16(fp)
    5d78:	1080058b 	ldhu	r2,22(r2)
    5d7c:	10bfffc4 	addi	r2,r2,-1
    5d80:	1007883a 	mov	r3,r2
    5d84:	e0bffc17 	ldw	r2,-16(fp)
    5d88:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
    5d8c:	e0bffc17 	ldw	r2,-16(fp)
    5d90:	10c00417 	ldw	r3,16(r2)
    5d94:	e0bffc17 	ldw	r2,-16(fp)
    5d98:	10800217 	ldw	r2,8(r2)
    5d9c:	1880041e 	bne	r3,r2,5db0 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
    5da0:	e0bffc17 	ldw	r2,-16(fp)
    5da4:	10c00117 	ldw	r3,4(r2)
    5da8:	e0bffc17 	ldw	r2,-16(fp)
    5dac:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
    5db0:	e0bfff17 	ldw	r2,-4(fp)
    5db4:	10000005 	stb	zero,0(r2)
    5db8:	00000406 	br	5dcc <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
    5dbc:	e0bfff17 	ldw	r2,-4(fp)
    5dc0:	00c007c4 	movi	r3,31
    5dc4:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
    5dc8:	e03ff915 	stw	zero,-28(fp)
    5dcc:	e0bffa17 	ldw	r2,-24(fp)
    5dd0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5dd4:	e0bffb17 	ldw	r2,-20(fp)
    5dd8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
    5ddc:	e0bff917 	ldw	r2,-28(fp)
}
    5de0:	e037883a 	mov	sp,fp
    5de4:	df000017 	ldw	fp,0(sp)
    5de8:	dec00104 	addi	sp,sp,4
    5dec:	f800283a 	ret

00005df0 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
    5df0:	defff404 	addi	sp,sp,-48
    5df4:	dfc00b15 	stw	ra,44(sp)
    5df8:	df000a15 	stw	fp,40(sp)
    5dfc:	df000a04 	addi	fp,sp,40
    5e00:	e13ffe15 	stw	r4,-8(fp)
    5e04:	2805883a 	mov	r2,r5
    5e08:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    5e0c:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
    5e10:	d0a80203 	ldbu	r2,-24568(gp)
    5e14:	10803fcc 	andi	r2,r2,255
    5e18:	10000226 	beq	r2,zero,5e24 <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
    5e1c:	0005883a 	mov	r2,zero
    5e20:	00005906 	br	5f88 <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5e24:	0005303a 	rdctl	r2,status
    5e28:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5e2c:	e0fffd17 	ldw	r3,-12(fp)
    5e30:	00bfff84 	movi	r2,-2
    5e34:	1884703a 	and	r2,r3,r2
    5e38:	1001703a 	wrctl	status,r2
  
  return context;
    5e3c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    5e40:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
    5e44:	d0a80117 	ldw	r2,-24572(gp)
    5e48:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
    5e4c:	d0a80117 	ldw	r2,-24572(gp)
    5e50:	10000326 	beq	r2,zero,5e60 <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
    5e54:	d0a80117 	ldw	r2,-24572(gp)
    5e58:	10800117 	ldw	r2,4(r2)
    5e5c:	d0a80115 	stw	r2,-24572(gp)
    5e60:	e0bff717 	ldw	r2,-36(fp)
    5e64:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5e68:	e0bff817 	ldw	r2,-32(fp)
    5e6c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
    5e70:	e0bff617 	ldw	r2,-40(fp)
    5e74:	10004326 	beq	r2,zero,5f84 <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5e78:	0005303a 	rdctl	r2,status
    5e7c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5e80:	e0fff917 	ldw	r3,-28(fp)
    5e84:	00bfff84 	movi	r2,-2
    5e88:	1884703a 	and	r2,r3,r2
    5e8c:	1001703a 	wrctl	status,r2
  
  return context;
    5e90:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
    5e94:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
    5e98:	d0a7ff17 	ldw	r2,-24580(gp)
    5e9c:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
    5ea0:	e0bffb17 	ldw	r2,-20(fp)
    5ea4:	10002d26 	beq	r2,zero,5f5c <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
    5ea8:	d0a7ff17 	ldw	r2,-24580(gp)
    5eac:	10800017 	ldw	r2,0(r2)
    5eb0:	d0a7ff15 	stw	r2,-24580(gp)
    5eb4:	e0bff717 	ldw	r2,-36(fp)
    5eb8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5ebc:	e0bffa17 	ldw	r2,-24(fp)
    5ec0:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
    5ec4:	e0bffb17 	ldw	r2,-20(fp)
    5ec8:	e0fffe17 	ldw	r3,-8(fp)
    5ecc:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
    5ed0:	e0bfff0b 	ldhu	r2,-4(fp)
    5ed4:	1085883a 	add	r2,r2,r2
    5ed8:	1085883a 	add	r2,r2,r2
    5edc:	1007883a 	mov	r3,r2
    5ee0:	e0bffe17 	ldw	r2,-8(fp)
    5ee4:	10c7883a 	add	r3,r2,r3
    5ee8:	e0bffb17 	ldw	r2,-20(fp)
    5eec:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
    5ef0:	e0bffb17 	ldw	r2,-20(fp)
    5ef4:	e0fffe17 	ldw	r3,-8(fp)
    5ef8:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
    5efc:	e0bffb17 	ldw	r2,-20(fp)
    5f00:	e0fffe17 	ldw	r3,-8(fp)
    5f04:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
    5f08:	e0bffb17 	ldw	r2,-20(fp)
    5f0c:	e0ffff0b 	ldhu	r3,-4(fp)
    5f10:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
    5f14:	e0bffb17 	ldw	r2,-20(fp)
    5f18:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
    5f1c:	e0bff617 	ldw	r2,-40(fp)
    5f20:	00c00084 	movi	r3,2
    5f24:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
    5f28:	e0bff617 	ldw	r2,-40(fp)
    5f2c:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
    5f30:	e0bff617 	ldw	r2,-40(fp)
    5f34:	e0fffb17 	ldw	r3,-20(fp)
    5f38:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
    5f3c:	e0bff617 	ldw	r2,-40(fp)
    5f40:	00c00fc4 	movi	r3,63
    5f44:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
    5f48:	e0bff617 	ldw	r2,-40(fp)
    5f4c:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
    5f50:	e13ff617 	ldw	r4,-40(fp)
    5f54:	00031380 	call	3138 <OS_EventWaitListInit>
    5f58:	00000a06 	br	5f84 <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
    5f5c:	d0e80117 	ldw	r3,-24572(gp)
    5f60:	e0bff617 	ldw	r2,-40(fp)
    5f64:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
    5f68:	e0bff617 	ldw	r2,-40(fp)
    5f6c:	d0a80115 	stw	r2,-24572(gp)
    5f70:	e0bff717 	ldw	r2,-36(fp)
    5f74:	e0bffc15 	stw	r2,-16(fp)
    5f78:	e0bffc17 	ldw	r2,-16(fp)
    5f7c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
    5f80:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
    5f84:	e0bff617 	ldw	r2,-40(fp)
}
    5f88:	e037883a 	mov	sp,fp
    5f8c:	dfc00117 	ldw	ra,4(sp)
    5f90:	df000017 	ldw	fp,0(sp)
    5f94:	dec00204 	addi	sp,sp,8
    5f98:	f800283a 	ret

00005f9c <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    5f9c:	defff204 	addi	sp,sp,-56
    5fa0:	dfc00d15 	stw	ra,52(sp)
    5fa4:	df000c15 	stw	fp,48(sp)
    5fa8:	df000c04 	addi	fp,sp,48
    5fac:	e13ffd15 	stw	r4,-12(fp)
    5fb0:	2805883a 	mov	r2,r5
    5fb4:	e1bfff15 	stw	r6,-4(fp)
    5fb8:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    5fbc:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    5fc0:	e0bfff17 	ldw	r2,-4(fp)
    5fc4:	1000021e 	bne	r2,zero,5fd0 <OSQDel+0x34>
        return (pevent);
    5fc8:	e0bffd17 	ldw	r2,-12(fp)
    5fcc:	00008e06 	br	6208 <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    5fd0:	e0bffd17 	ldw	r2,-12(fp)
    5fd4:	1000051e 	bne	r2,zero,5fec <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    5fd8:	e0bfff17 	ldw	r2,-4(fp)
    5fdc:	00c00104 	movi	r3,4
    5fe0:	10c00005 	stb	r3,0(r2)
        return (pevent);
    5fe4:	e0bffd17 	ldw	r2,-12(fp)
    5fe8:	00008706 	br	6208 <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
    5fec:	e0bffd17 	ldw	r2,-12(fp)
    5ff0:	10800003 	ldbu	r2,0(r2)
    5ff4:	10803fcc 	andi	r2,r2,255
    5ff8:	108000a0 	cmpeqi	r2,r2,2
    5ffc:	1000051e 	bne	r2,zero,6014 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    6000:	e0bfff17 	ldw	r2,-4(fp)
    6004:	00c00044 	movi	r3,1
    6008:	10c00005 	stb	r3,0(r2)
        return (pevent);
    600c:	e0bffd17 	ldw	r2,-12(fp)
    6010:	00007d06 	br	6208 <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    6014:	d0a80203 	ldbu	r2,-24568(gp)
    6018:	10803fcc 	andi	r2,r2,255
    601c:	10000526 	beq	r2,zero,6034 <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
    6020:	e0bfff17 	ldw	r2,-4(fp)
    6024:	00c003c4 	movi	r3,15
    6028:	10c00005 	stb	r3,0(r2)
        return (pevent);
    602c:	e0bffd17 	ldw	r2,-12(fp)
    6030:	00007506 	br	6208 <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6034:	0005303a 	rdctl	r2,status
    6038:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    603c:	e0fffc17 	ldw	r3,-16(fp)
    6040:	00bfff84 	movi	r2,-2
    6044:	1884703a 	and	r2,r3,r2
    6048:	1001703a 	wrctl	status,r2
  
  return context;
    604c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    6050:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
    6054:	e0bffd17 	ldw	r2,-12(fp)
    6058:	10800283 	ldbu	r2,10(r2)
    605c:	10803fcc 	andi	r2,r2,255
    6060:	10000326 	beq	r2,zero,6070 <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    6064:	00800044 	movi	r2,1
    6068:	e0bff405 	stb	r2,-48(fp)
    606c:	00000106 	br	6074 <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    6070:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
    6074:	e0bffe03 	ldbu	r2,-8(fp)
    6078:	10000326 	beq	r2,zero,6088 <OSQDel+0xec>
    607c:	10800060 	cmpeqi	r2,r2,1
    6080:	1000301e 	bne	r2,zero,6144 <OSQDel+0x1a8>
    6084:	00005506 	br	61dc <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
    6088:	e0bff403 	ldbu	r2,-48(fp)
    608c:	10001e1e 	bne	r2,zero,6108 <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
    6090:	e0bffd17 	ldw	r2,-12(fp)
    6094:	00c00fc4 	movi	r3,63
    6098:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
    609c:	e0bffd17 	ldw	r2,-12(fp)
    60a0:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
    60a4:	e0bffd17 	ldw	r2,-12(fp)
    60a8:	10800117 	ldw	r2,4(r2)
    60ac:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
    60b0:	d0e7ff17 	ldw	r3,-24580(gp)
    60b4:	e0bff817 	ldw	r2,-32(fp)
    60b8:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
    60bc:	e0bff817 	ldw	r2,-32(fp)
    60c0:	d0a7ff15 	stw	r2,-24580(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    60c4:	e0bffd17 	ldw	r2,-12(fp)
    60c8:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
    60cc:	d0e80117 	ldw	r3,-24572(gp)
    60d0:	e0bffd17 	ldw	r2,-12(fp)
    60d4:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
    60d8:	e0bffd17 	ldw	r2,-12(fp)
    60dc:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
    60e0:	e0bffd17 	ldw	r2,-12(fp)
    60e4:	d0a80115 	stw	r2,-24572(gp)
    60e8:	e0bff617 	ldw	r2,-40(fp)
    60ec:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    60f0:	e0bff717 	ldw	r2,-36(fp)
    60f4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
    60f8:	e0bfff17 	ldw	r2,-4(fp)
    60fc:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
    6100:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
    6104:	00003f06 	br	6204 <OSQDel+0x268>
    6108:	e0bff617 	ldw	r2,-40(fp)
    610c:	e0bff915 	stw	r2,-28(fp)
    6110:	e0bff917 	ldw	r2,-28(fp)
    6114:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
    6118:	e0bfff17 	ldw	r2,-4(fp)
    611c:	00c01244 	movi	r3,73
    6120:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
    6124:	e0bffd17 	ldw	r2,-12(fp)
    6128:	e0bff515 	stw	r2,-44(fp)
             }
             break;
    612c:	00003506 	br	6204 <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
    6130:	000f883a 	mov	r7,zero
    6134:	01800104 	movi	r6,4
    6138:	000b883a 	mov	r5,zero
    613c:	e13ffd17 	ldw	r4,-12(fp)
    6140:	0002b880 	call	2b88 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
    6144:	e0bffd17 	ldw	r2,-12(fp)
    6148:	10800283 	ldbu	r2,10(r2)
    614c:	10803fcc 	andi	r2,r2,255
    6150:	103ff71e 	bne	r2,zero,6130 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006130>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
    6154:	e0bffd17 	ldw	r2,-12(fp)
    6158:	00c00fc4 	movi	r3,63
    615c:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
    6160:	e0bffd17 	ldw	r2,-12(fp)
    6164:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
    6168:	e0bffd17 	ldw	r2,-12(fp)
    616c:	10800117 	ldw	r2,4(r2)
    6170:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
    6174:	d0e7ff17 	ldw	r3,-24580(gp)
    6178:	e0bff817 	ldw	r2,-32(fp)
    617c:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
    6180:	e0bff817 	ldw	r2,-32(fp)
    6184:	d0a7ff15 	stw	r2,-24580(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    6188:	e0bffd17 	ldw	r2,-12(fp)
    618c:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
    6190:	d0e80117 	ldw	r3,-24572(gp)
    6194:	e0bffd17 	ldw	r2,-12(fp)
    6198:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
    619c:	e0bffd17 	ldw	r2,-12(fp)
    61a0:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
    61a4:	e0bffd17 	ldw	r2,-12(fp)
    61a8:	d0a80115 	stw	r2,-24572(gp)
    61ac:	e0bff617 	ldw	r2,-40(fp)
    61b0:	e0bffa15 	stw	r2,-24(fp)
    61b4:	e0bffa17 	ldw	r2,-24(fp)
    61b8:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    61bc:	e0bff403 	ldbu	r2,-48(fp)
    61c0:	10800058 	cmpnei	r2,r2,1
    61c4:	1000011e 	bne	r2,zero,61cc <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    61c8:	00035d40 	call	35d4 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
    61cc:	e0bfff17 	ldw	r2,-4(fp)
    61d0:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
    61d4:	e03ff515 	stw	zero,-44(fp)
             break;
    61d8:	00000a06 	br	6204 <OSQDel+0x268>
    61dc:	e0bff617 	ldw	r2,-40(fp)
    61e0:	e0bffb15 	stw	r2,-20(fp)
    61e4:	e0bffb17 	ldw	r2,-20(fp)
    61e8:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
    61ec:	e0bfff17 	ldw	r2,-4(fp)
    61f0:	00c001c4 	movi	r3,7
    61f4:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
    61f8:	e0bffd17 	ldw	r2,-12(fp)
    61fc:	e0bff515 	stw	r2,-44(fp)
             break;
    6200:	0001883a 	nop
    }
    return (pevent_return);
    6204:	e0bff517 	ldw	r2,-44(fp)
}
    6208:	e037883a 	mov	sp,fp
    620c:	dfc00117 	ldw	ra,4(sp)
    6210:	df000017 	ldw	fp,0(sp)
    6214:	dec00204 	addi	sp,sp,8
    6218:	f800283a 	ret

0000621c <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
    621c:	defffa04 	addi	sp,sp,-24
    6220:	df000515 	stw	fp,20(sp)
    6224:	df000504 	addi	fp,sp,20
    6228:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    622c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    6230:	e0bfff17 	ldw	r2,-4(fp)
    6234:	1000021e 	bne	r2,zero,6240 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
    6238:	00800104 	movi	r2,4
    623c:	00002106 	br	62c4 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
    6240:	e0bfff17 	ldw	r2,-4(fp)
    6244:	10800003 	ldbu	r2,0(r2)
    6248:	10803fcc 	andi	r2,r2,255
    624c:	108000a0 	cmpeqi	r2,r2,2
    6250:	1000021e 	bne	r2,zero,625c <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
    6254:	00800044 	movi	r2,1
    6258:	00001a06 	br	62c4 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    625c:	0005303a 	rdctl	r2,status
    6260:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6264:	e0fffd17 	ldw	r3,-12(fp)
    6268:	00bfff84 	movi	r2,-2
    626c:	1884703a 	and	r2,r3,r2
    6270:	1001703a 	wrctl	status,r2
  
  return context;
    6274:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    6278:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
    627c:	e0bfff17 	ldw	r2,-4(fp)
    6280:	10800117 	ldw	r2,4(r2)
    6284:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
    6288:	e0bffc17 	ldw	r2,-16(fp)
    628c:	10c00117 	ldw	r3,4(r2)
    6290:	e0bffc17 	ldw	r2,-16(fp)
    6294:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
    6298:	e0bffc17 	ldw	r2,-16(fp)
    629c:	10c00117 	ldw	r3,4(r2)
    62a0:	e0bffc17 	ldw	r2,-16(fp)
    62a4:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
    62a8:	e0bffc17 	ldw	r2,-16(fp)
    62ac:	1000058d 	sth	zero,22(r2)
    62b0:	e0bffb17 	ldw	r2,-20(fp)
    62b4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    62b8:	e0bffe17 	ldw	r2,-8(fp)
    62bc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    62c0:	0005883a 	mov	r2,zero
}
    62c4:	e037883a 	mov	sp,fp
    62c8:	df000017 	ldw	fp,0(sp)
    62cc:	dec00104 	addi	sp,sp,4
    62d0:	f800283a 	ret

000062d4 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
    62d4:	defff304 	addi	sp,sp,-52
    62d8:	dfc00c15 	stw	ra,48(sp)
    62dc:	df000b15 	stw	fp,44(sp)
    62e0:	df000b04 	addi	fp,sp,44
    62e4:	e13ffd15 	stw	r4,-12(fp)
    62e8:	2805883a 	mov	r2,r5
    62ec:	e1bfff15 	stw	r6,-4(fp)
    62f0:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    62f4:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    62f8:	e0bfff17 	ldw	r2,-4(fp)
    62fc:	1000021e 	bne	r2,zero,6308 <OSQPend+0x34>
        return ((void *)0);
    6300:	0005883a 	mov	r2,zero
    6304:	00009106 	br	654c <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
    6308:	e0bffd17 	ldw	r2,-12(fp)
    630c:	1000051e 	bne	r2,zero,6324 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    6310:	e0bfff17 	ldw	r2,-4(fp)
    6314:	00c00104 	movi	r3,4
    6318:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    631c:	0005883a 	mov	r2,zero
    6320:	00008a06 	br	654c <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
    6324:	e0bffd17 	ldw	r2,-12(fp)
    6328:	10800003 	ldbu	r2,0(r2)
    632c:	10803fcc 	andi	r2,r2,255
    6330:	108000a0 	cmpeqi	r2,r2,2
    6334:	1000051e 	bne	r2,zero,634c <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    6338:	e0bfff17 	ldw	r2,-4(fp)
    633c:	00c00044 	movi	r3,1
    6340:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    6344:	0005883a 	mov	r2,zero
    6348:	00008006 	br	654c <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
    634c:	d0a80203 	ldbu	r2,-24568(gp)
    6350:	10803fcc 	andi	r2,r2,255
    6354:	10000526 	beq	r2,zero,636c <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
    6358:	e0bfff17 	ldw	r2,-4(fp)
    635c:	00c00084 	movi	r3,2
    6360:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    6364:	0005883a 	mov	r2,zero
    6368:	00007806 	br	654c <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
    636c:	d0a7f403 	ldbu	r2,-24624(gp)
    6370:	10803fcc 	andi	r2,r2,255
    6374:	10000526 	beq	r2,zero,638c <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
    6378:	e0bfff17 	ldw	r2,-4(fp)
    637c:	00c00344 	movi	r3,13
    6380:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    6384:	0005883a 	mov	r2,zero
    6388:	00007006 	br	654c <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    638c:	0005303a 	rdctl	r2,status
    6390:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6394:	e0fffc17 	ldw	r3,-16(fp)
    6398:	00bfff84 	movi	r2,-2
    639c:	1884703a 	and	r2,r3,r2
    63a0:	1001703a 	wrctl	status,r2
  
  return context;
    63a4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    63a8:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
    63ac:	e0bffd17 	ldw	r2,-12(fp)
    63b0:	10800117 	ldw	r2,4(r2)
    63b4:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
    63b8:	e0bff817 	ldw	r2,-32(fp)
    63bc:	1080058b 	ldhu	r2,22(r2)
    63c0:	10bfffcc 	andi	r2,r2,65535
    63c4:	10001e26 	beq	r2,zero,6440 <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
    63c8:	e0bff817 	ldw	r2,-32(fp)
    63cc:	10800417 	ldw	r2,16(r2)
    63d0:	11000104 	addi	r4,r2,4
    63d4:	e0fff817 	ldw	r3,-32(fp)
    63d8:	19000415 	stw	r4,16(r3)
    63dc:	10800017 	ldw	r2,0(r2)
    63e0:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
    63e4:	e0bff817 	ldw	r2,-32(fp)
    63e8:	1080058b 	ldhu	r2,22(r2)
    63ec:	10bfffc4 	addi	r2,r2,-1
    63f0:	1007883a 	mov	r3,r2
    63f4:	e0bff817 	ldw	r2,-32(fp)
    63f8:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
    63fc:	e0bff817 	ldw	r2,-32(fp)
    6400:	10c00417 	ldw	r3,16(r2)
    6404:	e0bff817 	ldw	r2,-32(fp)
    6408:	10800217 	ldw	r2,8(r2)
    640c:	1880041e 	bne	r3,r2,6420 <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
    6410:	e0bff817 	ldw	r2,-32(fp)
    6414:	10c00117 	ldw	r3,4(r2)
    6418:	e0bff817 	ldw	r2,-32(fp)
    641c:	10c00415 	stw	r3,16(r2)
    6420:	e0bff617 	ldw	r2,-40(fp)
    6424:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6428:	e0bff717 	ldw	r2,-36(fp)
    642c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
    6430:	e0bfff17 	ldw	r2,-4(fp)
    6434:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
    6438:	e0bff517 	ldw	r2,-44(fp)
    643c:	00004306 	br	654c <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
    6440:	d0a80317 	ldw	r2,-24564(gp)
    6444:	d0e80317 	ldw	r3,-24564(gp)
    6448:	18c00c03 	ldbu	r3,48(r3)
    644c:	18c00114 	ori	r3,r3,4
    6450:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    6454:	d0a80317 	ldw	r2,-24564(gp)
    6458:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
    645c:	d0a80317 	ldw	r2,-24564(gp)
    6460:	e0fffe0b 	ldhu	r3,-8(fp)
    6464:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
    6468:	e13ffd17 	ldw	r4,-12(fp)
    646c:	0002d200 	call	2d20 <OS_EventTaskWait>
    6470:	e0bff617 	ldw	r2,-40(fp)
    6474:	e0bffb15 	stw	r2,-20(fp)
    6478:	e0bffb17 	ldw	r2,-20(fp)
    647c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
    6480:	00035d40 	call	35d4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6484:	0005303a 	rdctl	r2,status
    6488:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    648c:	e0fff917 	ldw	r3,-28(fp)
    6490:	00bfff84 	movi	r2,-2
    6494:	1884703a 	and	r2,r3,r2
    6498:	1001703a 	wrctl	status,r2
  
  return context;
    649c:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
    64a0:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
    64a4:	d0a80317 	ldw	r2,-24564(gp)
    64a8:	10800c43 	ldbu	r2,49(r2)
    64ac:	10803fcc 	andi	r2,r2,255
    64b0:	10000326 	beq	r2,zero,64c0 <OSQPend+0x1ec>
    64b4:	108000a0 	cmpeqi	r2,r2,2
    64b8:	1000071e 	bne	r2,zero,64d8 <OSQPend+0x204>
    64bc:	00000b06 	br	64ec <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
    64c0:	d0a80317 	ldw	r2,-24564(gp)
    64c4:	10800917 	ldw	r2,36(r2)
    64c8:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
    64cc:	e0bfff17 	ldw	r2,-4(fp)
    64d0:	10000005 	stb	zero,0(r2)
             break;
    64d4:	00000e06 	br	6510 <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
    64d8:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
    64dc:	e0bfff17 	ldw	r2,-4(fp)
    64e0:	00c00384 	movi	r3,14
    64e4:	10c00005 	stb	r3,0(r2)
             break;
    64e8:	00000906 	br	6510 <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
    64ec:	d0a80317 	ldw	r2,-24564(gp)
    64f0:	e17ffd17 	ldw	r5,-12(fp)
    64f4:	1009883a 	mov	r4,r2
    64f8:	0002f800 	call	2f80 <OS_EventTaskRemove>
             pmsg = (void *)0;
    64fc:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
    6500:	e0bfff17 	ldw	r2,-4(fp)
    6504:	00c00284 	movi	r3,10
    6508:	10c00005 	stb	r3,0(r2)
             break;
    650c:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
    6510:	d0a80317 	ldw	r2,-24564(gp)
    6514:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
    6518:	d0a80317 	ldw	r2,-24564(gp)
    651c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
    6520:	d0a80317 	ldw	r2,-24564(gp)
    6524:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    6528:	d0a80317 	ldw	r2,-24564(gp)
    652c:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
    6530:	d0a80317 	ldw	r2,-24564(gp)
    6534:	10000915 	stw	zero,36(r2)
    6538:	e0bff617 	ldw	r2,-40(fp)
    653c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6540:	e0bffa17 	ldw	r2,-24(fp)
    6544:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
    6548:	e0bff517 	ldw	r2,-44(fp)
}
    654c:	e037883a 	mov	sp,fp
    6550:	dfc00117 	ldw	ra,4(sp)
    6554:	df000017 	ldw	fp,0(sp)
    6558:	dec00204 	addi	sp,sp,8
    655c:	f800283a 	ret

00006560 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    6560:	defff604 	addi	sp,sp,-40
    6564:	dfc00915 	stw	ra,36(sp)
    6568:	df000815 	stw	fp,32(sp)
    656c:	df000804 	addi	fp,sp,32
    6570:	e13ffd15 	stw	r4,-12(fp)
    6574:	2805883a 	mov	r2,r5
    6578:	e1bfff15 	stw	r6,-4(fp)
    657c:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    6580:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    6584:	e0bfff17 	ldw	r2,-4(fp)
    6588:	1000021e 	bne	r2,zero,6594 <OSQPendAbort+0x34>
        return (0);
    658c:	0005883a 	mov	r2,zero
    6590:	00004906 	br	66b8 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    6594:	e0bffd17 	ldw	r2,-12(fp)
    6598:	1000051e 	bne	r2,zero,65b0 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    659c:	e0bfff17 	ldw	r2,-4(fp)
    65a0:	00c00104 	movi	r3,4
    65a4:	10c00005 	stb	r3,0(r2)
        return (0);
    65a8:	0005883a 	mov	r2,zero
    65ac:	00004206 	br	66b8 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
    65b0:	e0bffd17 	ldw	r2,-12(fp)
    65b4:	10800003 	ldbu	r2,0(r2)
    65b8:	10803fcc 	andi	r2,r2,255
    65bc:	108000a0 	cmpeqi	r2,r2,2
    65c0:	1000051e 	bne	r2,zero,65d8 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    65c4:	e0bfff17 	ldw	r2,-4(fp)
    65c8:	00c00044 	movi	r3,1
    65cc:	10c00005 	stb	r3,0(r2)
        return (0);
    65d0:	0005883a 	mov	r2,zero
    65d4:	00003806 	br	66b8 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    65d8:	0005303a 	rdctl	r2,status
    65dc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    65e0:	e0fffc17 	ldw	r3,-16(fp)
    65e4:	00bfff84 	movi	r2,-2
    65e8:	1884703a 	and	r2,r3,r2
    65ec:	1001703a 	wrctl	status,r2
  
  return context;
    65f0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    65f4:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
    65f8:	e0bffd17 	ldw	r2,-12(fp)
    65fc:	10800283 	ldbu	r2,10(r2)
    6600:	10803fcc 	andi	r2,r2,255
    6604:	10002526 	beq	r2,zero,669c <OSQPendAbort+0x13c>
        nbr_tasks = 0;
    6608:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
    660c:	e0bffe03 	ldbu	r2,-8(fp)
    6610:	10800060 	cmpeqi	r2,r2,1
    6614:	10000e26 	beq	r2,zero,6650 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
    6618:	00000806 	br	663c <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
    661c:	01c00084 	movi	r7,2
    6620:	01800104 	movi	r6,4
    6624:	000b883a 	mov	r5,zero
    6628:	e13ffd17 	ldw	r4,-12(fp)
    662c:	0002b880 	call	2b88 <OS_EventTaskRdy>
                     nbr_tasks++;
    6630:	e0bff803 	ldbu	r2,-32(fp)
    6634:	10800044 	addi	r2,r2,1
    6638:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
    663c:	e0bffd17 	ldw	r2,-12(fp)
    6640:	10800283 	ldbu	r2,10(r2)
    6644:	10803fcc 	andi	r2,r2,255
    6648:	103ff41e 	bne	r2,zero,661c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700661c>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
    664c:	00000906 	br	6674 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
    6650:	01c00084 	movi	r7,2
    6654:	01800104 	movi	r6,4
    6658:	000b883a 	mov	r5,zero
    665c:	e13ffd17 	ldw	r4,-12(fp)
    6660:	0002b880 	call	2b88 <OS_EventTaskRdy>
                 nbr_tasks++;
    6664:	e0bff803 	ldbu	r2,-32(fp)
    6668:	10800044 	addi	r2,r2,1
    666c:	e0bff805 	stb	r2,-32(fp)
                 break;
    6670:	0001883a 	nop
    6674:	e0bff917 	ldw	r2,-28(fp)
    6678:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    667c:	e0bffa17 	ldw	r2,-24(fp)
    6680:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
    6684:	00035d40 	call	35d4 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
    6688:	e0bfff17 	ldw	r2,-4(fp)
    668c:	00c00384 	movi	r3,14
    6690:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
    6694:	e0bff803 	ldbu	r2,-32(fp)
    6698:	00000706 	br	66b8 <OSQPendAbort+0x158>
    669c:	e0bff917 	ldw	r2,-28(fp)
    66a0:	e0bffb15 	stw	r2,-20(fp)
    66a4:	e0bffb17 	ldw	r2,-20(fp)
    66a8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    66ac:	e0bfff17 	ldw	r2,-4(fp)
    66b0:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
    66b4:	0005883a 	mov	r2,zero
}
    66b8:	e037883a 	mov	sp,fp
    66bc:	dfc00117 	ldw	ra,4(sp)
    66c0:	df000017 	ldw	fp,0(sp)
    66c4:	dec00204 	addi	sp,sp,8
    66c8:	f800283a 	ret

000066cc <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
    66cc:	defff604 	addi	sp,sp,-40
    66d0:	dfc00915 	stw	ra,36(sp)
    66d4:	df000815 	stw	fp,32(sp)
    66d8:	df000804 	addi	fp,sp,32
    66dc:	e13ffe15 	stw	r4,-8(fp)
    66e0:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    66e4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
    66e8:	e0bffe17 	ldw	r2,-8(fp)
    66ec:	1000021e 	bne	r2,zero,66f8 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
    66f0:	00800104 	movi	r2,4
    66f4:	00004a06 	br	6820 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
    66f8:	e0bffe17 	ldw	r2,-8(fp)
    66fc:	10800003 	ldbu	r2,0(r2)
    6700:	10803fcc 	andi	r2,r2,255
    6704:	108000a0 	cmpeqi	r2,r2,2
    6708:	1000021e 	bne	r2,zero,6714 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
    670c:	00800044 	movi	r2,1
    6710:	00004306 	br	6820 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6714:	0005303a 	rdctl	r2,status
    6718:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    671c:	e0fffd17 	ldw	r3,-12(fp)
    6720:	00bfff84 	movi	r2,-2
    6724:	1884703a 	and	r2,r3,r2
    6728:	1001703a 	wrctl	status,r2
  
  return context;
    672c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    6730:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
    6734:	e0bffe17 	ldw	r2,-8(fp)
    6738:	10800283 	ldbu	r2,10(r2)
    673c:	10803fcc 	andi	r2,r2,255
    6740:	10000c26 	beq	r2,zero,6774 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    6744:	000f883a 	mov	r7,zero
    6748:	01800104 	movi	r6,4
    674c:	e17fff17 	ldw	r5,-4(fp)
    6750:	e13ffe17 	ldw	r4,-8(fp)
    6754:	0002b880 	call	2b88 <OS_EventTaskRdy>
    6758:	e0bff817 	ldw	r2,-32(fp)
    675c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6760:	e0bff917 	ldw	r2,-28(fp)
    6764:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
    6768:	00035d40 	call	35d4 <OS_Sched>
        return (OS_ERR_NONE);
    676c:	0005883a 	mov	r2,zero
    6770:	00002b06 	br	6820 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
    6774:	e0bffe17 	ldw	r2,-8(fp)
    6778:	10800117 	ldw	r2,4(r2)
    677c:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
    6780:	e0bffb17 	ldw	r2,-20(fp)
    6784:	10c0058b 	ldhu	r3,22(r2)
    6788:	e0bffb17 	ldw	r2,-20(fp)
    678c:	1080050b 	ldhu	r2,20(r2)
    6790:	18ffffcc 	andi	r3,r3,65535
    6794:	10bfffcc 	andi	r2,r2,65535
    6798:	18800636 	bltu	r3,r2,67b4 <OSQPost+0xe8>
    679c:	e0bff817 	ldw	r2,-32(fp)
    67a0:	e0bffa15 	stw	r2,-24(fp)
    67a4:	e0bffa17 	ldw	r2,-24(fp)
    67a8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
    67ac:	00800784 	movi	r2,30
    67b0:	00001b06 	br	6820 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
    67b4:	e0bffb17 	ldw	r2,-20(fp)
    67b8:	10800317 	ldw	r2,12(r2)
    67bc:	11000104 	addi	r4,r2,4
    67c0:	e0fffb17 	ldw	r3,-20(fp)
    67c4:	19000315 	stw	r4,12(r3)
    67c8:	e0ffff17 	ldw	r3,-4(fp)
    67cc:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
    67d0:	e0bffb17 	ldw	r2,-20(fp)
    67d4:	1080058b 	ldhu	r2,22(r2)
    67d8:	10800044 	addi	r2,r2,1
    67dc:	1007883a 	mov	r3,r2
    67e0:	e0bffb17 	ldw	r2,-20(fp)
    67e4:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
    67e8:	e0bffb17 	ldw	r2,-20(fp)
    67ec:	10c00317 	ldw	r3,12(r2)
    67f0:	e0bffb17 	ldw	r2,-20(fp)
    67f4:	10800217 	ldw	r2,8(r2)
    67f8:	1880041e 	bne	r3,r2,680c <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
    67fc:	e0bffb17 	ldw	r2,-20(fp)
    6800:	10c00117 	ldw	r3,4(r2)
    6804:	e0bffb17 	ldw	r2,-20(fp)
    6808:	10c00315 	stw	r3,12(r2)
    680c:	e0bff817 	ldw	r2,-32(fp)
    6810:	e0bffc15 	stw	r2,-16(fp)
    6814:	e0bffc17 	ldw	r2,-16(fp)
    6818:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    681c:	0005883a 	mov	r2,zero
}
    6820:	e037883a 	mov	sp,fp
    6824:	dfc00117 	ldw	ra,4(sp)
    6828:	df000017 	ldw	fp,0(sp)
    682c:	dec00204 	addi	sp,sp,8
    6830:	f800283a 	ret

00006834 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
    6834:	defff604 	addi	sp,sp,-40
    6838:	dfc00915 	stw	ra,36(sp)
    683c:	df000815 	stw	fp,32(sp)
    6840:	df000804 	addi	fp,sp,32
    6844:	e13ffe15 	stw	r4,-8(fp)
    6848:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    684c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    6850:	e0bffe17 	ldw	r2,-8(fp)
    6854:	1000021e 	bne	r2,zero,6860 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
    6858:	00800104 	movi	r2,4
    685c:	00004c06 	br	6990 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
    6860:	e0bffe17 	ldw	r2,-8(fp)
    6864:	10800003 	ldbu	r2,0(r2)
    6868:	10803fcc 	andi	r2,r2,255
    686c:	108000a0 	cmpeqi	r2,r2,2
    6870:	1000021e 	bne	r2,zero,687c <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
    6874:	00800044 	movi	r2,1
    6878:	00004506 	br	6990 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    687c:	0005303a 	rdctl	r2,status
    6880:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6884:	e0fffd17 	ldw	r3,-12(fp)
    6888:	00bfff84 	movi	r2,-2
    688c:	1884703a 	and	r2,r3,r2
    6890:	1001703a 	wrctl	status,r2
  
  return context;
    6894:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    6898:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
    689c:	e0bffe17 	ldw	r2,-8(fp)
    68a0:	10800283 	ldbu	r2,10(r2)
    68a4:	10803fcc 	andi	r2,r2,255
    68a8:	10000c26 	beq	r2,zero,68dc <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    68ac:	000f883a 	mov	r7,zero
    68b0:	01800104 	movi	r6,4
    68b4:	e17fff17 	ldw	r5,-4(fp)
    68b8:	e13ffe17 	ldw	r4,-8(fp)
    68bc:	0002b880 	call	2b88 <OS_EventTaskRdy>
    68c0:	e0bff817 	ldw	r2,-32(fp)
    68c4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    68c8:	e0bff917 	ldw	r2,-28(fp)
    68cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
    68d0:	00035d40 	call	35d4 <OS_Sched>
        return (OS_ERR_NONE);
    68d4:	0005883a 	mov	r2,zero
    68d8:	00002d06 	br	6990 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
    68dc:	e0bffe17 	ldw	r2,-8(fp)
    68e0:	10800117 	ldw	r2,4(r2)
    68e4:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
    68e8:	e0bffb17 	ldw	r2,-20(fp)
    68ec:	10c0058b 	ldhu	r3,22(r2)
    68f0:	e0bffb17 	ldw	r2,-20(fp)
    68f4:	1080050b 	ldhu	r2,20(r2)
    68f8:	18ffffcc 	andi	r3,r3,65535
    68fc:	10bfffcc 	andi	r2,r2,65535
    6900:	18800636 	bltu	r3,r2,691c <OSQPostFront+0xe8>
    6904:	e0bff817 	ldw	r2,-32(fp)
    6908:	e0bffa15 	stw	r2,-24(fp)
    690c:	e0bffa17 	ldw	r2,-24(fp)
    6910:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
    6914:	00800784 	movi	r2,30
    6918:	00001d06 	br	6990 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
    691c:	e0bffb17 	ldw	r2,-20(fp)
    6920:	10c00417 	ldw	r3,16(r2)
    6924:	e0bffb17 	ldw	r2,-20(fp)
    6928:	10800117 	ldw	r2,4(r2)
    692c:	1880041e 	bne	r3,r2,6940 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
    6930:	e0bffb17 	ldw	r2,-20(fp)
    6934:	10c00217 	ldw	r3,8(r2)
    6938:	e0bffb17 	ldw	r2,-20(fp)
    693c:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
    6940:	e0bffb17 	ldw	r2,-20(fp)
    6944:	10800417 	ldw	r2,16(r2)
    6948:	10ffff04 	addi	r3,r2,-4
    694c:	e0bffb17 	ldw	r2,-20(fp)
    6950:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
    6954:	e0bffb17 	ldw	r2,-20(fp)
    6958:	10800417 	ldw	r2,16(r2)
    695c:	e0ffff17 	ldw	r3,-4(fp)
    6960:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
    6964:	e0bffb17 	ldw	r2,-20(fp)
    6968:	1080058b 	ldhu	r2,22(r2)
    696c:	10800044 	addi	r2,r2,1
    6970:	1007883a 	mov	r3,r2
    6974:	e0bffb17 	ldw	r2,-20(fp)
    6978:	10c0058d 	sth	r3,22(r2)
    697c:	e0bff817 	ldw	r2,-32(fp)
    6980:	e0bffc15 	stw	r2,-16(fp)
    6984:	e0bffc17 	ldw	r2,-16(fp)
    6988:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    698c:	0005883a 	mov	r2,zero
}
    6990:	e037883a 	mov	sp,fp
    6994:	dfc00117 	ldw	ra,4(sp)
    6998:	df000017 	ldw	fp,0(sp)
    699c:	dec00204 	addi	sp,sp,8
    69a0:	f800283a 	ret

000069a4 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
    69a4:	defff504 	addi	sp,sp,-44
    69a8:	dfc00a15 	stw	ra,40(sp)
    69ac:	df000915 	stw	fp,36(sp)
    69b0:	df000904 	addi	fp,sp,36
    69b4:	e13ffd15 	stw	r4,-12(fp)
    69b8:	e17ffe15 	stw	r5,-8(fp)
    69bc:	3005883a 	mov	r2,r6
    69c0:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    69c4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    69c8:	e0bffd17 	ldw	r2,-12(fp)
    69cc:	1000021e 	bne	r2,zero,69d8 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
    69d0:	00800104 	movi	r2,4
    69d4:	00007106 	br	6b9c <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
    69d8:	e0bffd17 	ldw	r2,-12(fp)
    69dc:	10800003 	ldbu	r2,0(r2)
    69e0:	10803fcc 	andi	r2,r2,255
    69e4:	108000a0 	cmpeqi	r2,r2,2
    69e8:	1000021e 	bne	r2,zero,69f4 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
    69ec:	00800044 	movi	r2,1
    69f0:	00006a06 	br	6b9c <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    69f4:	0005303a 	rdctl	r2,status
    69f8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    69fc:	e0fffc17 	ldw	r3,-16(fp)
    6a00:	00bfff84 	movi	r2,-2
    6a04:	1884703a 	and	r2,r3,r2
    6a08:	1001703a 	wrctl	status,r2
  
  return context;
    6a0c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    6a10:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
    6a14:	e0bffd17 	ldw	r2,-12(fp)
    6a18:	10800283 	ldbu	r2,10(r2)
    6a1c:	10803fcc 	andi	r2,r2,255
    6a20:	10001d26 	beq	r2,zero,6a98 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
    6a24:	e0bfff03 	ldbu	r2,-4(fp)
    6a28:	1080004c 	andi	r2,r2,1
    6a2c:	10000b26 	beq	r2,zero,6a5c <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
    6a30:	00000506 	br	6a48 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    6a34:	000f883a 	mov	r7,zero
    6a38:	01800104 	movi	r6,4
    6a3c:	e17ffe17 	ldw	r5,-8(fp)
    6a40:	e13ffd17 	ldw	r4,-12(fp)
    6a44:	0002b880 	call	2b88 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
    6a48:	e0bffd17 	ldw	r2,-12(fp)
    6a4c:	10800283 	ldbu	r2,10(r2)
    6a50:	10803fcc 	andi	r2,r2,255
    6a54:	103ff71e 	bne	r2,zero,6a34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006a34>
    6a58:	00000506 	br	6a70 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    6a5c:	000f883a 	mov	r7,zero
    6a60:	01800104 	movi	r6,4
    6a64:	e17ffe17 	ldw	r5,-8(fp)
    6a68:	e13ffd17 	ldw	r4,-12(fp)
    6a6c:	0002b880 	call	2b88 <OS_EventTaskRdy>
    6a70:	e0bff717 	ldw	r2,-36(fp)
    6a74:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6a78:	e0bff817 	ldw	r2,-32(fp)
    6a7c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
    6a80:	e0bfff03 	ldbu	r2,-4(fp)
    6a84:	1080010c 	andi	r2,r2,4
    6a88:	1000011e 	bne	r2,zero,6a90 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
    6a8c:	00035d40 	call	35d4 <OS_Sched>
        }
        return (OS_ERR_NONE);
    6a90:	0005883a 	mov	r2,zero
    6a94:	00004106 	br	6b9c <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
    6a98:	e0bffd17 	ldw	r2,-12(fp)
    6a9c:	10800117 	ldw	r2,4(r2)
    6aa0:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
    6aa4:	e0bffa17 	ldw	r2,-24(fp)
    6aa8:	10c0058b 	ldhu	r3,22(r2)
    6aac:	e0bffa17 	ldw	r2,-24(fp)
    6ab0:	1080050b 	ldhu	r2,20(r2)
    6ab4:	18ffffcc 	andi	r3,r3,65535
    6ab8:	10bfffcc 	andi	r2,r2,65535
    6abc:	18800636 	bltu	r3,r2,6ad8 <OSQPostOpt+0x134>
    6ac0:	e0bff717 	ldw	r2,-36(fp)
    6ac4:	e0bff915 	stw	r2,-28(fp)
    6ac8:	e0bff917 	ldw	r2,-28(fp)
    6acc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
    6ad0:	00800784 	movi	r2,30
    6ad4:	00003106 	br	6b9c <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
    6ad8:	e0bfff03 	ldbu	r2,-4(fp)
    6adc:	1080008c 	andi	r2,r2,2
    6ae0:	10001326 	beq	r2,zero,6b30 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
    6ae4:	e0bffa17 	ldw	r2,-24(fp)
    6ae8:	10c00417 	ldw	r3,16(r2)
    6aec:	e0bffa17 	ldw	r2,-24(fp)
    6af0:	10800117 	ldw	r2,4(r2)
    6af4:	1880041e 	bne	r3,r2,6b08 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
    6af8:	e0bffa17 	ldw	r2,-24(fp)
    6afc:	10c00217 	ldw	r3,8(r2)
    6b00:	e0bffa17 	ldw	r2,-24(fp)
    6b04:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
    6b08:	e0bffa17 	ldw	r2,-24(fp)
    6b0c:	10800417 	ldw	r2,16(r2)
    6b10:	10ffff04 	addi	r3,r2,-4
    6b14:	e0bffa17 	ldw	r2,-24(fp)
    6b18:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
    6b1c:	e0bffa17 	ldw	r2,-24(fp)
    6b20:	10800417 	ldw	r2,16(r2)
    6b24:	e0fffe17 	ldw	r3,-8(fp)
    6b28:	10c00015 	stw	r3,0(r2)
    6b2c:	00001006 	br	6b70 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
    6b30:	e0bffa17 	ldw	r2,-24(fp)
    6b34:	10800317 	ldw	r2,12(r2)
    6b38:	11000104 	addi	r4,r2,4
    6b3c:	e0fffa17 	ldw	r3,-24(fp)
    6b40:	19000315 	stw	r4,12(r3)
    6b44:	e0fffe17 	ldw	r3,-8(fp)
    6b48:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
    6b4c:	e0bffa17 	ldw	r2,-24(fp)
    6b50:	10c00317 	ldw	r3,12(r2)
    6b54:	e0bffa17 	ldw	r2,-24(fp)
    6b58:	10800217 	ldw	r2,8(r2)
    6b5c:	1880041e 	bne	r3,r2,6b70 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
    6b60:	e0bffa17 	ldw	r2,-24(fp)
    6b64:	10c00117 	ldw	r3,4(r2)
    6b68:	e0bffa17 	ldw	r2,-24(fp)
    6b6c:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
    6b70:	e0bffa17 	ldw	r2,-24(fp)
    6b74:	1080058b 	ldhu	r2,22(r2)
    6b78:	10800044 	addi	r2,r2,1
    6b7c:	1007883a 	mov	r3,r2
    6b80:	e0bffa17 	ldw	r2,-24(fp)
    6b84:	10c0058d 	sth	r3,22(r2)
    6b88:	e0bff717 	ldw	r2,-36(fp)
    6b8c:	e0bffb15 	stw	r2,-20(fp)
    6b90:	e0bffb17 	ldw	r2,-20(fp)
    6b94:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    6b98:	0005883a 	mov	r2,zero
}
    6b9c:	e037883a 	mov	sp,fp
    6ba0:	dfc00117 	ldw	ra,4(sp)
    6ba4:	df000017 	ldw	fp,0(sp)
    6ba8:	dec00204 	addi	sp,sp,8
    6bac:	f800283a 	ret

00006bb0 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
    6bb0:	defff604 	addi	sp,sp,-40
    6bb4:	df000915 	stw	fp,36(sp)
    6bb8:	df000904 	addi	fp,sp,36
    6bbc:	e13ffe15 	stw	r4,-8(fp)
    6bc0:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    6bc4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
    6bc8:	e0bffe17 	ldw	r2,-8(fp)
    6bcc:	1000021e 	bne	r2,zero,6bd8 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
    6bd0:	00800104 	movi	r2,4
    6bd4:	00004906 	br	6cfc <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
    6bd8:	e0bfff17 	ldw	r2,-4(fp)
    6bdc:	1000021e 	bne	r2,zero,6be8 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
    6be0:	00800244 	movi	r2,9
    6be4:	00004506 	br	6cfc <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
    6be8:	e0bffe17 	ldw	r2,-8(fp)
    6bec:	10800003 	ldbu	r2,0(r2)
    6bf0:	10803fcc 	andi	r2,r2,255
    6bf4:	108000a0 	cmpeqi	r2,r2,2
    6bf8:	1000021e 	bne	r2,zero,6c04 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
    6bfc:	00800044 	movi	r2,1
    6c00:	00003e06 	br	6cfc <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6c04:	0005303a 	rdctl	r2,status
    6c08:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6c0c:	e0fffd17 	ldw	r3,-12(fp)
    6c10:	00bfff84 	movi	r2,-2
    6c14:	1884703a 	and	r2,r3,r2
    6c18:	1001703a 	wrctl	status,r2
  
  return context;
    6c1c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    6c20:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    6c24:	e0bffe17 	ldw	r2,-8(fp)
    6c28:	10c00283 	ldbu	r3,10(r2)
    6c2c:	e0bfff17 	ldw	r2,-4(fp)
    6c30:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
    6c34:	e0bffe17 	ldw	r2,-8(fp)
    6c38:	108002c4 	addi	r2,r2,11
    6c3c:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
    6c40:	e0bfff17 	ldw	r2,-4(fp)
    6c44:	10800204 	addi	r2,r2,8
    6c48:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    6c4c:	e03ff705 	stb	zero,-36(fp)
    6c50:	00000b06 	br	6c80 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
    6c54:	e0bff917 	ldw	r2,-28(fp)
    6c58:	10c00044 	addi	r3,r2,1
    6c5c:	e0fff915 	stw	r3,-28(fp)
    6c60:	e0fff817 	ldw	r3,-32(fp)
    6c64:	19000044 	addi	r4,r3,1
    6c68:	e13ff815 	stw	r4,-32(fp)
    6c6c:	18c00003 	ldbu	r3,0(r3)
    6c70:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    6c74:	e0bff703 	ldbu	r2,-36(fp)
    6c78:	10800044 	addi	r2,r2,1
    6c7c:	e0bff705 	stb	r2,-36(fp)
    6c80:	e0bff703 	ldbu	r2,-36(fp)
    6c84:	108000f0 	cmpltui	r2,r2,3
    6c88:	103ff21e 	bne	r2,zero,6c54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006c54>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
    6c8c:	e0bffe17 	ldw	r2,-8(fp)
    6c90:	10800117 	ldw	r2,4(r2)
    6c94:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
    6c98:	e0bffc17 	ldw	r2,-16(fp)
    6c9c:	1080058b 	ldhu	r2,22(r2)
    6ca0:	10bfffcc 	andi	r2,r2,65535
    6ca4:	10000626 	beq	r2,zero,6cc0 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
    6ca8:	e0bffc17 	ldw	r2,-16(fp)
    6cac:	10800417 	ldw	r2,16(r2)
    6cb0:	10c00017 	ldw	r3,0(r2)
    6cb4:	e0bfff17 	ldw	r2,-4(fp)
    6cb8:	10c00015 	stw	r3,0(r2)
    6cbc:	00000206 	br	6cc8 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
    6cc0:	e0bfff17 	ldw	r2,-4(fp)
    6cc4:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
    6cc8:	e0bffc17 	ldw	r2,-16(fp)
    6ccc:	10c0058b 	ldhu	r3,22(r2)
    6cd0:	e0bfff17 	ldw	r2,-4(fp)
    6cd4:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
    6cd8:	e0bffc17 	ldw	r2,-16(fp)
    6cdc:	10c0050b 	ldhu	r3,20(r2)
    6ce0:	e0bfff17 	ldw	r2,-4(fp)
    6ce4:	10c0018d 	sth	r3,6(r2)
    6ce8:	e0bffa17 	ldw	r2,-24(fp)
    6cec:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6cf0:	e0bffb17 	ldw	r2,-20(fp)
    6cf4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    6cf8:	0005883a 	mov	r2,zero
}
    6cfc:	e037883a 	mov	sp,fp
    6d00:	df000017 	ldw	fp,0(sp)
    6d04:	dec00104 	addi	sp,sp,4
    6d08:	f800283a 	ret

00006d0c <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
    6d0c:	defffb04 	addi	sp,sp,-20
    6d10:	dfc00415 	stw	ra,16(sp)
    6d14:	df000315 	stw	fp,12(sp)
    6d18:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    6d1c:	01407804 	movi	r5,480
    6d20:	01000074 	movhi	r4,1
    6d24:	211c0604 	addi	r4,r4,28696
    6d28:	00035180 	call	3518 <OS_MemClr>
    pq1 = &OSQTbl[0];
    6d2c:	00800074 	movhi	r2,1
    6d30:	109c0604 	addi	r2,r2,28696
    6d34:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
    6d38:	00800074 	movhi	r2,1
    6d3c:	109c0c04 	addi	r2,r2,28720
    6d40:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
    6d44:	e03ffd0d 	sth	zero,-12(fp)
    6d48:	00000c06 	br	6d7c <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
    6d4c:	e0bffe17 	ldw	r2,-8(fp)
    6d50:	e0ffff17 	ldw	r3,-4(fp)
    6d54:	10c00015 	stw	r3,0(r2)
        pq1++;
    6d58:	e0bffe17 	ldw	r2,-8(fp)
    6d5c:	10800604 	addi	r2,r2,24
    6d60:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
    6d64:	e0bfff17 	ldw	r2,-4(fp)
    6d68:	10800604 	addi	r2,r2,24
    6d6c:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
    6d70:	e0bffd0b 	ldhu	r2,-12(fp)
    6d74:	10800044 	addi	r2,r2,1
    6d78:	e0bffd0d 	sth	r2,-12(fp)
    6d7c:	e0bffd0b 	ldhu	r2,-12(fp)
    6d80:	108004f0 	cmpltui	r2,r2,19
    6d84:	103ff11e 	bne	r2,zero,6d4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006d4c>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
    6d88:	e0bffe17 	ldw	r2,-8(fp)
    6d8c:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
    6d90:	00800074 	movhi	r2,1
    6d94:	109c0604 	addi	r2,r2,28696
    6d98:	d0a7ff15 	stw	r2,-24580(gp)
#endif
}
    6d9c:	0001883a 	nop
    6da0:	e037883a 	mov	sp,fp
    6da4:	dfc00117 	ldw	ra,4(sp)
    6da8:	df000017 	ldw	fp,0(sp)
    6dac:	dec00204 	addi	sp,sp,8
    6db0:	f800283a 	ret

00006db4 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
    6db4:	defffa04 	addi	sp,sp,-24
    6db8:	df000515 	stw	fp,20(sp)
    6dbc:	df000504 	addi	fp,sp,20
    6dc0:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    6dc4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    6dc8:	e0bfff17 	ldw	r2,-4(fp)
    6dcc:	1000021e 	bne	r2,zero,6dd8 <OSSemAccept+0x24>
        return (0);
    6dd0:	0005883a 	mov	r2,zero
    6dd4:	00001f06 	br	6e54 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    6dd8:	e0bfff17 	ldw	r2,-4(fp)
    6ddc:	10800003 	ldbu	r2,0(r2)
    6de0:	10803fcc 	andi	r2,r2,255
    6de4:	108000e0 	cmpeqi	r2,r2,3
    6de8:	1000021e 	bne	r2,zero,6df4 <OSSemAccept+0x40>
        return (0);
    6dec:	0005883a 	mov	r2,zero
    6df0:	00001806 	br	6e54 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6df4:	0005303a 	rdctl	r2,status
    6df8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6dfc:	e0fffe17 	ldw	r3,-8(fp)
    6e00:	00bfff84 	movi	r2,-2
    6e04:	1884703a 	and	r2,r3,r2
    6e08:	1001703a 	wrctl	status,r2
  
  return context;
    6e0c:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
    6e10:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
    6e14:	e0bfff17 	ldw	r2,-4(fp)
    6e18:	1080020b 	ldhu	r2,8(r2)
    6e1c:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
    6e20:	e0bffd0b 	ldhu	r2,-12(fp)
    6e24:	10000626 	beq	r2,zero,6e40 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
    6e28:	e0bfff17 	ldw	r2,-4(fp)
    6e2c:	1080020b 	ldhu	r2,8(r2)
    6e30:	10bfffc4 	addi	r2,r2,-1
    6e34:	1007883a 	mov	r3,r2
    6e38:	e0bfff17 	ldw	r2,-4(fp)
    6e3c:	10c0020d 	sth	r3,8(r2)
    6e40:	e0bffb17 	ldw	r2,-20(fp)
    6e44:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6e48:	e0bffc17 	ldw	r2,-16(fp)
    6e4c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
    6e50:	e0bffd0b 	ldhu	r2,-12(fp)
}
    6e54:	e037883a 	mov	sp,fp
    6e58:	df000017 	ldw	fp,0(sp)
    6e5c:	dec00104 	addi	sp,sp,4
    6e60:	f800283a 	ret

00006e64 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
    6e64:	defff904 	addi	sp,sp,-28
    6e68:	dfc00615 	stw	ra,24(sp)
    6e6c:	df000515 	stw	fp,20(sp)
    6e70:	df000504 	addi	fp,sp,20
    6e74:	2005883a 	mov	r2,r4
    6e78:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    6e7c:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    6e80:	d0a80203 	ldbu	r2,-24568(gp)
    6e84:	10803fcc 	andi	r2,r2,255
    6e88:	10000226 	beq	r2,zero,6e94 <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
    6e8c:	0005883a 	mov	r2,zero
    6e90:	00002506 	br	6f28 <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6e94:	0005303a 	rdctl	r2,status
    6e98:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6e9c:	e0fffe17 	ldw	r3,-8(fp)
    6ea0:	00bfff84 	movi	r2,-2
    6ea4:	1884703a 	and	r2,r3,r2
    6ea8:	1001703a 	wrctl	status,r2
  
  return context;
    6eac:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
    6eb0:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
    6eb4:	d0a80117 	ldw	r2,-24572(gp)
    6eb8:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
    6ebc:	d0a80117 	ldw	r2,-24572(gp)
    6ec0:	10000326 	beq	r2,zero,6ed0 <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
    6ec4:	d0a80117 	ldw	r2,-24572(gp)
    6ec8:	10800117 	ldw	r2,4(r2)
    6ecc:	d0a80115 	stw	r2,-24572(gp)
    6ed0:	e0bffb17 	ldw	r2,-20(fp)
    6ed4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6ed8:	e0bffc17 	ldw	r2,-16(fp)
    6edc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
    6ee0:	e0bffd17 	ldw	r2,-12(fp)
    6ee4:	10000f26 	beq	r2,zero,6f24 <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
    6ee8:	e0bffd17 	ldw	r2,-12(fp)
    6eec:	00c000c4 	movi	r3,3
    6ef0:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
    6ef4:	e0bffd17 	ldw	r2,-12(fp)
    6ef8:	e0ffff0b 	ldhu	r3,-4(fp)
    6efc:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
    6f00:	e0bffd17 	ldw	r2,-12(fp)
    6f04:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
    6f08:	e0bffd17 	ldw	r2,-12(fp)
    6f0c:	00c00fc4 	movi	r3,63
    6f10:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
    6f14:	e0bffd17 	ldw	r2,-12(fp)
    6f18:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
    6f1c:	e13ffd17 	ldw	r4,-12(fp)
    6f20:	00031380 	call	3138 <OS_EventWaitListInit>
    }
    return (pevent);
    6f24:	e0bffd17 	ldw	r2,-12(fp)
}
    6f28:	e037883a 	mov	sp,fp
    6f2c:	dfc00117 	ldw	ra,4(sp)
    6f30:	df000017 	ldw	fp,0(sp)
    6f34:	dec00204 	addi	sp,sp,8
    6f38:	f800283a 	ret

00006f3c <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    6f3c:	defff304 	addi	sp,sp,-52
    6f40:	dfc00c15 	stw	ra,48(sp)
    6f44:	df000b15 	stw	fp,44(sp)
    6f48:	df000b04 	addi	fp,sp,44
    6f4c:	e13ffd15 	stw	r4,-12(fp)
    6f50:	2805883a 	mov	r2,r5
    6f54:	e1bfff15 	stw	r6,-4(fp)
    6f58:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    6f5c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    6f60:	e0bfff17 	ldw	r2,-4(fp)
    6f64:	1000021e 	bne	r2,zero,6f70 <OSSemDel+0x34>
        return (pevent);
    6f68:	e0bffd17 	ldw	r2,-12(fp)
    6f6c:	00007e06 	br	7168 <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    6f70:	e0bffd17 	ldw	r2,-12(fp)
    6f74:	1000051e 	bne	r2,zero,6f8c <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    6f78:	e0bfff17 	ldw	r2,-4(fp)
    6f7c:	00c00104 	movi	r3,4
    6f80:	10c00005 	stb	r3,0(r2)
        return (pevent);
    6f84:	e0bffd17 	ldw	r2,-12(fp)
    6f88:	00007706 	br	7168 <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
    6f8c:	e0bffd17 	ldw	r2,-12(fp)
    6f90:	10800003 	ldbu	r2,0(r2)
    6f94:	10803fcc 	andi	r2,r2,255
    6f98:	108000e0 	cmpeqi	r2,r2,3
    6f9c:	1000051e 	bne	r2,zero,6fb4 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    6fa0:	e0bfff17 	ldw	r2,-4(fp)
    6fa4:	00c00044 	movi	r3,1
    6fa8:	10c00005 	stb	r3,0(r2)
        return (pevent);
    6fac:	e0bffd17 	ldw	r2,-12(fp)
    6fb0:	00006d06 	br	7168 <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    6fb4:	d0a80203 	ldbu	r2,-24568(gp)
    6fb8:	10803fcc 	andi	r2,r2,255
    6fbc:	10000526 	beq	r2,zero,6fd4 <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
    6fc0:	e0bfff17 	ldw	r2,-4(fp)
    6fc4:	00c003c4 	movi	r3,15
    6fc8:	10c00005 	stb	r3,0(r2)
        return (pevent);
    6fcc:	e0bffd17 	ldw	r2,-12(fp)
    6fd0:	00006506 	br	7168 <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6fd4:	0005303a 	rdctl	r2,status
    6fd8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6fdc:	e0fffc17 	ldw	r3,-16(fp)
    6fe0:	00bfff84 	movi	r2,-2
    6fe4:	1884703a 	and	r2,r3,r2
    6fe8:	1001703a 	wrctl	status,r2
  
  return context;
    6fec:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    6ff0:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
    6ff4:	e0bffd17 	ldw	r2,-12(fp)
    6ff8:	10800283 	ldbu	r2,10(r2)
    6ffc:	10803fcc 	andi	r2,r2,255
    7000:	10000326 	beq	r2,zero,7010 <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    7004:	00800044 	movi	r2,1
    7008:	e0bff505 	stb	r2,-44(fp)
    700c:	00000106 	br	7014 <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    7010:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
    7014:	e0bffe03 	ldbu	r2,-8(fp)
    7018:	10000326 	beq	r2,zero,7028 <OSSemDel+0xec>
    701c:	10800060 	cmpeqi	r2,r2,1
    7020:	1000281e 	bne	r2,zero,70c4 <OSSemDel+0x188>
    7024:	00004506 	br	713c <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
    7028:	e0bff503 	ldbu	r2,-44(fp)
    702c:	1000161e 	bne	r2,zero,7088 <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
    7030:	e0bffd17 	ldw	r2,-12(fp)
    7034:	00c00fc4 	movi	r3,63
    7038:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
    703c:	e0bffd17 	ldw	r2,-12(fp)
    7040:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    7044:	e0bffd17 	ldw	r2,-12(fp)
    7048:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
    704c:	d0e80117 	ldw	r3,-24572(gp)
    7050:	e0bffd17 	ldw	r2,-12(fp)
    7054:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
    7058:	e0bffd17 	ldw	r2,-12(fp)
    705c:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
    7060:	e0bffd17 	ldw	r2,-12(fp)
    7064:	d0a80115 	stw	r2,-24572(gp)
    7068:	e0bff717 	ldw	r2,-36(fp)
    706c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7070:	e0bff817 	ldw	r2,-32(fp)
    7074:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
    7078:	e0bfff17 	ldw	r2,-4(fp)
    707c:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
    7080:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
    7084:	00003706 	br	7164 <OSSemDel+0x228>
    7088:	e0bff717 	ldw	r2,-36(fp)
    708c:	e0bff915 	stw	r2,-28(fp)
    7090:	e0bff917 	ldw	r2,-28(fp)
    7094:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
    7098:	e0bfff17 	ldw	r2,-4(fp)
    709c:	00c01244 	movi	r3,73
    70a0:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
    70a4:	e0bffd17 	ldw	r2,-12(fp)
    70a8:	e0bff615 	stw	r2,-40(fp)
             }
             break;
    70ac:	00002d06 	br	7164 <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
    70b0:	000f883a 	mov	r7,zero
    70b4:	01800044 	movi	r6,1
    70b8:	000b883a 	mov	r5,zero
    70bc:	e13ffd17 	ldw	r4,-12(fp)
    70c0:	0002b880 	call	2b88 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
    70c4:	e0bffd17 	ldw	r2,-12(fp)
    70c8:	10800283 	ldbu	r2,10(r2)
    70cc:	10803fcc 	andi	r2,r2,255
    70d0:	103ff71e 	bne	r2,zero,70b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70070b0>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
    70d4:	e0bffd17 	ldw	r2,-12(fp)
    70d8:	00c00fc4 	movi	r3,63
    70dc:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
    70e0:	e0bffd17 	ldw	r2,-12(fp)
    70e4:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    70e8:	e0bffd17 	ldw	r2,-12(fp)
    70ec:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
    70f0:	d0e80117 	ldw	r3,-24572(gp)
    70f4:	e0bffd17 	ldw	r2,-12(fp)
    70f8:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
    70fc:	e0bffd17 	ldw	r2,-12(fp)
    7100:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
    7104:	e0bffd17 	ldw	r2,-12(fp)
    7108:	d0a80115 	stw	r2,-24572(gp)
    710c:	e0bff717 	ldw	r2,-36(fp)
    7110:	e0bffa15 	stw	r2,-24(fp)
    7114:	e0bffa17 	ldw	r2,-24(fp)
    7118:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    711c:	e0bff503 	ldbu	r2,-44(fp)
    7120:	10800058 	cmpnei	r2,r2,1
    7124:	1000011e 	bne	r2,zero,712c <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    7128:	00035d40 	call	35d4 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
    712c:	e0bfff17 	ldw	r2,-4(fp)
    7130:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
    7134:	e03ff615 	stw	zero,-40(fp)
             break;
    7138:	00000a06 	br	7164 <OSSemDel+0x228>
    713c:	e0bff717 	ldw	r2,-36(fp)
    7140:	e0bffb15 	stw	r2,-20(fp)
    7144:	e0bffb17 	ldw	r2,-20(fp)
    7148:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
    714c:	e0bfff17 	ldw	r2,-4(fp)
    7150:	00c001c4 	movi	r3,7
    7154:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
    7158:	e0bffd17 	ldw	r2,-12(fp)
    715c:	e0bff615 	stw	r2,-40(fp)
             break;
    7160:	0001883a 	nop
    }
    return (pevent_return);
    7164:	e0bff617 	ldw	r2,-40(fp)
}
    7168:	e037883a 	mov	sp,fp
    716c:	dfc00117 	ldw	ra,4(sp)
    7170:	df000017 	ldw	fp,0(sp)
    7174:	dec00204 	addi	sp,sp,8
    7178:	f800283a 	ret

0000717c <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
    717c:	defff504 	addi	sp,sp,-44
    7180:	dfc00a15 	stw	ra,40(sp)
    7184:	df000915 	stw	fp,36(sp)
    7188:	df000904 	addi	fp,sp,36
    718c:	e13ffd15 	stw	r4,-12(fp)
    7190:	2805883a 	mov	r2,r5
    7194:	e1bfff15 	stw	r6,-4(fp)
    7198:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    719c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    71a0:	e0bfff17 	ldw	r2,-4(fp)
    71a4:	10007226 	beq	r2,zero,7370 <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    71a8:	e0bffd17 	ldw	r2,-12(fp)
    71ac:	1000041e 	bne	r2,zero,71c0 <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
    71b0:	e0bfff17 	ldw	r2,-4(fp)
    71b4:	00c00104 	movi	r3,4
    71b8:	10c00005 	stb	r3,0(r2)
        return;
    71bc:	00006d06 	br	7374 <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    71c0:	e0bffd17 	ldw	r2,-12(fp)
    71c4:	10800003 	ldbu	r2,0(r2)
    71c8:	10803fcc 	andi	r2,r2,255
    71cc:	108000e0 	cmpeqi	r2,r2,3
    71d0:	1000041e 	bne	r2,zero,71e4 <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
    71d4:	e0bfff17 	ldw	r2,-4(fp)
    71d8:	00c00044 	movi	r3,1
    71dc:	10c00005 	stb	r3,0(r2)
        return;
    71e0:	00006406 	br	7374 <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
    71e4:	d0a80203 	ldbu	r2,-24568(gp)
    71e8:	10803fcc 	andi	r2,r2,255
    71ec:	10000426 	beq	r2,zero,7200 <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
    71f0:	e0bfff17 	ldw	r2,-4(fp)
    71f4:	00c00084 	movi	r3,2
    71f8:	10c00005 	stb	r3,0(r2)
        return;
    71fc:	00005d06 	br	7374 <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
    7200:	d0a7f403 	ldbu	r2,-24624(gp)
    7204:	10803fcc 	andi	r2,r2,255
    7208:	10000426 	beq	r2,zero,721c <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
    720c:	e0bfff17 	ldw	r2,-4(fp)
    7210:	00c00344 	movi	r3,13
    7214:	10c00005 	stb	r3,0(r2)
        return;
    7218:	00005606 	br	7374 <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    721c:	0005303a 	rdctl	r2,status
    7220:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7224:	e0fffc17 	ldw	r3,-16(fp)
    7228:	00bfff84 	movi	r2,-2
    722c:	1884703a 	and	r2,r3,r2
    7230:	1001703a 	wrctl	status,r2
  
  return context;
    7234:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    7238:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
    723c:	e0bffd17 	ldw	r2,-12(fp)
    7240:	1080020b 	ldhu	r2,8(r2)
    7244:	10bfffcc 	andi	r2,r2,65535
    7248:	10000d26 	beq	r2,zero,7280 <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
    724c:	e0bffd17 	ldw	r2,-12(fp)
    7250:	1080020b 	ldhu	r2,8(r2)
    7254:	10bfffc4 	addi	r2,r2,-1
    7258:	1007883a 	mov	r3,r2
    725c:	e0bffd17 	ldw	r2,-12(fp)
    7260:	10c0020d 	sth	r3,8(r2)
    7264:	e0bff717 	ldw	r2,-36(fp)
    7268:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    726c:	e0bff817 	ldw	r2,-32(fp)
    7270:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
    7274:	e0bfff17 	ldw	r2,-4(fp)
    7278:	10000005 	stb	zero,0(r2)
        return;
    727c:	00003d06 	br	7374 <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
    7280:	d0a80317 	ldw	r2,-24564(gp)
    7284:	d0e80317 	ldw	r3,-24564(gp)
    7288:	18c00c03 	ldbu	r3,48(r3)
    728c:	18c00054 	ori	r3,r3,1
    7290:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    7294:	d0a80317 	ldw	r2,-24564(gp)
    7298:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
    729c:	d0a80317 	ldw	r2,-24564(gp)
    72a0:	e0fffe0b 	ldhu	r3,-8(fp)
    72a4:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
    72a8:	e13ffd17 	ldw	r4,-12(fp)
    72ac:	0002d200 	call	2d20 <OS_EventTaskWait>
    72b0:	e0bff717 	ldw	r2,-36(fp)
    72b4:	e0bffb15 	stw	r2,-20(fp)
    72b8:	e0bffb17 	ldw	r2,-20(fp)
    72bc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
    72c0:	00035d40 	call	35d4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    72c4:	0005303a 	rdctl	r2,status
    72c8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    72cc:	e0fff917 	ldw	r3,-28(fp)
    72d0:	00bfff84 	movi	r2,-2
    72d4:	1884703a 	and	r2,r3,r2
    72d8:	1001703a 	wrctl	status,r2
  
  return context;
    72dc:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
    72e0:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
    72e4:	d0a80317 	ldw	r2,-24564(gp)
    72e8:	10800c43 	ldbu	r2,49(r2)
    72ec:	10803fcc 	andi	r2,r2,255
    72f0:	10000326 	beq	r2,zero,7300 <OSSemPend+0x184>
    72f4:	108000a0 	cmpeqi	r2,r2,2
    72f8:	1000041e 	bne	r2,zero,730c <OSSemPend+0x190>
    72fc:	00000706 	br	731c <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
    7300:	e0bfff17 	ldw	r2,-4(fp)
    7304:	10000005 	stb	zero,0(r2)
             break;
    7308:	00000c06 	br	733c <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
    730c:	e0bfff17 	ldw	r2,-4(fp)
    7310:	00c00384 	movi	r3,14
    7314:	10c00005 	stb	r3,0(r2)
             break;
    7318:	00000806 	br	733c <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
    731c:	d0a80317 	ldw	r2,-24564(gp)
    7320:	e17ffd17 	ldw	r5,-12(fp)
    7324:	1009883a 	mov	r4,r2
    7328:	0002f800 	call	2f80 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
    732c:	e0bfff17 	ldw	r2,-4(fp)
    7330:	00c00284 	movi	r3,10
    7334:	10c00005 	stb	r3,0(r2)
             break;
    7338:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
    733c:	d0a80317 	ldw	r2,-24564(gp)
    7340:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
    7344:	d0a80317 	ldw	r2,-24564(gp)
    7348:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
    734c:	d0a80317 	ldw	r2,-24564(gp)
    7350:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    7354:	d0a80317 	ldw	r2,-24564(gp)
    7358:	10000815 	stw	zero,32(r2)
    735c:	e0bff717 	ldw	r2,-36(fp)
    7360:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7364:	e0bffa17 	ldw	r2,-24(fp)
    7368:	1001703a 	wrctl	status,r2
    736c:	00000106 	br	7374 <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
    7370:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
    7374:	e037883a 	mov	sp,fp
    7378:	dfc00117 	ldw	ra,4(sp)
    737c:	df000017 	ldw	fp,0(sp)
    7380:	dec00204 	addi	sp,sp,8
    7384:	f800283a 	ret

00007388 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    7388:	defff604 	addi	sp,sp,-40
    738c:	dfc00915 	stw	ra,36(sp)
    7390:	df000815 	stw	fp,32(sp)
    7394:	df000804 	addi	fp,sp,32
    7398:	e13ffd15 	stw	r4,-12(fp)
    739c:	2805883a 	mov	r2,r5
    73a0:	e1bfff15 	stw	r6,-4(fp)
    73a4:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    73a8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    73ac:	e0bfff17 	ldw	r2,-4(fp)
    73b0:	1000021e 	bne	r2,zero,73bc <OSSemPendAbort+0x34>
        return (0);
    73b4:	0005883a 	mov	r2,zero
    73b8:	00004906 	br	74e0 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    73bc:	e0bffd17 	ldw	r2,-12(fp)
    73c0:	1000051e 	bne	r2,zero,73d8 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    73c4:	e0bfff17 	ldw	r2,-4(fp)
    73c8:	00c00104 	movi	r3,4
    73cc:	10c00005 	stb	r3,0(r2)
        return (0);
    73d0:	0005883a 	mov	r2,zero
    73d4:	00004206 	br	74e0 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    73d8:	e0bffd17 	ldw	r2,-12(fp)
    73dc:	10800003 	ldbu	r2,0(r2)
    73e0:	10803fcc 	andi	r2,r2,255
    73e4:	108000e0 	cmpeqi	r2,r2,3
    73e8:	1000051e 	bne	r2,zero,7400 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    73ec:	e0bfff17 	ldw	r2,-4(fp)
    73f0:	00c00044 	movi	r3,1
    73f4:	10c00005 	stb	r3,0(r2)
        return (0);
    73f8:	0005883a 	mov	r2,zero
    73fc:	00003806 	br	74e0 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7400:	0005303a 	rdctl	r2,status
    7404:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7408:	e0fffc17 	ldw	r3,-16(fp)
    740c:	00bfff84 	movi	r2,-2
    7410:	1884703a 	and	r2,r3,r2
    7414:	1001703a 	wrctl	status,r2
  
  return context;
    7418:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    741c:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
    7420:	e0bffd17 	ldw	r2,-12(fp)
    7424:	10800283 	ldbu	r2,10(r2)
    7428:	10803fcc 	andi	r2,r2,255
    742c:	10002526 	beq	r2,zero,74c4 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
    7430:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
    7434:	e0bffe03 	ldbu	r2,-8(fp)
    7438:	10800060 	cmpeqi	r2,r2,1
    743c:	10000e26 	beq	r2,zero,7478 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
    7440:	00000806 	br	7464 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
    7444:	01c00084 	movi	r7,2
    7448:	01800044 	movi	r6,1
    744c:	000b883a 	mov	r5,zero
    7450:	e13ffd17 	ldw	r4,-12(fp)
    7454:	0002b880 	call	2b88 <OS_EventTaskRdy>
                     nbr_tasks++;
    7458:	e0bff803 	ldbu	r2,-32(fp)
    745c:	10800044 	addi	r2,r2,1
    7460:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
    7464:	e0bffd17 	ldw	r2,-12(fp)
    7468:	10800283 	ldbu	r2,10(r2)
    746c:	10803fcc 	andi	r2,r2,255
    7470:	103ff41e 	bne	r2,zero,7444 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007444>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
    7474:	00000906 	br	749c <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
    7478:	01c00084 	movi	r7,2
    747c:	01800044 	movi	r6,1
    7480:	000b883a 	mov	r5,zero
    7484:	e13ffd17 	ldw	r4,-12(fp)
    7488:	0002b880 	call	2b88 <OS_EventTaskRdy>
                 nbr_tasks++;
    748c:	e0bff803 	ldbu	r2,-32(fp)
    7490:	10800044 	addi	r2,r2,1
    7494:	e0bff805 	stb	r2,-32(fp)
                 break;
    7498:	0001883a 	nop
    749c:	e0bff917 	ldw	r2,-28(fp)
    74a0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    74a4:	e0bffa17 	ldw	r2,-24(fp)
    74a8:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
    74ac:	00035d40 	call	35d4 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
    74b0:	e0bfff17 	ldw	r2,-4(fp)
    74b4:	00c00384 	movi	r3,14
    74b8:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
    74bc:	e0bff803 	ldbu	r2,-32(fp)
    74c0:	00000706 	br	74e0 <OSSemPendAbort+0x158>
    74c4:	e0bff917 	ldw	r2,-28(fp)
    74c8:	e0bffb15 	stw	r2,-20(fp)
    74cc:	e0bffb17 	ldw	r2,-20(fp)
    74d0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    74d4:	e0bfff17 	ldw	r2,-4(fp)
    74d8:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
    74dc:	0005883a 	mov	r2,zero
}
    74e0:	e037883a 	mov	sp,fp
    74e4:	dfc00117 	ldw	ra,4(sp)
    74e8:	df000017 	ldw	fp,0(sp)
    74ec:	dec00204 	addi	sp,sp,8
    74f0:	f800283a 	ret

000074f4 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
    74f4:	defff804 	addi	sp,sp,-32
    74f8:	dfc00715 	stw	ra,28(sp)
    74fc:	df000615 	stw	fp,24(sp)
    7500:	df000604 	addi	fp,sp,24
    7504:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    7508:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    750c:	e0bfff17 	ldw	r2,-4(fp)
    7510:	1000021e 	bne	r2,zero,751c <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
    7514:	00800104 	movi	r2,4
    7518:	00003506 	br	75f0 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    751c:	e0bfff17 	ldw	r2,-4(fp)
    7520:	10800003 	ldbu	r2,0(r2)
    7524:	10803fcc 	andi	r2,r2,255
    7528:	108000e0 	cmpeqi	r2,r2,3
    752c:	1000021e 	bne	r2,zero,7538 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
    7530:	00800044 	movi	r2,1
    7534:	00002e06 	br	75f0 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7538:	0005303a 	rdctl	r2,status
    753c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7540:	e0fffe17 	ldw	r3,-8(fp)
    7544:	00bfff84 	movi	r2,-2
    7548:	1884703a 	and	r2,r3,r2
    754c:	1001703a 	wrctl	status,r2
  
  return context;
    7550:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
    7554:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
    7558:	e0bfff17 	ldw	r2,-4(fp)
    755c:	10800283 	ldbu	r2,10(r2)
    7560:	10803fcc 	andi	r2,r2,255
    7564:	10000c26 	beq	r2,zero,7598 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
    7568:	000f883a 	mov	r7,zero
    756c:	01800044 	movi	r6,1
    7570:	000b883a 	mov	r5,zero
    7574:	e13fff17 	ldw	r4,-4(fp)
    7578:	0002b880 	call	2b88 <OS_EventTaskRdy>
    757c:	e0bffa17 	ldw	r2,-24(fp)
    7580:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7584:	e0bffb17 	ldw	r2,-20(fp)
    7588:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
    758c:	00035d40 	call	35d4 <OS_Sched>
        return (OS_ERR_NONE);
    7590:	0005883a 	mov	r2,zero
    7594:	00001606 	br	75f0 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
    7598:	e0bfff17 	ldw	r2,-4(fp)
    759c:	1080020b 	ldhu	r2,8(r2)
    75a0:	10ffffcc 	andi	r3,r2,65535
    75a4:	00bfffd4 	movui	r2,65535
    75a8:	18800c26 	beq	r3,r2,75dc <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
    75ac:	e0bfff17 	ldw	r2,-4(fp)
    75b0:	1080020b 	ldhu	r2,8(r2)
    75b4:	10800044 	addi	r2,r2,1
    75b8:	1007883a 	mov	r3,r2
    75bc:	e0bfff17 	ldw	r2,-4(fp)
    75c0:	10c0020d 	sth	r3,8(r2)
    75c4:	e0bffa17 	ldw	r2,-24(fp)
    75c8:	e0bffc15 	stw	r2,-16(fp)
    75cc:	e0bffc17 	ldw	r2,-16(fp)
    75d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
    75d4:	0005883a 	mov	r2,zero
    75d8:	00000506 	br	75f0 <OSSemPost+0xfc>
    75dc:	e0bffa17 	ldw	r2,-24(fp)
    75e0:	e0bffd15 	stw	r2,-12(fp)
    75e4:	e0bffd17 	ldw	r2,-12(fp)
    75e8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
    75ec:	00800c84 	movi	r2,50
}
    75f0:	e037883a 	mov	sp,fp
    75f4:	dfc00117 	ldw	ra,4(sp)
    75f8:	df000017 	ldw	fp,0(sp)
    75fc:	dec00204 	addi	sp,sp,8
    7600:	f800283a 	ret

00007604 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
    7604:	defff704 	addi	sp,sp,-36
    7608:	df000815 	stw	fp,32(sp)
    760c:	df000804 	addi	fp,sp,32
    7610:	e13ffe15 	stw	r4,-8(fp)
    7614:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    7618:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    761c:	e0bffe17 	ldw	r2,-8(fp)
    7620:	1000021e 	bne	r2,zero,762c <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
    7624:	00800104 	movi	r2,4
    7628:	00003606 	br	7704 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
    762c:	e0bfff17 	ldw	r2,-4(fp)
    7630:	1000021e 	bne	r2,zero,763c <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
    7634:	00800244 	movi	r2,9
    7638:	00003206 	br	7704 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
    763c:	e0bffe17 	ldw	r2,-8(fp)
    7640:	10800003 	ldbu	r2,0(r2)
    7644:	10803fcc 	andi	r2,r2,255
    7648:	108000e0 	cmpeqi	r2,r2,3
    764c:	1000021e 	bne	r2,zero,7658 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
    7650:	00800044 	movi	r2,1
    7654:	00002b06 	br	7704 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7658:	0005303a 	rdctl	r2,status
    765c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7660:	e0fffd17 	ldw	r3,-12(fp)
    7664:	00bfff84 	movi	r2,-2
    7668:	1884703a 	and	r2,r3,r2
    766c:	1001703a 	wrctl	status,r2
  
  return context;
    7670:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    7674:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    7678:	e0bffe17 	ldw	r2,-8(fp)
    767c:	10c00283 	ldbu	r3,10(r2)
    7680:	e0bfff17 	ldw	r2,-4(fp)
    7684:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
    7688:	e0bffe17 	ldw	r2,-8(fp)
    768c:	108002c4 	addi	r2,r2,11
    7690:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
    7694:	e0bfff17 	ldw	r2,-4(fp)
    7698:	10800084 	addi	r2,r2,2
    769c:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    76a0:	e03ffa05 	stb	zero,-24(fp)
    76a4:	00000b06 	br	76d4 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
    76a8:	e0bff917 	ldw	r2,-28(fp)
    76ac:	10c00044 	addi	r3,r2,1
    76b0:	e0fff915 	stw	r3,-28(fp)
    76b4:	e0fff817 	ldw	r3,-32(fp)
    76b8:	19000044 	addi	r4,r3,1
    76bc:	e13ff815 	stw	r4,-32(fp)
    76c0:	18c00003 	ldbu	r3,0(r3)
    76c4:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    76c8:	e0bffa03 	ldbu	r2,-24(fp)
    76cc:	10800044 	addi	r2,r2,1
    76d0:	e0bffa05 	stb	r2,-24(fp)
    76d4:	e0bffa03 	ldbu	r2,-24(fp)
    76d8:	108000f0 	cmpltui	r2,r2,3
    76dc:	103ff21e 	bne	r2,zero,76a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70076a8>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
    76e0:	e0bffe17 	ldw	r2,-8(fp)
    76e4:	10c0020b 	ldhu	r3,8(r2)
    76e8:	e0bfff17 	ldw	r2,-4(fp)
    76ec:	10c0000d 	sth	r3,0(r2)
    76f0:	e0bffb17 	ldw	r2,-20(fp)
    76f4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    76f8:	e0bffc17 	ldw	r2,-16(fp)
    76fc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    7700:	0005883a 	mov	r2,zero
}
    7704:	e037883a 	mov	sp,fp
    7708:	df000017 	ldw	fp,0(sp)
    770c:	dec00104 	addi	sp,sp,4
    7710:	f800283a 	ret

00007714 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
    7714:	defff904 	addi	sp,sp,-28
    7718:	df000615 	stw	fp,24(sp)
    771c:	df000604 	addi	fp,sp,24
    7720:	e13ffd15 	stw	r4,-12(fp)
    7724:	2805883a 	mov	r2,r5
    7728:	e1bfff15 	stw	r6,-4(fp)
    772c:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    7730:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    7734:	e0bfff17 	ldw	r2,-4(fp)
    7738:	10003126 	beq	r2,zero,7800 <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    773c:	e0bffd17 	ldw	r2,-12(fp)
    7740:	1000041e 	bne	r2,zero,7754 <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
    7744:	e0bfff17 	ldw	r2,-4(fp)
    7748:	00c00104 	movi	r3,4
    774c:	10c00005 	stb	r3,0(r2)
        return;
    7750:	00002c06 	br	7804 <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    7754:	e0bffd17 	ldw	r2,-12(fp)
    7758:	10800003 	ldbu	r2,0(r2)
    775c:	10803fcc 	andi	r2,r2,255
    7760:	108000e0 	cmpeqi	r2,r2,3
    7764:	1000041e 	bne	r2,zero,7778 <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
    7768:	e0bfff17 	ldw	r2,-4(fp)
    776c:	00c00044 	movi	r3,1
    7770:	10c00005 	stb	r3,0(r2)
        return;
    7774:	00002306 	br	7804 <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7778:	0005303a 	rdctl	r2,status
    777c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7780:	e0fffc17 	ldw	r3,-16(fp)
    7784:	00bfff84 	movi	r2,-2
    7788:	1884703a 	and	r2,r3,r2
    778c:	1001703a 	wrctl	status,r2
  
  return context;
    7790:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    7794:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
    7798:	e0bfff17 	ldw	r2,-4(fp)
    779c:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
    77a0:	e0bffd17 	ldw	r2,-12(fp)
    77a4:	1080020b 	ldhu	r2,8(r2)
    77a8:	10bfffcc 	andi	r2,r2,65535
    77ac:	10000426 	beq	r2,zero,77c0 <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
    77b0:	e0bffd17 	ldw	r2,-12(fp)
    77b4:	e0fffe0b 	ldhu	r3,-8(fp)
    77b8:	10c0020d 	sth	r3,8(r2)
    77bc:	00000b06 	br	77ec <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
    77c0:	e0bffd17 	ldw	r2,-12(fp)
    77c4:	10800283 	ldbu	r2,10(r2)
    77c8:	10803fcc 	andi	r2,r2,255
    77cc:	1000041e 	bne	r2,zero,77e0 <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
    77d0:	e0bffd17 	ldw	r2,-12(fp)
    77d4:	e0fffe0b 	ldhu	r3,-8(fp)
    77d8:	10c0020d 	sth	r3,8(r2)
    77dc:	00000306 	br	77ec <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
    77e0:	e0bfff17 	ldw	r2,-4(fp)
    77e4:	00c01244 	movi	r3,73
    77e8:	10c00005 	stb	r3,0(r2)
    77ec:	e0bffa17 	ldw	r2,-24(fp)
    77f0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    77f4:	e0bffb17 	ldw	r2,-20(fp)
    77f8:	1001703a 	wrctl	status,r2
    77fc:	00000106 	br	7804 <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
    7800:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
    7804:	e037883a 	mov	sp,fp
    7808:	df000017 	ldw	fp,0(sp)
    780c:	dec00104 	addi	sp,sp,4
    7810:	f800283a 	ret

00007814 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
    7814:	defff104 	addi	sp,sp,-60
    7818:	dfc00e15 	stw	ra,56(sp)
    781c:	df000d15 	stw	fp,52(sp)
    7820:	df000d04 	addi	fp,sp,52
    7824:	2007883a 	mov	r3,r4
    7828:	2805883a 	mov	r2,r5
    782c:	e0fffe05 	stb	r3,-8(fp)
    7830:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
    7834:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
    7838:	e0bffe03 	ldbu	r2,-8(fp)
    783c:	10800530 	cmpltui	r2,r2,20
    7840:	1000051e 	bne	r2,zero,7858 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
    7844:	e0bffe03 	ldbu	r2,-8(fp)
    7848:	10803fe0 	cmpeqi	r2,r2,255
    784c:	1000021e 	bne	r2,zero,7858 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
    7850:	00800a84 	movi	r2,42
    7854:	00012606 	br	7cf0 <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
    7858:	e0bfff03 	ldbu	r2,-4(fp)
    785c:	10800530 	cmpltui	r2,r2,20
    7860:	1000021e 	bne	r2,zero,786c <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
    7864:	00800a84 	movi	r2,42
    7868:	00012106 	br	7cf0 <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    786c:	0005303a 	rdctl	r2,status
    7870:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7874:	e0fffd17 	ldw	r3,-12(fp)
    7878:	00bfff84 	movi	r2,-2
    787c:	1884703a 	and	r2,r3,r2
    7880:	1001703a 	wrctl	status,r2
  
  return context;
    7884:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    7888:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
    788c:	e0ffff03 	ldbu	r3,-4(fp)
    7890:	008000b4 	movhi	r2,2
    7894:	10a29204 	addi	r2,r2,-30136
    7898:	18c7883a 	add	r3,r3,r3
    789c:	18c7883a 	add	r3,r3,r3
    78a0:	10c5883a 	add	r2,r2,r3
    78a4:	10800017 	ldw	r2,0(r2)
    78a8:	10000626 	beq	r2,zero,78c4 <OSTaskChangePrio+0xb0>
    78ac:	e0bff517 	ldw	r2,-44(fp)
    78b0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    78b4:	e0bff617 	ldw	r2,-40(fp)
    78b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
    78bc:	00800a04 	movi	r2,40
    78c0:	00010b06 	br	7cf0 <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
    78c4:	e0bffe03 	ldbu	r2,-8(fp)
    78c8:	10803fd8 	cmpnei	r2,r2,255
    78cc:	1000031e 	bne	r2,zero,78dc <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
    78d0:	d0a80317 	ldw	r2,-24564(gp)
    78d4:	10800c83 	ldbu	r2,50(r2)
    78d8:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
    78dc:	e0fffe03 	ldbu	r3,-8(fp)
    78e0:	008000b4 	movhi	r2,2
    78e4:	10a29204 	addi	r2,r2,-30136
    78e8:	18c7883a 	add	r3,r3,r3
    78ec:	18c7883a 	add	r3,r3,r3
    78f0:	10c5883a 	add	r2,r2,r3
    78f4:	10800017 	ldw	r2,0(r2)
    78f8:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
    78fc:	e0bff817 	ldw	r2,-32(fp)
    7900:	1000061e 	bne	r2,zero,791c <OSTaskChangePrio+0x108>
    7904:	e0bff517 	ldw	r2,-44(fp)
    7908:	e0bff715 	stw	r2,-36(fp)
    790c:	e0bff717 	ldw	r2,-36(fp)
    7910:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
    7914:	00800a44 	movi	r2,41
    7918:	0000f506 	br	7cf0 <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
    791c:	e0bff817 	ldw	r2,-32(fp)
    7920:	10800058 	cmpnei	r2,r2,1
    7924:	1000061e 	bne	r2,zero,7940 <OSTaskChangePrio+0x12c>
    7928:	e0bff517 	ldw	r2,-44(fp)
    792c:	e0bff915 	stw	r2,-28(fp)
    7930:	e0bff917 	ldw	r2,-28(fp)
    7934:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
    7938:	008010c4 	movi	r2,67
    793c:	0000ec06 	br	7cf0 <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
    7940:	e0bfff03 	ldbu	r2,-4(fp)
    7944:	1004d0fa 	srli	r2,r2,3
    7948:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
    794c:	e0bfff03 	ldbu	r2,-4(fp)
    7950:	108001cc 	andi	r2,r2,7
    7954:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
    7958:	e0bffb03 	ldbu	r2,-20(fp)
    795c:	00c00044 	movi	r3,1
    7960:	1884983a 	sll	r2,r3,r2
    7964:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
    7968:	e0bffb43 	ldbu	r2,-19(fp)
    796c:	00c00044 	movi	r3,1
    7970:	1884983a 	sll	r2,r3,r2
    7974:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
    7978:	e0fffe03 	ldbu	r3,-8(fp)
    797c:	008000b4 	movhi	r2,2
    7980:	10a29204 	addi	r2,r2,-30136
    7984:	18c7883a 	add	r3,r3,r3
    7988:	18c7883a 	add	r3,r3,r3
    798c:	10c5883a 	add	r2,r2,r3
    7990:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
    7994:	e0ffff03 	ldbu	r3,-4(fp)
    7998:	008000b4 	movhi	r2,2
    799c:	10a29204 	addi	r2,r2,-30136
    79a0:	18c7883a 	add	r3,r3,r3
    79a4:	18c7883a 	add	r3,r3,r3
    79a8:	10c5883a 	add	r2,r2,r3
    79ac:	e0fff817 	ldw	r3,-32(fp)
    79b0:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
    79b4:	e0bff817 	ldw	r2,-32(fp)
    79b8:	10800d03 	ldbu	r2,52(r2)
    79bc:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
    79c0:	e0bff817 	ldw	r2,-32(fp)
    79c4:	10800d83 	ldbu	r2,54(r2)
    79c8:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
    79cc:	e0bff817 	ldw	r2,-32(fp)
    79d0:	10800d43 	ldbu	r2,53(r2)
    79d4:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
    79d8:	e0fffc03 	ldbu	r3,-16(fp)
    79dc:	d0a80044 	addi	r2,gp,-24575
    79e0:	1885883a 	add	r2,r3,r2
    79e4:	10c00003 	ldbu	r3,0(r2)
    79e8:	e0bffc83 	ldbu	r2,-14(fp)
    79ec:	1884703a 	and	r2,r3,r2
    79f0:	10803fcc 	andi	r2,r2,255
    79f4:	10002826 	beq	r2,zero,7a98 <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
    79f8:	e0fffc03 	ldbu	r3,-16(fp)
    79fc:	e13ffc03 	ldbu	r4,-16(fp)
    7a00:	d0a80044 	addi	r2,gp,-24575
    7a04:	2085883a 	add	r2,r4,r2
    7a08:	10800003 	ldbu	r2,0(r2)
    7a0c:	1009883a 	mov	r4,r2
    7a10:	e0bffc83 	ldbu	r2,-14(fp)
    7a14:	0084303a 	nor	r2,zero,r2
    7a18:	2084703a 	and	r2,r4,r2
    7a1c:	1009883a 	mov	r4,r2
    7a20:	d0a80044 	addi	r2,gp,-24575
    7a24:	1885883a 	add	r2,r3,r2
    7a28:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
    7a2c:	e0fffc03 	ldbu	r3,-16(fp)
    7a30:	d0a80044 	addi	r2,gp,-24575
    7a34:	1885883a 	add	r2,r3,r2
    7a38:	10800003 	ldbu	r2,0(r2)
    7a3c:	10803fcc 	andi	r2,r2,255
    7a40:	1000061e 	bne	r2,zero,7a5c <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
    7a44:	e0bffc43 	ldbu	r2,-15(fp)
    7a48:	0084303a 	nor	r2,zero,r2
    7a4c:	1007883a 	mov	r3,r2
    7a50:	d0a80003 	ldbu	r2,-24576(gp)
    7a54:	1884703a 	and	r2,r3,r2
    7a58:	d0a80005 	stb	r2,-24576(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
    7a5c:	d0e80003 	ldbu	r3,-24576(gp)
    7a60:	e0bffb83 	ldbu	r2,-18(fp)
    7a64:	1884b03a 	or	r2,r3,r2
    7a68:	d0a80005 	stb	r2,-24576(gp)
         OSRdyTbl[y_new] |= bitx_new;
    7a6c:	e0fffb03 	ldbu	r3,-20(fp)
    7a70:	e13ffb03 	ldbu	r4,-20(fp)
    7a74:	d0a80044 	addi	r2,gp,-24575
    7a78:	2085883a 	add	r2,r4,r2
    7a7c:	11000003 	ldbu	r4,0(r2)
    7a80:	e0bffbc3 	ldbu	r2,-17(fp)
    7a84:	2084b03a 	or	r2,r4,r2
    7a88:	1009883a 	mov	r4,r2
    7a8c:	d0a80044 	addi	r2,gp,-24575
    7a90:	1885883a 	add	r2,r3,r2
    7a94:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
    7a98:	e0bff817 	ldw	r2,-32(fp)
    7a9c:	10800717 	ldw	r2,28(r2)
    7aa0:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
    7aa4:	e0bff317 	ldw	r2,-52(fp)
    7aa8:	10003326 	beq	r2,zero,7b78 <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
    7aac:	e0bffc03 	ldbu	r2,-16(fp)
    7ab0:	e0fffc03 	ldbu	r3,-16(fp)
    7ab4:	e13ff317 	ldw	r4,-52(fp)
    7ab8:	20c7883a 	add	r3,r4,r3
    7abc:	18c002c4 	addi	r3,r3,11
    7ac0:	18c00003 	ldbu	r3,0(r3)
    7ac4:	1809883a 	mov	r4,r3
    7ac8:	e0fffc83 	ldbu	r3,-14(fp)
    7acc:	00c6303a 	nor	r3,zero,r3
    7ad0:	20c6703a 	and	r3,r4,r3
    7ad4:	1809883a 	mov	r4,r3
    7ad8:	e0fff317 	ldw	r3,-52(fp)
    7adc:	1885883a 	add	r2,r3,r2
    7ae0:	108002c4 	addi	r2,r2,11
    7ae4:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
    7ae8:	e0bffc03 	ldbu	r2,-16(fp)
    7aec:	e0fff317 	ldw	r3,-52(fp)
    7af0:	1885883a 	add	r2,r3,r2
    7af4:	108002c4 	addi	r2,r2,11
    7af8:	10800003 	ldbu	r2,0(r2)
    7afc:	10803fcc 	andi	r2,r2,255
    7b00:	1000091e 	bne	r2,zero,7b28 <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
    7b04:	e0bff317 	ldw	r2,-52(fp)
    7b08:	10800283 	ldbu	r2,10(r2)
    7b0c:	1007883a 	mov	r3,r2
    7b10:	e0bffc43 	ldbu	r2,-15(fp)
    7b14:	0084303a 	nor	r2,zero,r2
    7b18:	1884703a 	and	r2,r3,r2
    7b1c:	1007883a 	mov	r3,r2
    7b20:	e0bff317 	ldw	r2,-52(fp)
    7b24:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
    7b28:	e0bff317 	ldw	r2,-52(fp)
    7b2c:	10c00283 	ldbu	r3,10(r2)
    7b30:	e0bffb83 	ldbu	r2,-18(fp)
    7b34:	1884b03a 	or	r2,r3,r2
    7b38:	1007883a 	mov	r3,r2
    7b3c:	e0bff317 	ldw	r2,-52(fp)
    7b40:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
    7b44:	e0bffb03 	ldbu	r2,-20(fp)
    7b48:	e0fffb03 	ldbu	r3,-20(fp)
    7b4c:	e13ff317 	ldw	r4,-52(fp)
    7b50:	20c7883a 	add	r3,r4,r3
    7b54:	18c002c4 	addi	r3,r3,11
    7b58:	19000003 	ldbu	r4,0(r3)
    7b5c:	e0fffbc3 	ldbu	r3,-17(fp)
    7b60:	20c6b03a 	or	r3,r4,r3
    7b64:	1809883a 	mov	r4,r3
    7b68:	e0fff317 	ldw	r3,-52(fp)
    7b6c:	1885883a 	add	r2,r3,r2
    7b70:	108002c4 	addi	r2,r2,11
    7b74:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
    7b78:	e0bff817 	ldw	r2,-32(fp)
    7b7c:	10800817 	ldw	r2,32(r2)
    7b80:	10004226 	beq	r2,zero,7c8c <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
    7b84:	e0bff817 	ldw	r2,-32(fp)
    7b88:	10800817 	ldw	r2,32(r2)
    7b8c:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
    7b90:	e0bff417 	ldw	r2,-48(fp)
    7b94:	10800017 	ldw	r2,0(r2)
    7b98:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
    7b9c:	00003906 	br	7c84 <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
    7ba0:	e0bffc03 	ldbu	r2,-16(fp)
    7ba4:	e0fffc03 	ldbu	r3,-16(fp)
    7ba8:	e13ff317 	ldw	r4,-52(fp)
    7bac:	20c7883a 	add	r3,r4,r3
    7bb0:	18c002c4 	addi	r3,r3,11
    7bb4:	18c00003 	ldbu	r3,0(r3)
    7bb8:	1809883a 	mov	r4,r3
    7bbc:	e0fffc83 	ldbu	r3,-14(fp)
    7bc0:	00c6303a 	nor	r3,zero,r3
    7bc4:	20c6703a 	and	r3,r4,r3
    7bc8:	1809883a 	mov	r4,r3
    7bcc:	e0fff317 	ldw	r3,-52(fp)
    7bd0:	1885883a 	add	r2,r3,r2
    7bd4:	108002c4 	addi	r2,r2,11
    7bd8:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
    7bdc:	e0bffc03 	ldbu	r2,-16(fp)
    7be0:	e0fff317 	ldw	r3,-52(fp)
    7be4:	1885883a 	add	r2,r3,r2
    7be8:	108002c4 	addi	r2,r2,11
    7bec:	10800003 	ldbu	r2,0(r2)
    7bf0:	10803fcc 	andi	r2,r2,255
    7bf4:	1000091e 	bne	r2,zero,7c1c <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
    7bf8:	e0bff317 	ldw	r2,-52(fp)
    7bfc:	10800283 	ldbu	r2,10(r2)
    7c00:	1007883a 	mov	r3,r2
    7c04:	e0bffc43 	ldbu	r2,-15(fp)
    7c08:	0084303a 	nor	r2,zero,r2
    7c0c:	1884703a 	and	r2,r3,r2
    7c10:	1007883a 	mov	r3,r2
    7c14:	e0bff317 	ldw	r2,-52(fp)
    7c18:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
    7c1c:	e0bff317 	ldw	r2,-52(fp)
    7c20:	10c00283 	ldbu	r3,10(r2)
    7c24:	e0bffb83 	ldbu	r2,-18(fp)
    7c28:	1884b03a 	or	r2,r3,r2
    7c2c:	1007883a 	mov	r3,r2
    7c30:	e0bff317 	ldw	r2,-52(fp)
    7c34:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
    7c38:	e0bffb03 	ldbu	r2,-20(fp)
    7c3c:	e0fffb03 	ldbu	r3,-20(fp)
    7c40:	e13ff317 	ldw	r4,-52(fp)
    7c44:	20c7883a 	add	r3,r4,r3
    7c48:	18c002c4 	addi	r3,r3,11
    7c4c:	19000003 	ldbu	r4,0(r3)
    7c50:	e0fffbc3 	ldbu	r3,-17(fp)
    7c54:	20c6b03a 	or	r3,r4,r3
    7c58:	1809883a 	mov	r4,r3
    7c5c:	e0fff317 	ldw	r3,-52(fp)
    7c60:	1885883a 	add	r2,r3,r2
    7c64:	108002c4 	addi	r2,r2,11
    7c68:	11000005 	stb	r4,0(r2)
            pevents++;
    7c6c:	e0bff417 	ldw	r2,-48(fp)
    7c70:	10800104 	addi	r2,r2,4
    7c74:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
    7c78:	e0bff417 	ldw	r2,-48(fp)
    7c7c:	10800017 	ldw	r2,0(r2)
    7c80:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
    7c84:	e0bff317 	ldw	r2,-52(fp)
    7c88:	103fc51e 	bne	r2,zero,7ba0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007ba0>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
    7c8c:	e0bff817 	ldw	r2,-32(fp)
    7c90:	e0ffff03 	ldbu	r3,-4(fp)
    7c94:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
    7c98:	e0bff817 	ldw	r2,-32(fp)
    7c9c:	e0fffb03 	ldbu	r3,-20(fp)
    7ca0:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
    7ca4:	e0bff817 	ldw	r2,-32(fp)
    7ca8:	e0fffb43 	ldbu	r3,-19(fp)
    7cac:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
    7cb0:	e0bff817 	ldw	r2,-32(fp)
    7cb4:	e0fffb83 	ldbu	r3,-18(fp)
    7cb8:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
    7cbc:	e0bff817 	ldw	r2,-32(fp)
    7cc0:	e0fffbc3 	ldbu	r3,-17(fp)
    7cc4:	10c00d45 	stb	r3,53(r2)
    7cc8:	e0bff517 	ldw	r2,-44(fp)
    7ccc:	e0bffa15 	stw	r2,-24(fp)
    7cd0:	e0bffa17 	ldw	r2,-24(fp)
    7cd4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
    7cd8:	d0a7f443 	ldbu	r2,-24623(gp)
    7cdc:	10803fcc 	andi	r2,r2,255
    7ce0:	10800058 	cmpnei	r2,r2,1
    7ce4:	1000011e 	bne	r2,zero,7cec <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
    7ce8:	00035d40 	call	35d4 <OS_Sched>
    }
    return (OS_ERR_NONE);
    7cec:	0005883a 	mov	r2,zero
}
    7cf0:	e037883a 	mov	sp,fp
    7cf4:	dfc00117 	ldw	ra,4(sp)
    7cf8:	df000017 	ldw	fp,0(sp)
    7cfc:	dec00204 	addi	sp,sp,8
    7d00:	f800283a 	ret

00007d04 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
    7d04:	deffee04 	addi	sp,sp,-72
    7d08:	dfc01115 	stw	ra,68(sp)
    7d0c:	df001015 	stw	fp,64(sp)
    7d10:	df001004 	addi	fp,sp,64
    7d14:	e13ffc15 	stw	r4,-16(fp)
    7d18:	e17ffd15 	stw	r5,-12(fp)
    7d1c:	e1bffe15 	stw	r6,-8(fp)
    7d20:	3805883a 	mov	r2,r7
    7d24:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
    7d28:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
    7d2c:	e0bfff03 	ldbu	r2,-4(fp)
    7d30:	10800570 	cmpltui	r2,r2,21
    7d34:	1000021e 	bne	r2,zero,7d40 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
    7d38:	00800a84 	movi	r2,42
    7d3c:	00005706 	br	7e9c <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7d40:	0005303a 	rdctl	r2,status
    7d44:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7d48:	e0fffb17 	ldw	r3,-20(fp)
    7d4c:	00bfff84 	movi	r2,-2
    7d50:	1884703a 	and	r2,r3,r2
    7d54:	1001703a 	wrctl	status,r2
  
  return context;
    7d58:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    7d5c:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
    7d60:	d0a80203 	ldbu	r2,-24568(gp)
    7d64:	10803fcc 	andi	r2,r2,255
    7d68:	10000626 	beq	r2,zero,7d84 <OSTaskCreate+0x80>
    7d6c:	e0bff317 	ldw	r2,-52(fp)
    7d70:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7d74:	e0bff417 	ldw	r2,-48(fp)
    7d78:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
    7d7c:	00800f04 	movi	r2,60
    7d80:	00004606 	br	7e9c <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
    7d84:	e0ffff03 	ldbu	r3,-4(fp)
    7d88:	008000b4 	movhi	r2,2
    7d8c:	10a29204 	addi	r2,r2,-30136
    7d90:	18c7883a 	add	r3,r3,r3
    7d94:	18c7883a 	add	r3,r3,r3
    7d98:	10c5883a 	add	r2,r2,r3
    7d9c:	10800017 	ldw	r2,0(r2)
    7da0:	1000391e 	bne	r2,zero,7e88 <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
    7da4:	e0ffff03 	ldbu	r3,-4(fp)
    7da8:	008000b4 	movhi	r2,2
    7dac:	10a29204 	addi	r2,r2,-30136
    7db0:	18c7883a 	add	r3,r3,r3
    7db4:	18c7883a 	add	r3,r3,r3
    7db8:	10c5883a 	add	r2,r2,r3
    7dbc:	00c00044 	movi	r3,1
    7dc0:	10c00015 	stw	r3,0(r2)
    7dc4:	e0bff317 	ldw	r2,-52(fp)
    7dc8:	e0bff515 	stw	r2,-44(fp)
    7dcc:	e0bff517 	ldw	r2,-44(fp)
    7dd0:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
    7dd4:	000f883a 	mov	r7,zero
    7dd8:	e1bffe17 	ldw	r6,-8(fp)
    7ddc:	e17ffd17 	ldw	r5,-12(fp)
    7de0:	e13ffc17 	ldw	r4,-16(fp)
    7de4:	000cac00 	call	cac0 <OSTaskStkInit>
    7de8:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
    7dec:	e0bfff03 	ldbu	r2,-4(fp)
    7df0:	d8000215 	stw	zero,8(sp)
    7df4:	d8000115 	stw	zero,4(sp)
    7df8:	d8000015 	stw	zero,0(sp)
    7dfc:	000f883a 	mov	r7,zero
    7e00:	000d883a 	mov	r6,zero
    7e04:	e17ff717 	ldw	r5,-36(fp)
    7e08:	1009883a 	mov	r4,r2
    7e0c:	00039e40 	call	39e4 <OS_TCBInit>
    7e10:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
    7e14:	e0bff803 	ldbu	r2,-32(fp)
    7e18:	1000061e 	bne	r2,zero,7e34 <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
    7e1c:	d0a7f443 	ldbu	r2,-24623(gp)
    7e20:	10803fcc 	andi	r2,r2,255
    7e24:	10800058 	cmpnei	r2,r2,1
    7e28:	1000151e 	bne	r2,zero,7e80 <OSTaskCreate+0x17c>
                OS_Sched();
    7e2c:	00035d40 	call	35d4 <OS_Sched>
    7e30:	00001306 	br	7e80 <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7e34:	0005303a 	rdctl	r2,status
    7e38:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7e3c:	e0fffa17 	ldw	r3,-24(fp)
    7e40:	00bfff84 	movi	r2,-2
    7e44:	1884703a 	and	r2,r3,r2
    7e48:	1001703a 	wrctl	status,r2
  
  return context;
    7e4c:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
    7e50:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
    7e54:	e0ffff03 	ldbu	r3,-4(fp)
    7e58:	008000b4 	movhi	r2,2
    7e5c:	10a29204 	addi	r2,r2,-30136
    7e60:	18c7883a 	add	r3,r3,r3
    7e64:	18c7883a 	add	r3,r3,r3
    7e68:	10c5883a 	add	r2,r2,r3
    7e6c:	10000015 	stw	zero,0(r2)
    7e70:	e0bff317 	ldw	r2,-52(fp)
    7e74:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7e78:	e0bff617 	ldw	r2,-40(fp)
    7e7c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
    7e80:	e0bff803 	ldbu	r2,-32(fp)
    7e84:	00000506 	br	7e9c <OSTaskCreate+0x198>
    7e88:	e0bff317 	ldw	r2,-52(fp)
    7e8c:	e0bff915 	stw	r2,-28(fp)
    7e90:	e0bff917 	ldw	r2,-28(fp)
    7e94:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
    7e98:	00800a04 	movi	r2,40
}
    7e9c:	e037883a 	mov	sp,fp
    7ea0:	dfc00117 	ldw	ra,4(sp)
    7ea4:	df000017 	ldw	fp,0(sp)
    7ea8:	dec00204 	addi	sp,sp,8
    7eac:	f800283a 	ret

00007eb0 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
    7eb0:	deffec04 	addi	sp,sp,-80
    7eb4:	dfc01315 	stw	ra,76(sp)
    7eb8:	df001215 	stw	fp,72(sp)
    7ebc:	df001204 	addi	fp,sp,72
    7ec0:	e13ffa15 	stw	r4,-24(fp)
    7ec4:	e17ffb15 	stw	r5,-20(fp)
    7ec8:	e1bffc15 	stw	r6,-16(fp)
    7ecc:	3809883a 	mov	r4,r7
    7ed0:	e0c00217 	ldw	r3,8(fp)
    7ed4:	e0800617 	ldw	r2,24(fp)
    7ed8:	e13ffd05 	stb	r4,-12(fp)
    7edc:	e0fffe0d 	sth	r3,-8(fp)
    7ee0:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
    7ee4:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
    7ee8:	e0bffd03 	ldbu	r2,-12(fp)
    7eec:	10800570 	cmpltui	r2,r2,21
    7ef0:	1000021e 	bne	r2,zero,7efc <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
    7ef4:	00800a84 	movi	r2,42
    7ef8:	00006106 	br	8080 <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7efc:	0005303a 	rdctl	r2,status
    7f00:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7f04:	e0fff917 	ldw	r3,-28(fp)
    7f08:	00bfff84 	movi	r2,-2
    7f0c:	1884703a 	and	r2,r3,r2
    7f10:	1001703a 	wrctl	status,r2
  
  return context;
    7f14:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    7f18:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
    7f1c:	d0a80203 	ldbu	r2,-24568(gp)
    7f20:	10803fcc 	andi	r2,r2,255
    7f24:	10000626 	beq	r2,zero,7f40 <OSTaskCreateExt+0x90>
    7f28:	e0bff117 	ldw	r2,-60(fp)
    7f2c:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7f30:	e0bff217 	ldw	r2,-56(fp)
    7f34:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
    7f38:	00800f04 	movi	r2,60
    7f3c:	00005006 	br	8080 <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
    7f40:	e0fffd03 	ldbu	r3,-12(fp)
    7f44:	008000b4 	movhi	r2,2
    7f48:	10a29204 	addi	r2,r2,-30136
    7f4c:	18c7883a 	add	r3,r3,r3
    7f50:	18c7883a 	add	r3,r3,r3
    7f54:	10c5883a 	add	r2,r2,r3
    7f58:	10800017 	ldw	r2,0(r2)
    7f5c:	1000431e 	bne	r2,zero,806c <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
    7f60:	e0fffd03 	ldbu	r3,-12(fp)
    7f64:	008000b4 	movhi	r2,2
    7f68:	10a29204 	addi	r2,r2,-30136
    7f6c:	18c7883a 	add	r3,r3,r3
    7f70:	18c7883a 	add	r3,r3,r3
    7f74:	10c5883a 	add	r2,r2,r3
    7f78:	00c00044 	movi	r3,1
    7f7c:	10c00015 	stw	r3,0(r2)
    7f80:	e0bff117 	ldw	r2,-60(fp)
    7f84:	e0bff315 	stw	r2,-52(fp)
    7f88:	e0bff317 	ldw	r2,-52(fp)
    7f8c:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
    7f90:	e0bfff0b 	ldhu	r2,-4(fp)
    7f94:	100d883a 	mov	r6,r2
    7f98:	e1400417 	ldw	r5,16(fp)
    7f9c:	e1000317 	ldw	r4,12(fp)
    7fa0:	0008f100 	call	8f10 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
    7fa4:	e0bfff0b 	ldhu	r2,-4(fp)
    7fa8:	100f883a 	mov	r7,r2
    7fac:	e1bffc17 	ldw	r6,-16(fp)
    7fb0:	e17ffb17 	ldw	r5,-20(fp)
    7fb4:	e13ffa17 	ldw	r4,-24(fp)
    7fb8:	000cac00 	call	cac0 <OSTaskStkInit>
    7fbc:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
    7fc0:	e0fffd03 	ldbu	r3,-12(fp)
    7fc4:	e13ffe0b 	ldhu	r4,-8(fp)
    7fc8:	e0bfff0b 	ldhu	r2,-4(fp)
    7fcc:	d8800215 	stw	r2,8(sp)
    7fd0:	e0800517 	ldw	r2,20(fp)
    7fd4:	d8800115 	stw	r2,4(sp)
    7fd8:	e0800417 	ldw	r2,16(fp)
    7fdc:	d8800015 	stw	r2,0(sp)
    7fe0:	200f883a 	mov	r7,r4
    7fe4:	e1800317 	ldw	r6,12(fp)
    7fe8:	e17ff517 	ldw	r5,-44(fp)
    7fec:	1809883a 	mov	r4,r3
    7ff0:	00039e40 	call	39e4 <OS_TCBInit>
    7ff4:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
    7ff8:	e0bff603 	ldbu	r2,-40(fp)
    7ffc:	1000061e 	bne	r2,zero,8018 <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
    8000:	d0a7f443 	ldbu	r2,-24623(gp)
    8004:	10803fcc 	andi	r2,r2,255
    8008:	10800058 	cmpnei	r2,r2,1
    800c:	1000151e 	bne	r2,zero,8064 <OSTaskCreateExt+0x1b4>
                OS_Sched();
    8010:	00035d40 	call	35d4 <OS_Sched>
    8014:	00001306 	br	8064 <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8018:	0005303a 	rdctl	r2,status
    801c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8020:	e0fff817 	ldw	r3,-32(fp)
    8024:	00bfff84 	movi	r2,-2
    8028:	1884703a 	and	r2,r3,r2
    802c:	1001703a 	wrctl	status,r2
  
  return context;
    8030:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
    8034:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
    8038:	e0fffd03 	ldbu	r3,-12(fp)
    803c:	008000b4 	movhi	r2,2
    8040:	10a29204 	addi	r2,r2,-30136
    8044:	18c7883a 	add	r3,r3,r3
    8048:	18c7883a 	add	r3,r3,r3
    804c:	10c5883a 	add	r2,r2,r3
    8050:	10000015 	stw	zero,0(r2)
    8054:	e0bff117 	ldw	r2,-60(fp)
    8058:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    805c:	e0bff417 	ldw	r2,-48(fp)
    8060:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
    8064:	e0bff603 	ldbu	r2,-40(fp)
    8068:	00000506 	br	8080 <OSTaskCreateExt+0x1d0>
    806c:	e0bff117 	ldw	r2,-60(fp)
    8070:	e0bff715 	stw	r2,-36(fp)
    8074:	e0bff717 	ldw	r2,-36(fp)
    8078:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
    807c:	00800a04 	movi	r2,40
}
    8080:	e037883a 	mov	sp,fp
    8084:	dfc00117 	ldw	ra,4(sp)
    8088:	df000017 	ldw	fp,0(sp)
    808c:	dec00204 	addi	sp,sp,8
    8090:	f800283a 	ret

00008094 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
    8094:	defff404 	addi	sp,sp,-48
    8098:	dfc00b15 	stw	ra,44(sp)
    809c:	df000a15 	stw	fp,40(sp)
    80a0:	df000a04 	addi	fp,sp,40
    80a4:	2005883a 	mov	r2,r4
    80a8:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
    80ac:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
    80b0:	d0a80203 	ldbu	r2,-24568(gp)
    80b4:	10803fcc 	andi	r2,r2,255
    80b8:	10000226 	beq	r2,zero,80c4 <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
    80bc:	00801004 	movi	r2,64
    80c0:	0000c006 	br	83c4 <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
    80c4:	e0bfff03 	ldbu	r2,-4(fp)
    80c8:	10800518 	cmpnei	r2,r2,20
    80cc:	1000021e 	bne	r2,zero,80d8 <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
    80d0:	00800f84 	movi	r2,62
    80d4:	0000bb06 	br	83c4 <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
    80d8:	e0bfff03 	ldbu	r2,-4(fp)
    80dc:	10800530 	cmpltui	r2,r2,20
    80e0:	1000051e 	bne	r2,zero,80f8 <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
    80e4:	e0bfff03 	ldbu	r2,-4(fp)
    80e8:	10803fe0 	cmpeqi	r2,r2,255
    80ec:	1000021e 	bne	r2,zero,80f8 <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
    80f0:	00800a84 	movi	r2,42
    80f4:	0000b306 	br	83c4 <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    80f8:	0005303a 	rdctl	r2,status
    80fc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8100:	e0fffe17 	ldw	r3,-8(fp)
    8104:	00bfff84 	movi	r2,-2
    8108:	1884703a 	and	r2,r3,r2
    810c:	1001703a 	wrctl	status,r2
  
  return context;
    8110:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
    8114:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
    8118:	e0bfff03 	ldbu	r2,-4(fp)
    811c:	10803fd8 	cmpnei	r2,r2,255
    8120:	1000031e 	bne	r2,zero,8130 <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
    8124:	d0a80317 	ldw	r2,-24564(gp)
    8128:	10800c83 	ldbu	r2,50(r2)
    812c:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    8130:	e0ffff03 	ldbu	r3,-4(fp)
    8134:	008000b4 	movhi	r2,2
    8138:	10a29204 	addi	r2,r2,-30136
    813c:	18c7883a 	add	r3,r3,r3
    8140:	18c7883a 	add	r3,r3,r3
    8144:	10c5883a 	add	r2,r2,r3
    8148:	10800017 	ldw	r2,0(r2)
    814c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
    8150:	e0bff817 	ldw	r2,-32(fp)
    8154:	1000061e 	bne	r2,zero,8170 <OSTaskDel+0xdc>
    8158:	e0bff617 	ldw	r2,-40(fp)
    815c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8160:	e0bff717 	ldw	r2,-36(fp)
    8164:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    8168:	008010c4 	movi	r2,67
    816c:	00009506 	br	83c4 <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
    8170:	e0bff817 	ldw	r2,-32(fp)
    8174:	10800058 	cmpnei	r2,r2,1
    8178:	1000061e 	bne	r2,zero,8194 <OSTaskDel+0x100>
    817c:	e0bff617 	ldw	r2,-40(fp)
    8180:	e0bff915 	stw	r2,-28(fp)
    8184:	e0bff917 	ldw	r2,-28(fp)
    8188:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
    818c:	00800f44 	movi	r2,61
    8190:	00008c06 	br	83c4 <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
    8194:	e0bff817 	ldw	r2,-32(fp)
    8198:	10800d03 	ldbu	r2,52(r2)
    819c:	10c03fcc 	andi	r3,r2,255
    81a0:	e0bff817 	ldw	r2,-32(fp)
    81a4:	10800d03 	ldbu	r2,52(r2)
    81a8:	11003fcc 	andi	r4,r2,255
    81ac:	d0a80044 	addi	r2,gp,-24575
    81b0:	2085883a 	add	r2,r4,r2
    81b4:	10800003 	ldbu	r2,0(r2)
    81b8:	1009883a 	mov	r4,r2
    81bc:	e0bff817 	ldw	r2,-32(fp)
    81c0:	10800d43 	ldbu	r2,53(r2)
    81c4:	0084303a 	nor	r2,zero,r2
    81c8:	2084703a 	and	r2,r4,r2
    81cc:	1009883a 	mov	r4,r2
    81d0:	d0a80044 	addi	r2,gp,-24575
    81d4:	1885883a 	add	r2,r3,r2
    81d8:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
    81dc:	e0bff817 	ldw	r2,-32(fp)
    81e0:	10800d03 	ldbu	r2,52(r2)
    81e4:	10c03fcc 	andi	r3,r2,255
    81e8:	d0a80044 	addi	r2,gp,-24575
    81ec:	1885883a 	add	r2,r3,r2
    81f0:	10800003 	ldbu	r2,0(r2)
    81f4:	10803fcc 	andi	r2,r2,255
    81f8:	1000071e 	bne	r2,zero,8218 <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
    81fc:	e0bff817 	ldw	r2,-32(fp)
    8200:	10800d83 	ldbu	r2,54(r2)
    8204:	0084303a 	nor	r2,zero,r2
    8208:	1007883a 	mov	r3,r2
    820c:	d0a80003 	ldbu	r2,-24576(gp)
    8210:	1884703a 	and	r2,r3,r2
    8214:	d0a80005 	stb	r2,-24576(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
    8218:	e0bff817 	ldw	r2,-32(fp)
    821c:	10800717 	ldw	r2,28(r2)
    8220:	10000526 	beq	r2,zero,8238 <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
    8224:	e0bff817 	ldw	r2,-32(fp)
    8228:	10800717 	ldw	r2,28(r2)
    822c:	100b883a 	mov	r5,r2
    8230:	e13ff817 	ldw	r4,-32(fp)
    8234:	0002f800 	call	2f80 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
    8238:	e0bff817 	ldw	r2,-32(fp)
    823c:	10800817 	ldw	r2,32(r2)
    8240:	10000526 	beq	r2,zero,8258 <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
    8244:	e0bff817 	ldw	r2,-32(fp)
    8248:	10800817 	ldw	r2,32(r2)
    824c:	100b883a 	mov	r5,r2
    8250:	e13ff817 	ldw	r4,-32(fp)
    8254:	00030380 	call	3038 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
    8258:	e0bff817 	ldw	r2,-32(fp)
    825c:	10800a17 	ldw	r2,40(r2)
    8260:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
    8264:	e0bffb17 	ldw	r2,-20(fp)
    8268:	10000226 	beq	r2,zero,8274 <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
    826c:	e13ffb17 	ldw	r4,-20(fp)
    8270:	00054b80 	call	54b8 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
    8274:	e0bff817 	ldw	r2,-32(fp)
    8278:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
    827c:	e0bff817 	ldw	r2,-32(fp)
    8280:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
    8284:	e0bff817 	ldw	r2,-32(fp)
    8288:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
    828c:	d0a7f403 	ldbu	r2,-24624(gp)
    8290:	10803fcc 	andi	r2,r2,255
    8294:	10803fe0 	cmpeqi	r2,r2,255
    8298:	1000031e 	bne	r2,zero,82a8 <OSTaskDel+0x214>
        OSLockNesting++;
    829c:	d0a7f403 	ldbu	r2,-24624(gp)
    82a0:	10800044 	addi	r2,r2,1
    82a4:	d0a7f405 	stb	r2,-24624(gp)
    82a8:	e0bff617 	ldw	r2,-40(fp)
    82ac:	e0bffd15 	stw	r2,-12(fp)
    82b0:	e0bffd17 	ldw	r2,-12(fp)
    82b4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
    82b8:	0002b680 	call	2b68 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    82bc:	0005303a 	rdctl	r2,status
    82c0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    82c4:	e0fffa17 	ldw	r3,-24(fp)
    82c8:	00bfff84 	movi	r2,-2
    82cc:	1884703a 	and	r2,r3,r2
    82d0:	1001703a 	wrctl	status,r2
  
  return context;
    82d4:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
    82d8:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
    82dc:	d0a7f403 	ldbu	r2,-24624(gp)
    82e0:	10803fcc 	andi	r2,r2,255
    82e4:	10000326 	beq	r2,zero,82f4 <OSTaskDel+0x260>
        OSLockNesting--;
    82e8:	d0a7f403 	ldbu	r2,-24624(gp)
    82ec:	10bfffc4 	addi	r2,r2,-1
    82f0:	d0a7f405 	stb	r2,-24624(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
    82f4:	e13ff817 	ldw	r4,-32(fp)
    82f8:	000cc400 	call	cc40 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
    82fc:	d0a7fc43 	ldbu	r2,-24591(gp)
    8300:	10bfffc4 	addi	r2,r2,-1
    8304:	d0a7fc45 	stb	r2,-24591(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
    8308:	e0ffff03 	ldbu	r3,-4(fp)
    830c:	008000b4 	movhi	r2,2
    8310:	10a29204 	addi	r2,r2,-30136
    8314:	18c7883a 	add	r3,r3,r3
    8318:	18c7883a 	add	r3,r3,r3
    831c:	10c5883a 	add	r2,r2,r3
    8320:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
    8324:	e0bff817 	ldw	r2,-32(fp)
    8328:	10800617 	ldw	r2,24(r2)
    832c:	1000071e 	bne	r2,zero,834c <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
    8330:	e0bff817 	ldw	r2,-32(fp)
    8334:	10800517 	ldw	r2,20(r2)
    8338:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
    833c:	e0bff817 	ldw	r2,-32(fp)
    8340:	10800517 	ldw	r2,20(r2)
    8344:	d0a7f715 	stw	r2,-24612(gp)
    8348:	00000a06 	br	8374 <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
    834c:	e0bff817 	ldw	r2,-32(fp)
    8350:	10800617 	ldw	r2,24(r2)
    8354:	e0fff817 	ldw	r3,-32(fp)
    8358:	18c00517 	ldw	r3,20(r3)
    835c:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
    8360:	e0bff817 	ldw	r2,-32(fp)
    8364:	10800517 	ldw	r2,20(r2)
    8368:	e0fff817 	ldw	r3,-32(fp)
    836c:	18c00617 	ldw	r3,24(r3)
    8370:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
    8374:	d0e7fb17 	ldw	r3,-24596(gp)
    8378:	e0bff817 	ldw	r2,-32(fp)
    837c:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
    8380:	e0bff817 	ldw	r2,-32(fp)
    8384:	d0a7fb15 	stw	r2,-24596(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
    8388:	e0bff817 	ldw	r2,-32(fp)
    838c:	00c00fc4 	movi	r3,63
    8390:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
    8394:	e0bff817 	ldw	r2,-32(fp)
    8398:	10001345 	stb	zero,77(r2)
    839c:	e0bff617 	ldw	r2,-40(fp)
    83a0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    83a4:	e0bffc17 	ldw	r2,-16(fp)
    83a8:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
    83ac:	d0a7f443 	ldbu	r2,-24623(gp)
    83b0:	10803fcc 	andi	r2,r2,255
    83b4:	10800058 	cmpnei	r2,r2,1
    83b8:	1000011e 	bne	r2,zero,83c0 <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
    83bc:	00035d40 	call	35d4 <OS_Sched>
    }
    return (OS_ERR_NONE);
    83c0:	0005883a 	mov	r2,zero
}
    83c4:	e037883a 	mov	sp,fp
    83c8:	dfc00117 	ldw	ra,4(sp)
    83cc:	df000017 	ldw	fp,0(sp)
    83d0:	dec00204 	addi	sp,sp,8
    83d4:	f800283a 	ret

000083d8 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
    83d8:	defff504 	addi	sp,sp,-44
    83dc:	df000a15 	stw	fp,40(sp)
    83e0:	df000a04 	addi	fp,sp,40
    83e4:	2005883a 	mov	r2,r4
    83e8:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    83ec:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
    83f0:	e0bfff03 	ldbu	r2,-4(fp)
    83f4:	10800518 	cmpnei	r2,r2,20
    83f8:	1000021e 	bne	r2,zero,8404 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
    83fc:	00800f84 	movi	r2,62
    8400:	00004506 	br	8518 <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
    8404:	e0bfff03 	ldbu	r2,-4(fp)
    8408:	10800530 	cmpltui	r2,r2,20
    840c:	1000051e 	bne	r2,zero,8424 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
    8410:	e0bfff03 	ldbu	r2,-4(fp)
    8414:	10803fe0 	cmpeqi	r2,r2,255
    8418:	1000021e 	bne	r2,zero,8424 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
    841c:	00800a84 	movi	r2,42
    8420:	00003d06 	br	8518 <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
    8424:	e0bfff03 	ldbu	r2,-4(fp)
    8428:	10803fd8 	cmpnei	r2,r2,255
    842c:	1000111e 	bne	r2,zero,8474 <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8430:	0005303a 	rdctl	r2,status
    8434:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8438:	e0fff917 	ldw	r3,-28(fp)
    843c:	00bfff84 	movi	r2,-2
    8440:	1884703a 	and	r2,r3,r2
    8444:	1001703a 	wrctl	status,r2
  
  return context;
    8448:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
    844c:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
    8450:	d0a80317 	ldw	r2,-24564(gp)
    8454:	10800dc3 	ldbu	r2,55(r2)
    8458:	e0bff805 	stb	r2,-32(fp)
    845c:	e0bff617 	ldw	r2,-40(fp)
    8460:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8464:	e0bffe17 	ldw	r2,-8(fp)
    8468:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
    846c:	e0bff803 	ldbu	r2,-32(fp)
    8470:	00002906 	br	8518 <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8474:	0005303a 	rdctl	r2,status
    8478:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    847c:	e0fff717 	ldw	r3,-36(fp)
    8480:	00bfff84 	movi	r2,-2
    8484:	1884703a 	and	r2,r3,r2
    8488:	1001703a 	wrctl	status,r2
  
  return context;
    848c:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
    8490:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
    8494:	e0ffff03 	ldbu	r3,-4(fp)
    8498:	008000b4 	movhi	r2,2
    849c:	10a29204 	addi	r2,r2,-30136
    84a0:	18c7883a 	add	r3,r3,r3
    84a4:	18c7883a 	add	r3,r3,r3
    84a8:	10c5883a 	add	r2,r2,r3
    84ac:	10800017 	ldw	r2,0(r2)
    84b0:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
    84b4:	e0bffb17 	ldw	r2,-20(fp)
    84b8:	1000061e 	bne	r2,zero,84d4 <OSTaskDelReq+0xfc>
    84bc:	e0bff617 	ldw	r2,-40(fp)
    84c0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    84c4:	e0bffa17 	ldw	r2,-24(fp)
    84c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
    84cc:	008010c4 	movi	r2,67
    84d0:	00001106 	br	8518 <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
    84d4:	e0bffb17 	ldw	r2,-20(fp)
    84d8:	10800058 	cmpnei	r2,r2,1
    84dc:	1000061e 	bne	r2,zero,84f8 <OSTaskDelReq+0x120>
    84e0:	e0bff617 	ldw	r2,-40(fp)
    84e4:	e0bffc15 	stw	r2,-16(fp)
    84e8:	e0bffc17 	ldw	r2,-16(fp)
    84ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
    84f0:	00800f44 	movi	r2,61
    84f4:	00000806 	br	8518 <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
    84f8:	e0bffb17 	ldw	r2,-20(fp)
    84fc:	00c00fc4 	movi	r3,63
    8500:	10c00dc5 	stb	r3,55(r2)
    8504:	e0bff617 	ldw	r2,-40(fp)
    8508:	e0bffd15 	stw	r2,-12(fp)
    850c:	e0bffd17 	ldw	r2,-12(fp)
    8510:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    8514:	0005883a 	mov	r2,zero
}
    8518:	e037883a 	mov	sp,fp
    851c:	df000017 	ldw	fp,0(sp)
    8520:	dec00104 	addi	sp,sp,4
    8524:	f800283a 	ret

00008528 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
    8528:	defff404 	addi	sp,sp,-48
    852c:	dfc00b15 	stw	ra,44(sp)
    8530:	df000a15 	stw	fp,40(sp)
    8534:	df000a04 	addi	fp,sp,40
    8538:	2005883a 	mov	r2,r4
    853c:	e17ffe15 	stw	r5,-8(fp)
    8540:	e1bfff15 	stw	r6,-4(fp)
    8544:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
    8548:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
    854c:	e0bfff17 	ldw	r2,-4(fp)
    8550:	1000021e 	bne	r2,zero,855c <OSTaskNameGet+0x34>
        return (0);
    8554:	0005883a 	mov	r2,zero
    8558:	00005406 	br	86ac <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
    855c:	e0bffd03 	ldbu	r2,-12(fp)
    8560:	10800570 	cmpltui	r2,r2,21
    8564:	1000081e 	bne	r2,zero,8588 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
    8568:	e0bffd03 	ldbu	r2,-12(fp)
    856c:	10803fe0 	cmpeqi	r2,r2,255
    8570:	1000051e 	bne	r2,zero,8588 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
    8574:	e0bfff17 	ldw	r2,-4(fp)
    8578:	00c00a84 	movi	r3,42
    857c:	10c00005 	stb	r3,0(r2)
            return (0);
    8580:	0005883a 	mov	r2,zero
    8584:	00004906 	br	86ac <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
    8588:	e0bffe17 	ldw	r2,-8(fp)
    858c:	1000051e 	bne	r2,zero,85a4 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
    8590:	e0bfff17 	ldw	r2,-4(fp)
    8594:	00c00304 	movi	r3,12
    8598:	10c00005 	stb	r3,0(r2)
        return (0);
    859c:	0005883a 	mov	r2,zero
    85a0:	00004206 	br	86ac <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
    85a4:	d0a80203 	ldbu	r2,-24568(gp)
    85a8:	10803fcc 	andi	r2,r2,255
    85ac:	10000526 	beq	r2,zero,85c4 <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
    85b0:	e0bfff17 	ldw	r2,-4(fp)
    85b4:	00c00444 	movi	r3,17
    85b8:	10c00005 	stb	r3,0(r2)
        return (0);
    85bc:	0005883a 	mov	r2,zero
    85c0:	00003a06 	br	86ac <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    85c4:	0005303a 	rdctl	r2,status
    85c8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    85cc:	e0fffc17 	ldw	r3,-16(fp)
    85d0:	00bfff84 	movi	r2,-2
    85d4:	1884703a 	and	r2,r3,r2
    85d8:	1001703a 	wrctl	status,r2
  
  return context;
    85dc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    85e0:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
    85e4:	e0bffd03 	ldbu	r2,-12(fp)
    85e8:	10803fd8 	cmpnei	r2,r2,255
    85ec:	1000031e 	bne	r2,zero,85fc <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
    85f0:	d0a80317 	ldw	r2,-24564(gp)
    85f4:	10800c83 	ldbu	r2,50(r2)
    85f8:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    85fc:	e0fffd03 	ldbu	r3,-12(fp)
    8600:	008000b4 	movhi	r2,2
    8604:	10a29204 	addi	r2,r2,-30136
    8608:	18c7883a 	add	r3,r3,r3
    860c:	18c7883a 	add	r3,r3,r3
    8610:	10c5883a 	add	r2,r2,r3
    8614:	10800017 	ldw	r2,0(r2)
    8618:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
    861c:	e0bff817 	ldw	r2,-32(fp)
    8620:	1000091e 	bne	r2,zero,8648 <OSTaskNameGet+0x120>
    8624:	e0bff617 	ldw	r2,-40(fp)
    8628:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    862c:	e0bff717 	ldw	r2,-36(fp)
    8630:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
    8634:	e0bfff17 	ldw	r2,-4(fp)
    8638:	00c010c4 	movi	r3,67
    863c:	10c00005 	stb	r3,0(r2)
        return (0);
    8640:	0005883a 	mov	r2,zero
    8644:	00001906 	br	86ac <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
    8648:	e0bff817 	ldw	r2,-32(fp)
    864c:	10800058 	cmpnei	r2,r2,1
    8650:	1000091e 	bne	r2,zero,8678 <OSTaskNameGet+0x150>
    8654:	e0bff617 	ldw	r2,-40(fp)
    8658:	e0bff915 	stw	r2,-28(fp)
    865c:	e0bff917 	ldw	r2,-28(fp)
    8660:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
    8664:	e0bfff17 	ldw	r2,-4(fp)
    8668:	00c010c4 	movi	r3,67
    866c:	10c00005 	stb	r3,0(r2)
        return (0);
    8670:	0005883a 	mov	r2,zero
    8674:	00000d06 	br	86ac <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
    8678:	e0bff817 	ldw	r2,-32(fp)
    867c:	10801304 	addi	r2,r2,76
    8680:	100b883a 	mov	r5,r2
    8684:	e13ffe17 	ldw	r4,-8(fp)
    8688:	00037180 	call	3718 <OS_StrCopy>
    868c:	e0bffb05 	stb	r2,-20(fp)
    8690:	e0bff617 	ldw	r2,-40(fp)
    8694:	e0bffa15 	stw	r2,-24(fp)
    8698:	e0bffa17 	ldw	r2,-24(fp)
    869c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    86a0:	e0bfff17 	ldw	r2,-4(fp)
    86a4:	10000005 	stb	zero,0(r2)
    return (len);
    86a8:	e0bffb03 	ldbu	r2,-20(fp)
}
    86ac:	e037883a 	mov	sp,fp
    86b0:	dfc00117 	ldw	ra,4(sp)
    86b4:	df000017 	ldw	fp,0(sp)
    86b8:	dec00204 	addi	sp,sp,8
    86bc:	f800283a 	ret

000086c0 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
    86c0:	defff304 	addi	sp,sp,-52
    86c4:	dfc00c15 	stw	ra,48(sp)
    86c8:	df000b15 	stw	fp,44(sp)
    86cc:	df000b04 	addi	fp,sp,44
    86d0:	2005883a 	mov	r2,r4
    86d4:	e17ffe15 	stw	r5,-8(fp)
    86d8:	e1bfff15 	stw	r6,-4(fp)
    86dc:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
    86e0:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
    86e4:	e0bfff17 	ldw	r2,-4(fp)
    86e8:	10005c26 	beq	r2,zero,885c <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
    86ec:	e0bffd03 	ldbu	r2,-12(fp)
    86f0:	10800570 	cmpltui	r2,r2,21
    86f4:	1000071e 	bne	r2,zero,8714 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
    86f8:	e0bffd03 	ldbu	r2,-12(fp)
    86fc:	10803fe0 	cmpeqi	r2,r2,255
    8700:	1000041e 	bne	r2,zero,8714 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
    8704:	e0bfff17 	ldw	r2,-4(fp)
    8708:	00c00a84 	movi	r3,42
    870c:	10c00005 	stb	r3,0(r2)
            return;
    8710:	00005306 	br	8860 <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
    8714:	e0bffe17 	ldw	r2,-8(fp)
    8718:	1000041e 	bne	r2,zero,872c <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
    871c:	e0bfff17 	ldw	r2,-4(fp)
    8720:	00c00304 	movi	r3,12
    8724:	10c00005 	stb	r3,0(r2)
        return;
    8728:	00004d06 	br	8860 <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
    872c:	d0a80203 	ldbu	r2,-24568(gp)
    8730:	10803fcc 	andi	r2,r2,255
    8734:	10000426 	beq	r2,zero,8748 <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
    8738:	e0bfff17 	ldw	r2,-4(fp)
    873c:	00c00484 	movi	r3,18
    8740:	10c00005 	stb	r3,0(r2)
        return;
    8744:	00004606 	br	8860 <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8748:	0005303a 	rdctl	r2,status
    874c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8750:	e0fffc17 	ldw	r3,-16(fp)
    8754:	00bfff84 	movi	r2,-2
    8758:	1884703a 	and	r2,r3,r2
    875c:	1001703a 	wrctl	status,r2
  
  return context;
    8760:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    8764:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
    8768:	e0bffd03 	ldbu	r2,-12(fp)
    876c:	10803fd8 	cmpnei	r2,r2,255
    8770:	1000031e 	bne	r2,zero,8780 <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
    8774:	d0a80317 	ldw	r2,-24564(gp)
    8778:	10800c83 	ldbu	r2,50(r2)
    877c:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    8780:	e0fffd03 	ldbu	r3,-12(fp)
    8784:	008000b4 	movhi	r2,2
    8788:	10a29204 	addi	r2,r2,-30136
    878c:	18c7883a 	add	r3,r3,r3
    8790:	18c7883a 	add	r3,r3,r3
    8794:	10c5883a 	add	r2,r2,r3
    8798:	10800017 	ldw	r2,0(r2)
    879c:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
    87a0:	e0bff717 	ldw	r2,-36(fp)
    87a4:	1000081e 	bne	r2,zero,87c8 <OSTaskNameSet+0x108>
    87a8:	e0bff517 	ldw	r2,-44(fp)
    87ac:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    87b0:	e0bff617 	ldw	r2,-40(fp)
    87b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
    87b8:	e0bfff17 	ldw	r2,-4(fp)
    87bc:	00c010c4 	movi	r3,67
    87c0:	10c00005 	stb	r3,0(r2)
        return;
    87c4:	00002606 	br	8860 <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
    87c8:	e0bff717 	ldw	r2,-36(fp)
    87cc:	10800058 	cmpnei	r2,r2,1
    87d0:	1000081e 	bne	r2,zero,87f4 <OSTaskNameSet+0x134>
    87d4:	e0bff517 	ldw	r2,-44(fp)
    87d8:	e0bff815 	stw	r2,-32(fp)
    87dc:	e0bff817 	ldw	r2,-32(fp)
    87e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
    87e4:	e0bfff17 	ldw	r2,-4(fp)
    87e8:	00c010c4 	movi	r3,67
    87ec:	10c00005 	stb	r3,0(r2)
        return;
    87f0:	00001b06 	br	8860 <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
    87f4:	e13ffe17 	ldw	r4,-8(fp)
    87f8:	000378c0 	call	378c <OS_StrLen>
    87fc:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
    8800:	e0bffa03 	ldbu	r2,-24(fp)
    8804:	10800830 	cmpltui	r2,r2,32
    8808:	1000081e 	bne	r2,zero,882c <OSTaskNameSet+0x16c>
    880c:	e0bff517 	ldw	r2,-44(fp)
    8810:	e0bff915 	stw	r2,-28(fp)
    8814:	e0bff917 	ldw	r2,-28(fp)
    8818:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
    881c:	e0bfff17 	ldw	r2,-4(fp)
    8820:	00c01044 	movi	r3,65
    8824:	10c00005 	stb	r3,0(r2)
        return;
    8828:	00000d06 	br	8860 <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    882c:	e0bff717 	ldw	r2,-36(fp)
    8830:	10801304 	addi	r2,r2,76
    8834:	e17ffe17 	ldw	r5,-8(fp)
    8838:	1009883a 	mov	r4,r2
    883c:	00037180 	call	3718 <OS_StrCopy>
    8840:	e0bff517 	ldw	r2,-44(fp)
    8844:	e0bffb15 	stw	r2,-20(fp)
    8848:	e0bffb17 	ldw	r2,-20(fp)
    884c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    8850:	e0bfff17 	ldw	r2,-4(fp)
    8854:	10000005 	stb	zero,0(r2)
    8858:	00000106 	br	8860 <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
    885c:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
    8860:	e037883a 	mov	sp,fp
    8864:	dfc00117 	ldw	ra,4(sp)
    8868:	df000017 	ldw	fp,0(sp)
    886c:	dec00204 	addi	sp,sp,8
    8870:	f800283a 	ret

00008874 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
    8874:	defff404 	addi	sp,sp,-48
    8878:	dfc00b15 	stw	ra,44(sp)
    887c:	df000a15 	stw	fp,40(sp)
    8880:	df000a04 	addi	fp,sp,40
    8884:	2005883a 	mov	r2,r4
    8888:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
    888c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
    8890:	e0bfff03 	ldbu	r2,-4(fp)
    8894:	10800530 	cmpltui	r2,r2,20
    8898:	1000021e 	bne	r2,zero,88a4 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
    889c:	00800a84 	movi	r2,42
    88a0:	00006406 	br	8a34 <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    88a4:	0005303a 	rdctl	r2,status
    88a8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    88ac:	e0fffe17 	ldw	r3,-8(fp)
    88b0:	00bfff84 	movi	r2,-2
    88b4:	1884703a 	and	r2,r3,r2
    88b8:	1001703a 	wrctl	status,r2
  
  return context;
    88bc:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    88c0:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
    88c4:	e0ffff03 	ldbu	r3,-4(fp)
    88c8:	008000b4 	movhi	r2,2
    88cc:	10a29204 	addi	r2,r2,-30136
    88d0:	18c7883a 	add	r3,r3,r3
    88d4:	18c7883a 	add	r3,r3,r3
    88d8:	10c5883a 	add	r2,r2,r3
    88dc:	10800017 	ldw	r2,0(r2)
    88e0:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
    88e4:	e0bff817 	ldw	r2,-32(fp)
    88e8:	1000061e 	bne	r2,zero,8904 <OSTaskResume+0x90>
    88ec:	e0bff617 	ldw	r2,-40(fp)
    88f0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    88f4:	e0bff717 	ldw	r2,-36(fp)
    88f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
    88fc:	00801184 	movi	r2,70
    8900:	00004c06 	br	8a34 <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
    8904:	e0bff817 	ldw	r2,-32(fp)
    8908:	10800058 	cmpnei	r2,r2,1
    890c:	1000061e 	bne	r2,zero,8928 <OSTaskResume+0xb4>
    8910:	e0bff617 	ldw	r2,-40(fp)
    8914:	e0bff915 	stw	r2,-28(fp)
    8918:	e0bff917 	ldw	r2,-28(fp)
    891c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    8920:	008010c4 	movi	r2,67
    8924:	00004306 	br	8a34 <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
    8928:	e0bff817 	ldw	r2,-32(fp)
    892c:	10800c03 	ldbu	r2,48(r2)
    8930:	10803fcc 	andi	r2,r2,255
    8934:	1080020c 	andi	r2,r2,8
    8938:	10003926 	beq	r2,zero,8a20 <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
    893c:	e0bff817 	ldw	r2,-32(fp)
    8940:	10c00c03 	ldbu	r3,48(r2)
    8944:	00bffdc4 	movi	r2,-9
    8948:	1884703a 	and	r2,r3,r2
    894c:	1007883a 	mov	r3,r2
    8950:	e0bff817 	ldw	r2,-32(fp)
    8954:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
    8958:	e0bff817 	ldw	r2,-32(fp)
    895c:	10800c03 	ldbu	r2,48(r2)
    8960:	10803fcc 	andi	r2,r2,255
    8964:	1000281e 	bne	r2,zero,8a08 <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
    8968:	e0bff817 	ldw	r2,-32(fp)
    896c:	10800b8b 	ldhu	r2,46(r2)
    8970:	10bfffcc 	andi	r2,r2,65535
    8974:	10001f1e 	bne	r2,zero,89f4 <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
    8978:	e0bff817 	ldw	r2,-32(fp)
    897c:	10c00d83 	ldbu	r3,54(r2)
    8980:	d0a80003 	ldbu	r2,-24576(gp)
    8984:	1884b03a 	or	r2,r3,r2
    8988:	d0a80005 	stb	r2,-24576(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    898c:	e0bff817 	ldw	r2,-32(fp)
    8990:	10800d03 	ldbu	r2,52(r2)
    8994:	10c03fcc 	andi	r3,r2,255
    8998:	e0bff817 	ldw	r2,-32(fp)
    899c:	10800d03 	ldbu	r2,52(r2)
    89a0:	11003fcc 	andi	r4,r2,255
    89a4:	d0a80044 	addi	r2,gp,-24575
    89a8:	2085883a 	add	r2,r4,r2
    89ac:	11000003 	ldbu	r4,0(r2)
    89b0:	e0bff817 	ldw	r2,-32(fp)
    89b4:	10800d43 	ldbu	r2,53(r2)
    89b8:	2084b03a 	or	r2,r4,r2
    89bc:	1009883a 	mov	r4,r2
    89c0:	d0a80044 	addi	r2,gp,-24575
    89c4:	1885883a 	add	r2,r3,r2
    89c8:	11000005 	stb	r4,0(r2)
    89cc:	e0bff617 	ldw	r2,-40(fp)
    89d0:	e0bffa15 	stw	r2,-24(fp)
    89d4:	e0bffa17 	ldw	r2,-24(fp)
    89d8:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
    89dc:	d0a7f443 	ldbu	r2,-24623(gp)
    89e0:	10803fcc 	andi	r2,r2,255
    89e4:	10800058 	cmpnei	r2,r2,1
    89e8:	10000b1e 	bne	r2,zero,8a18 <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
    89ec:	00035d40 	call	35d4 <OS_Sched>
    89f0:	00000906 	br	8a18 <OSTaskResume+0x1a4>
    89f4:	e0bff617 	ldw	r2,-40(fp)
    89f8:	e0bffb15 	stw	r2,-20(fp)
    89fc:	e0bffb17 	ldw	r2,-20(fp)
    8a00:	1001703a 	wrctl	status,r2
    8a04:	00000406 	br	8a18 <OSTaskResume+0x1a4>
    8a08:	e0bff617 	ldw	r2,-40(fp)
    8a0c:	e0bffc15 	stw	r2,-16(fp)
    8a10:	e0bffc17 	ldw	r2,-16(fp)
    8a14:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
    8a18:	0005883a 	mov	r2,zero
    8a1c:	00000506 	br	8a34 <OSTaskResume+0x1c0>
    8a20:	e0bff617 	ldw	r2,-40(fp)
    8a24:	e0bffd15 	stw	r2,-12(fp)
    8a28:	e0bffd17 	ldw	r2,-12(fp)
    8a2c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
    8a30:	00801104 	movi	r2,68
}
    8a34:	e037883a 	mov	sp,fp
    8a38:	dfc00117 	ldw	ra,4(sp)
    8a3c:	df000017 	ldw	fp,0(sp)
    8a40:	dec00204 	addi	sp,sp,8
    8a44:	f800283a 	ret

00008a48 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
    8a48:	defff304 	addi	sp,sp,-52
    8a4c:	df000c15 	stw	fp,48(sp)
    8a50:	df000c04 	addi	fp,sp,48
    8a54:	2005883a 	mov	r2,r4
    8a58:	e17fff15 	stw	r5,-4(fp)
    8a5c:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    8a60:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
    8a64:	e0bffe03 	ldbu	r2,-8(fp)
    8a68:	10800570 	cmpltui	r2,r2,21
    8a6c:	1000051e 	bne	r2,zero,8a84 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
    8a70:	e0bffe03 	ldbu	r2,-8(fp)
    8a74:	10803fe0 	cmpeqi	r2,r2,255
    8a78:	1000021e 	bne	r2,zero,8a84 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
    8a7c:	00800a84 	movi	r2,42
    8a80:	00005d06 	br	8bf8 <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
    8a84:	e0bfff17 	ldw	r2,-4(fp)
    8a88:	1000021e 	bne	r2,zero,8a94 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
    8a8c:	00800244 	movi	r2,9
    8a90:	00005906 	br	8bf8 <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
    8a94:	e0bfff17 	ldw	r2,-4(fp)
    8a98:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
    8a9c:	e0bfff17 	ldw	r2,-4(fp)
    8aa0:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8aa4:	0005303a 	rdctl	r2,status
    8aa8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8aac:	e0fffd17 	ldw	r3,-12(fp)
    8ab0:	00bfff84 	movi	r2,-2
    8ab4:	1884703a 	and	r2,r3,r2
    8ab8:	1001703a 	wrctl	status,r2
  
  return context;
    8abc:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
    8ac0:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
    8ac4:	e0bffe03 	ldbu	r2,-8(fp)
    8ac8:	10803fd8 	cmpnei	r2,r2,255
    8acc:	1000031e 	bne	r2,zero,8adc <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
    8ad0:	d0a80317 	ldw	r2,-24564(gp)
    8ad4:	10800c83 	ldbu	r2,50(r2)
    8ad8:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    8adc:	e0fffe03 	ldbu	r3,-8(fp)
    8ae0:	008000b4 	movhi	r2,2
    8ae4:	10a29204 	addi	r2,r2,-30136
    8ae8:	18c7883a 	add	r3,r3,r3
    8aec:	18c7883a 	add	r3,r3,r3
    8af0:	10c5883a 	add	r2,r2,r3
    8af4:	10800017 	ldw	r2,0(r2)
    8af8:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
    8afc:	e0bff817 	ldw	r2,-32(fp)
    8b00:	1000061e 	bne	r2,zero,8b1c <OSTaskStkChk+0xd4>
    8b04:	e0bff617 	ldw	r2,-40(fp)
    8b08:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8b0c:	e0bff717 	ldw	r2,-36(fp)
    8b10:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    8b14:	008010c4 	movi	r2,67
    8b18:	00003706 	br	8bf8 <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
    8b1c:	e0bff817 	ldw	r2,-32(fp)
    8b20:	10800058 	cmpnei	r2,r2,1
    8b24:	1000061e 	bne	r2,zero,8b40 <OSTaskStkChk+0xf8>
    8b28:	e0bff617 	ldw	r2,-40(fp)
    8b2c:	e0bff915 	stw	r2,-28(fp)
    8b30:	e0bff917 	ldw	r2,-28(fp)
    8b34:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    8b38:	008010c4 	movi	r2,67
    8b3c:	00002e06 	br	8bf8 <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
    8b40:	e0bff817 	ldw	r2,-32(fp)
    8b44:	1080040b 	ldhu	r2,16(r2)
    8b48:	10bfffcc 	andi	r2,r2,65535
    8b4c:	1080004c 	andi	r2,r2,1
    8b50:	1000061e 	bne	r2,zero,8b6c <OSTaskStkChk+0x124>
    8b54:	e0bff617 	ldw	r2,-40(fp)
    8b58:	e0bffa15 	stw	r2,-24(fp)
    8b5c:	e0bffa17 	ldw	r2,-24(fp)
    8b60:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
    8b64:	00801144 	movi	r2,69
    8b68:	00002306 	br	8bf8 <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
    8b6c:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
    8b70:	e0bff817 	ldw	r2,-32(fp)
    8b74:	10800317 	ldw	r2,12(r2)
    8b78:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
    8b7c:	e0bff817 	ldw	r2,-32(fp)
    8b80:	10800217 	ldw	r2,8(r2)
    8b84:	e0bff415 	stw	r2,-48(fp)
    8b88:	e0bff617 	ldw	r2,-40(fp)
    8b8c:	e0bffb15 	stw	r2,-20(fp)
    8b90:	e0bffb17 	ldw	r2,-20(fp)
    8b94:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
    8b98:	00000306 	br	8ba8 <OSTaskStkChk+0x160>
        nfree++;
    8b9c:	e0bff517 	ldw	r2,-44(fp)
    8ba0:	10800044 	addi	r2,r2,1
    8ba4:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
    8ba8:	e0bff417 	ldw	r2,-48(fp)
    8bac:	10c00104 	addi	r3,r2,4
    8bb0:	e0fff415 	stw	r3,-48(fp)
    8bb4:	10800017 	ldw	r2,0(r2)
    8bb8:	103ff826 	beq	r2,zero,8b9c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008b9c>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
    8bbc:	e0bff517 	ldw	r2,-44(fp)
    8bc0:	1085883a 	add	r2,r2,r2
    8bc4:	1085883a 	add	r2,r2,r2
    8bc8:	1007883a 	mov	r3,r2
    8bcc:	e0bfff17 	ldw	r2,-4(fp)
    8bd0:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
    8bd4:	e0fffc17 	ldw	r3,-16(fp)
    8bd8:	e0bff517 	ldw	r2,-44(fp)
    8bdc:	1885c83a 	sub	r2,r3,r2
    8be0:	1085883a 	add	r2,r2,r2
    8be4:	1085883a 	add	r2,r2,r2
    8be8:	1007883a 	mov	r3,r2
    8bec:	e0bfff17 	ldw	r2,-4(fp)
    8bf0:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
    8bf4:	0005883a 	mov	r2,zero
}
    8bf8:	e037883a 	mov	sp,fp
    8bfc:	df000017 	ldw	fp,0(sp)
    8c00:	dec00104 	addi	sp,sp,4
    8c04:	f800283a 	ret

00008c08 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
    8c08:	defff504 	addi	sp,sp,-44
    8c0c:	dfc00a15 	stw	ra,40(sp)
    8c10:	df000915 	stw	fp,36(sp)
    8c14:	df000904 	addi	fp,sp,36
    8c18:	2005883a 	mov	r2,r4
    8c1c:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    8c20:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
    8c24:	e0bfff03 	ldbu	r2,-4(fp)
    8c28:	10800518 	cmpnei	r2,r2,20
    8c2c:	1000021e 	bne	r2,zero,8c38 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
    8c30:	008011c4 	movi	r2,71
    8c34:	00006806 	br	8dd8 <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
    8c38:	e0bfff03 	ldbu	r2,-4(fp)
    8c3c:	10800530 	cmpltui	r2,r2,20
    8c40:	1000051e 	bne	r2,zero,8c58 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
    8c44:	e0bfff03 	ldbu	r2,-4(fp)
    8c48:	10803fe0 	cmpeqi	r2,r2,255
    8c4c:	1000021e 	bne	r2,zero,8c58 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
    8c50:	00800a84 	movi	r2,42
    8c54:	00006006 	br	8dd8 <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8c58:	0005303a 	rdctl	r2,status
    8c5c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8c60:	e0fffe17 	ldw	r3,-8(fp)
    8c64:	00bfff84 	movi	r2,-2
    8c68:	1884703a 	and	r2,r3,r2
    8c6c:	1001703a 	wrctl	status,r2
  
  return context;
    8c70:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
    8c74:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
    8c78:	e0bfff03 	ldbu	r2,-4(fp)
    8c7c:	10803fd8 	cmpnei	r2,r2,255
    8c80:	1000061e 	bne	r2,zero,8c9c <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
    8c84:	d0a80317 	ldw	r2,-24564(gp)
    8c88:	10800c83 	ldbu	r2,50(r2)
    8c8c:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
    8c90:	00800044 	movi	r2,1
    8c94:	e0bff705 	stb	r2,-36(fp)
    8c98:	00000906 	br	8cc0 <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
    8c9c:	d0a80317 	ldw	r2,-24564(gp)
    8ca0:	10800c83 	ldbu	r2,50(r2)
    8ca4:	10c03fcc 	andi	r3,r2,255
    8ca8:	e0bfff03 	ldbu	r2,-4(fp)
    8cac:	1880031e 	bne	r3,r2,8cbc <OSTaskSuspend+0xb4>
        self = OS_TRUE;
    8cb0:	00800044 	movi	r2,1
    8cb4:	e0bff705 	stb	r2,-36(fp)
    8cb8:	00000106 	br	8cc0 <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
    8cbc:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    8cc0:	e0ffff03 	ldbu	r3,-4(fp)
    8cc4:	008000b4 	movhi	r2,2
    8cc8:	10a29204 	addi	r2,r2,-30136
    8ccc:	18c7883a 	add	r3,r3,r3
    8cd0:	18c7883a 	add	r3,r3,r3
    8cd4:	10c5883a 	add	r2,r2,r3
    8cd8:	10800017 	ldw	r2,0(r2)
    8cdc:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
    8ce0:	e0bffa17 	ldw	r2,-24(fp)
    8ce4:	1000061e 	bne	r2,zero,8d00 <OSTaskSuspend+0xf8>
    8ce8:	e0bff817 	ldw	r2,-32(fp)
    8cec:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8cf0:	e0bff917 	ldw	r2,-28(fp)
    8cf4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
    8cf8:	00801204 	movi	r2,72
    8cfc:	00003606 	br	8dd8 <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
    8d00:	e0bffa17 	ldw	r2,-24(fp)
    8d04:	10800058 	cmpnei	r2,r2,1
    8d08:	1000061e 	bne	r2,zero,8d24 <OSTaskSuspend+0x11c>
    8d0c:	e0bff817 	ldw	r2,-32(fp)
    8d10:	e0bffb15 	stw	r2,-20(fp)
    8d14:	e0bffb17 	ldw	r2,-20(fp)
    8d18:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    8d1c:	008010c4 	movi	r2,67
    8d20:	00002d06 	br	8dd8 <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
    8d24:	e0bffa17 	ldw	r2,-24(fp)
    8d28:	10800d03 	ldbu	r2,52(r2)
    8d2c:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
    8d30:	e0fffd03 	ldbu	r3,-12(fp)
    8d34:	e13ffd03 	ldbu	r4,-12(fp)
    8d38:	d0a80044 	addi	r2,gp,-24575
    8d3c:	2085883a 	add	r2,r4,r2
    8d40:	10800003 	ldbu	r2,0(r2)
    8d44:	1009883a 	mov	r4,r2
    8d48:	e0bffa17 	ldw	r2,-24(fp)
    8d4c:	10800d43 	ldbu	r2,53(r2)
    8d50:	0084303a 	nor	r2,zero,r2
    8d54:	2084703a 	and	r2,r4,r2
    8d58:	1009883a 	mov	r4,r2
    8d5c:	d0a80044 	addi	r2,gp,-24575
    8d60:	1885883a 	add	r2,r3,r2
    8d64:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    8d68:	e0fffd03 	ldbu	r3,-12(fp)
    8d6c:	d0a80044 	addi	r2,gp,-24575
    8d70:	1885883a 	add	r2,r3,r2
    8d74:	10800003 	ldbu	r2,0(r2)
    8d78:	10803fcc 	andi	r2,r2,255
    8d7c:	1000071e 	bne	r2,zero,8d9c <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
    8d80:	e0bffa17 	ldw	r2,-24(fp)
    8d84:	10800d83 	ldbu	r2,54(r2)
    8d88:	0084303a 	nor	r2,zero,r2
    8d8c:	1007883a 	mov	r3,r2
    8d90:	d0a80003 	ldbu	r2,-24576(gp)
    8d94:	1884703a 	and	r2,r3,r2
    8d98:	d0a80005 	stb	r2,-24576(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
    8d9c:	e0bffa17 	ldw	r2,-24(fp)
    8da0:	10800c03 	ldbu	r2,48(r2)
    8da4:	10800214 	ori	r2,r2,8
    8da8:	1007883a 	mov	r3,r2
    8dac:	e0bffa17 	ldw	r2,-24(fp)
    8db0:	10c00c05 	stb	r3,48(r2)
    8db4:	e0bff817 	ldw	r2,-32(fp)
    8db8:	e0bffc15 	stw	r2,-16(fp)
    8dbc:	e0bffc17 	ldw	r2,-16(fp)
    8dc0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
    8dc4:	e0bff703 	ldbu	r2,-36(fp)
    8dc8:	10800058 	cmpnei	r2,r2,1
    8dcc:	1000011e 	bne	r2,zero,8dd4 <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
    8dd0:	00035d40 	call	35d4 <OS_Sched>
    }
    return (OS_ERR_NONE);
    8dd4:	0005883a 	mov	r2,zero
}
    8dd8:	e037883a 	mov	sp,fp
    8ddc:	dfc00117 	ldw	ra,4(sp)
    8de0:	df000017 	ldw	fp,0(sp)
    8de4:	dec00204 	addi	sp,sp,8
    8de8:	f800283a 	ret

00008dec <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
    8dec:	defff604 	addi	sp,sp,-40
    8df0:	dfc00915 	stw	ra,36(sp)
    8df4:	df000815 	stw	fp,32(sp)
    8df8:	df000804 	addi	fp,sp,32
    8dfc:	2005883a 	mov	r2,r4
    8e00:	e17fff15 	stw	r5,-4(fp)
    8e04:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    8e08:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
    8e0c:	e0bffe03 	ldbu	r2,-8(fp)
    8e10:	10800570 	cmpltui	r2,r2,21
    8e14:	1000051e 	bne	r2,zero,8e2c <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
    8e18:	e0bffe03 	ldbu	r2,-8(fp)
    8e1c:	10803fe0 	cmpeqi	r2,r2,255
    8e20:	1000021e 	bne	r2,zero,8e2c <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
    8e24:	00800a84 	movi	r2,42
    8e28:	00003406 	br	8efc <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
    8e2c:	e0bfff17 	ldw	r2,-4(fp)
    8e30:	1000021e 	bne	r2,zero,8e3c <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
    8e34:	00800244 	movi	r2,9
    8e38:	00003006 	br	8efc <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8e3c:	0005303a 	rdctl	r2,status
    8e40:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8e44:	e0fffd17 	ldw	r3,-12(fp)
    8e48:	00bfff84 	movi	r2,-2
    8e4c:	1884703a 	and	r2,r3,r2
    8e50:	1001703a 	wrctl	status,r2
  
  return context;
    8e54:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    8e58:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
    8e5c:	e0bffe03 	ldbu	r2,-8(fp)
    8e60:	10803fd8 	cmpnei	r2,r2,255
    8e64:	1000031e 	bne	r2,zero,8e74 <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
    8e68:	d0a80317 	ldw	r2,-24564(gp)
    8e6c:	10800c83 	ldbu	r2,50(r2)
    8e70:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    8e74:	e0fffe03 	ldbu	r3,-8(fp)
    8e78:	008000b4 	movhi	r2,2
    8e7c:	10a29204 	addi	r2,r2,-30136
    8e80:	18c7883a 	add	r3,r3,r3
    8e84:	18c7883a 	add	r3,r3,r3
    8e88:	10c5883a 	add	r2,r2,r3
    8e8c:	10800017 	ldw	r2,0(r2)
    8e90:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
    8e94:	e0bffa17 	ldw	r2,-24(fp)
    8e98:	1000061e 	bne	r2,zero,8eb4 <OSTaskQuery+0xc8>
    8e9c:	e0bff817 	ldw	r2,-32(fp)
    8ea0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8ea4:	e0bff917 	ldw	r2,-28(fp)
    8ea8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
    8eac:	00800a44 	movi	r2,41
    8eb0:	00001206 	br	8efc <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
    8eb4:	e0bffa17 	ldw	r2,-24(fp)
    8eb8:	10800058 	cmpnei	r2,r2,1
    8ebc:	1000061e 	bne	r2,zero,8ed8 <OSTaskQuery+0xec>
    8ec0:	e0bff817 	ldw	r2,-32(fp)
    8ec4:	e0bffb15 	stw	r2,-20(fp)
    8ec8:	e0bffb17 	ldw	r2,-20(fp)
    8ecc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    8ed0:	008010c4 	movi	r2,67
    8ed4:	00000906 	br	8efc <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
    8ed8:	01801b04 	movi	r6,108
    8edc:	e17ffa17 	ldw	r5,-24(fp)
    8ee0:	e13fff17 	ldw	r4,-4(fp)
    8ee4:	000356c0 	call	356c <OS_MemCopy>
    8ee8:	e0bff817 	ldw	r2,-32(fp)
    8eec:	e0bffc15 	stw	r2,-16(fp)
    8ef0:	e0bffc17 	ldw	r2,-16(fp)
    8ef4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    8ef8:	0005883a 	mov	r2,zero
}
    8efc:	e037883a 	mov	sp,fp
    8f00:	dfc00117 	ldw	ra,4(sp)
    8f04:	df000017 	ldw	fp,0(sp)
    8f08:	dec00204 	addi	sp,sp,8
    8f0c:	f800283a 	ret

00008f10 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    8f10:	defffc04 	addi	sp,sp,-16
    8f14:	df000315 	stw	fp,12(sp)
    8f18:	df000304 	addi	fp,sp,12
    8f1c:	e13ffd15 	stw	r4,-12(fp)
    8f20:	e17ffe15 	stw	r5,-8(fp)
    8f24:	3005883a 	mov	r2,r6
    8f28:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
    8f2c:	e0bfff0b 	ldhu	r2,-4(fp)
    8f30:	1080004c 	andi	r2,r2,1
    8f34:	10000d26 	beq	r2,zero,8f6c <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
    8f38:	e0bfff0b 	ldhu	r2,-4(fp)
    8f3c:	1080008c 	andi	r2,r2,2
    8f40:	10000a26 	beq	r2,zero,8f6c <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
    8f44:	00000706 	br	8f64 <OS_TaskStkClr+0x54>
                size--;
    8f48:	e0bffe17 	ldw	r2,-8(fp)
    8f4c:	10bfffc4 	addi	r2,r2,-1
    8f50:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
    8f54:	e0bffd17 	ldw	r2,-12(fp)
    8f58:	10c00104 	addi	r3,r2,4
    8f5c:	e0fffd15 	stw	r3,-12(fp)
    8f60:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
    8f64:	e0bffe17 	ldw	r2,-8(fp)
    8f68:	103ff71e 	bne	r2,zero,8f48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008f48>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
    8f6c:	0001883a 	nop
    8f70:	e037883a 	mov	sp,fp
    8f74:	df000017 	ldw	fp,0(sp)
    8f78:	dec00104 	addi	sp,sp,4
    8f7c:	f800283a 	ret

00008f80 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
    8f80:	defff904 	addi	sp,sp,-28
    8f84:	dfc00615 	stw	ra,24(sp)
    8f88:	df000515 	stw	fp,20(sp)
    8f8c:	df000504 	addi	fp,sp,20
    8f90:	2005883a 	mov	r2,r4
    8f94:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    8f98:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    8f9c:	d0a80203 	ldbu	r2,-24568(gp)
    8fa0:	10803fcc 	andi	r2,r2,255
    8fa4:	1000311e 	bne	r2,zero,906c <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
    8fa8:	e0bfff0b 	ldhu	r2,-4(fp)
    8fac:	10003026 	beq	r2,zero,9070 <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8fb0:	0005303a 	rdctl	r2,status
    8fb4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8fb8:	e0fffe17 	ldw	r3,-8(fp)
    8fbc:	00bfff84 	movi	r2,-2
    8fc0:	1884703a 	and	r2,r3,r2
    8fc4:	1001703a 	wrctl	status,r2
  
  return context;
    8fc8:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    8fcc:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
    8fd0:	d0a80317 	ldw	r2,-24564(gp)
    8fd4:	10800d03 	ldbu	r2,52(r2)
    8fd8:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
    8fdc:	e0fffd03 	ldbu	r3,-12(fp)
    8fe0:	e13ffd03 	ldbu	r4,-12(fp)
    8fe4:	d0a80044 	addi	r2,gp,-24575
    8fe8:	2085883a 	add	r2,r4,r2
    8fec:	10800003 	ldbu	r2,0(r2)
    8ff0:	1009883a 	mov	r4,r2
    8ff4:	d0a80317 	ldw	r2,-24564(gp)
    8ff8:	10800d43 	ldbu	r2,53(r2)
    8ffc:	0084303a 	nor	r2,zero,r2
    9000:	2084703a 	and	r2,r4,r2
    9004:	1009883a 	mov	r4,r2
    9008:	d0a80044 	addi	r2,gp,-24575
    900c:	1885883a 	add	r2,r3,r2
    9010:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
    9014:	e0fffd03 	ldbu	r3,-12(fp)
    9018:	d0a80044 	addi	r2,gp,-24575
    901c:	1885883a 	add	r2,r3,r2
    9020:	10800003 	ldbu	r2,0(r2)
    9024:	10803fcc 	andi	r2,r2,255
    9028:	1000071e 	bne	r2,zero,9048 <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
    902c:	d0a80317 	ldw	r2,-24564(gp)
    9030:	10800d83 	ldbu	r2,54(r2)
    9034:	0084303a 	nor	r2,zero,r2
    9038:	1007883a 	mov	r3,r2
    903c:	d0a80003 	ldbu	r2,-24576(gp)
    9040:	1884703a 	and	r2,r3,r2
    9044:	d0a80005 	stb	r2,-24576(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
    9048:	d0a80317 	ldw	r2,-24564(gp)
    904c:	e0ffff0b 	ldhu	r3,-4(fp)
    9050:	10c00b8d 	sth	r3,46(r2)
    9054:	e0bffb17 	ldw	r2,-20(fp)
    9058:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    905c:	e0bffc17 	ldw	r2,-16(fp)
    9060:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    9064:	00035d40 	call	35d4 <OS_Sched>
    9068:	00000106 	br	9070 <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
    906c:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
    9070:	e037883a 	mov	sp,fp
    9074:	dfc00117 	ldw	ra,4(sp)
    9078:	df000017 	ldw	fp,0(sp)
    907c:	dec00204 	addi	sp,sp,8
    9080:	f800283a 	ret

00009084 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
    9084:	defff804 	addi	sp,sp,-32
    9088:	dfc00715 	stw	ra,28(sp)
    908c:	df000615 	stw	fp,24(sp)
    9090:	df000604 	addi	fp,sp,24
    9094:	2015883a 	mov	r10,r4
    9098:	2809883a 	mov	r4,r5
    909c:	3007883a 	mov	r3,r6
    90a0:	3805883a 	mov	r2,r7
    90a4:	e2bffc05 	stb	r10,-16(fp)
    90a8:	e13ffd05 	stb	r4,-12(fp)
    90ac:	e0fffe05 	stb	r3,-8(fp)
    90b0:	e0bfff0d 	sth	r2,-4(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    90b4:	d0a80203 	ldbu	r2,-24568(gp)
    90b8:	10803fcc 	andi	r2,r2,255
    90bc:	10000226 	beq	r2,zero,90c8 <OSTimeDlyHMSM+0x44>
        return (OS_ERR_TIME_DLY_ISR);
    90c0:	00801544 	movi	r2,85
    90c4:	00004206 	br	91d0 <OSTimeDlyHMSM+0x14c>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
    90c8:	e0bffc03 	ldbu	r2,-16(fp)
    90cc:	1000081e 	bne	r2,zero,90f0 <OSTimeDlyHMSM+0x6c>
        if (minutes == 0) {
    90d0:	e0bffd03 	ldbu	r2,-12(fp)
    90d4:	1000061e 	bne	r2,zero,90f0 <OSTimeDlyHMSM+0x6c>
            if (seconds == 0) {
    90d8:	e0bffe03 	ldbu	r2,-8(fp)
    90dc:	1000041e 	bne	r2,zero,90f0 <OSTimeDlyHMSM+0x6c>
                if (ms == 0) {
    90e0:	e0bfff0b 	ldhu	r2,-4(fp)
    90e4:	1000021e 	bne	r2,zero,90f0 <OSTimeDlyHMSM+0x6c>
                    return (OS_ERR_TIME_ZERO_DLY);
    90e8:	00801504 	movi	r2,84
    90ec:	00003806 	br	91d0 <OSTimeDlyHMSM+0x14c>
                }
            }
        }
    }
    if (minutes > 59) {
    90f0:	e0bffd03 	ldbu	r2,-12(fp)
    90f4:	10800f30 	cmpltui	r2,r2,60
    90f8:	1000021e 	bne	r2,zero,9104 <OSTimeDlyHMSM+0x80>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
    90fc:	00801444 	movi	r2,81
    9100:	00003306 	br	91d0 <OSTimeDlyHMSM+0x14c>
    }
    if (seconds > 59) {
    9104:	e0bffe03 	ldbu	r2,-8(fp)
    9108:	10800f30 	cmpltui	r2,r2,60
    910c:	1000021e 	bne	r2,zero,9118 <OSTimeDlyHMSM+0x94>
        return (OS_ERR_TIME_INVALID_SECONDS);
    9110:	00801484 	movi	r2,82
    9114:	00002e06 	br	91d0 <OSTimeDlyHMSM+0x14c>
    }
    if (ms > 999) {
    9118:	e0bfff0b 	ldhu	r2,-4(fp)
    911c:	1080fa30 	cmpltui	r2,r2,1000
    9120:	1000021e 	bne	r2,zero,912c <OSTimeDlyHMSM+0xa8>
        return (OS_ERR_TIME_INVALID_MS);
    9124:	008014c4 	movi	r2,83
    9128:	00002906 	br	91d0 <OSTimeDlyHMSM+0x14c>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
    912c:	e0bffc03 	ldbu	r2,-16(fp)
    9130:	10c38424 	muli	r3,r2,3600
    9134:	e0bffd03 	ldbu	r2,-12(fp)
    9138:	10800f24 	muli	r2,r2,60
    913c:	1887883a 	add	r3,r3,r2
    9140:	e0bffe03 	ldbu	r2,-8(fp)
    9144:	1885883a 	add	r2,r3,r2
    9148:	100890fa 	slli	r4,r2,3
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    914c:	e0bfff0b 	ldhu	r2,-4(fp)
    9150:	10800f84 	addi	r2,r2,62
    9154:	100690fa 	slli	r3,r2,3
    9158:	008418b4 	movhi	r2,4194
    915c:	109374c4 	addi	r2,r2,19923
    9160:	188a383a 	mulxuu	r5,r3,r2
    9164:	1885383a 	mul	r2,r3,r2
    9168:	1011883a 	mov	r8,r2
    916c:	2813883a 	mov	r9,r5
    9170:	4804d1ba 	srli	r2,r9,6
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
    9174:	2085883a 	add	r2,r4,r2
    9178:	e0bffb15 	stw	r2,-20(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    917c:	e0bffb17 	ldw	r2,-20(fp)
    9180:	1004d43a 	srli	r2,r2,16
    9184:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    9188:	e0bffb17 	ldw	r2,-20(fp)
    918c:	10bfffcc 	andi	r2,r2,65535
    9190:	e0bffb15 	stw	r2,-20(fp)
    OSTimeDly((INT16U)ticks);
    9194:	e0bffb17 	ldw	r2,-20(fp)
    9198:	10bfffcc 	andi	r2,r2,65535
    919c:	1009883a 	mov	r4,r2
    91a0:	0008f800 	call	8f80 <OSTimeDly>
    while (loops > 0) {
    91a4:	00000706 	br	91c4 <OSTimeDlyHMSM+0x140>
        OSTimeDly((INT16U)32768u);
    91a8:	01200014 	movui	r4,32768
    91ac:	0008f800 	call	8f80 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
    91b0:	01200014 	movui	r4,32768
    91b4:	0008f800 	call	8f80 <OSTimeDly>
        loops--;
    91b8:	e0bffa0b 	ldhu	r2,-24(fp)
    91bc:	10bfffc4 	addi	r2,r2,-1
    91c0:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
    91c4:	e0bffa0b 	ldhu	r2,-24(fp)
    91c8:	103ff71e 	bne	r2,zero,91a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70091a8>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
    91cc:	0005883a 	mov	r2,zero
}
    91d0:	e037883a 	mov	sp,fp
    91d4:	dfc00117 	ldw	ra,4(sp)
    91d8:	df000017 	ldw	fp,0(sp)
    91dc:	dec00204 	addi	sp,sp,8
    91e0:	f800283a 	ret

000091e4 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
    91e4:	defff504 	addi	sp,sp,-44
    91e8:	dfc00a15 	stw	ra,40(sp)
    91ec:	df000915 	stw	fp,36(sp)
    91f0:	df000904 	addi	fp,sp,36
    91f4:	2005883a 	mov	r2,r4
    91f8:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    91fc:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
    9200:	e0bfff03 	ldbu	r2,-4(fp)
    9204:	10800530 	cmpltui	r2,r2,20
    9208:	1000021e 	bne	r2,zero,9214 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
    920c:	00800a84 	movi	r2,42
    9210:	00006406 	br	93a4 <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9214:	0005303a 	rdctl	r2,status
    9218:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    921c:	e0fffe17 	ldw	r3,-8(fp)
    9220:	00bfff84 	movi	r2,-2
    9224:	1884703a 	and	r2,r3,r2
    9228:	1001703a 	wrctl	status,r2
  
  return context;
    922c:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
    9230:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
    9234:	e0ffff03 	ldbu	r3,-4(fp)
    9238:	008000b4 	movhi	r2,2
    923c:	10a29204 	addi	r2,r2,-30136
    9240:	18c7883a 	add	r3,r3,r3
    9244:	18c7883a 	add	r3,r3,r3
    9248:	10c5883a 	add	r2,r2,r3
    924c:	10800017 	ldw	r2,0(r2)
    9250:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
    9254:	e0bff917 	ldw	r2,-28(fp)
    9258:	1000061e 	bne	r2,zero,9274 <OSTimeDlyResume+0x90>
    925c:	e0bff717 	ldw	r2,-36(fp)
    9260:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9264:	e0bff817 	ldw	r2,-32(fp)
    9268:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
    926c:	008010c4 	movi	r2,67
    9270:	00004c06 	br	93a4 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
    9274:	e0bff917 	ldw	r2,-28(fp)
    9278:	10800058 	cmpnei	r2,r2,1
    927c:	1000061e 	bne	r2,zero,9298 <OSTimeDlyResume+0xb4>
    9280:	e0bff717 	ldw	r2,-36(fp)
    9284:	e0bffa15 	stw	r2,-24(fp)
    9288:	e0bffa17 	ldw	r2,-24(fp)
    928c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
    9290:	008010c4 	movi	r2,67
    9294:	00004306 	br	93a4 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
    9298:	e0bff917 	ldw	r2,-28(fp)
    929c:	10800b8b 	ldhu	r2,46(r2)
    92a0:	10bfffcc 	andi	r2,r2,65535
    92a4:	1000061e 	bne	r2,zero,92c0 <OSTimeDlyResume+0xdc>
    92a8:	e0bff717 	ldw	r2,-36(fp)
    92ac:	e0bffb15 	stw	r2,-20(fp)
    92b0:	e0bffb17 	ldw	r2,-20(fp)
    92b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
    92b8:	00801404 	movi	r2,80
    92bc:	00003906 	br	93a4 <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
    92c0:	e0bff917 	ldw	r2,-28(fp)
    92c4:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
    92c8:	e0bff917 	ldw	r2,-28(fp)
    92cc:	10800c03 	ldbu	r2,48(r2)
    92d0:	10803fcc 	andi	r2,r2,255
    92d4:	10800dcc 	andi	r2,r2,55
    92d8:	10000b26 	beq	r2,zero,9308 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
    92dc:	e0bff917 	ldw	r2,-28(fp)
    92e0:	10c00c03 	ldbu	r3,48(r2)
    92e4:	00bff204 	movi	r2,-56
    92e8:	1884703a 	and	r2,r3,r2
    92ec:	1007883a 	mov	r3,r2
    92f0:	e0bff917 	ldw	r2,-28(fp)
    92f4:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
    92f8:	e0bff917 	ldw	r2,-28(fp)
    92fc:	00c00044 	movi	r3,1
    9300:	10c00c45 	stb	r3,49(r2)
    9304:	00000206 	br	9310 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
    9308:	e0bff917 	ldw	r2,-28(fp)
    930c:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
    9310:	e0bff917 	ldw	r2,-28(fp)
    9314:	10800c03 	ldbu	r2,48(r2)
    9318:	10803fcc 	andi	r2,r2,255
    931c:	1080020c 	andi	r2,r2,8
    9320:	10001b1e 	bne	r2,zero,9390 <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
    9324:	e0bff917 	ldw	r2,-28(fp)
    9328:	10c00d83 	ldbu	r3,54(r2)
    932c:	d0a80003 	ldbu	r2,-24576(gp)
    9330:	1884b03a 	or	r2,r3,r2
    9334:	d0a80005 	stb	r2,-24576(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    9338:	e0bff917 	ldw	r2,-28(fp)
    933c:	10800d03 	ldbu	r2,52(r2)
    9340:	10c03fcc 	andi	r3,r2,255
    9344:	e0bff917 	ldw	r2,-28(fp)
    9348:	10800d03 	ldbu	r2,52(r2)
    934c:	11003fcc 	andi	r4,r2,255
    9350:	d0a80044 	addi	r2,gp,-24575
    9354:	2085883a 	add	r2,r4,r2
    9358:	11000003 	ldbu	r4,0(r2)
    935c:	e0bff917 	ldw	r2,-28(fp)
    9360:	10800d43 	ldbu	r2,53(r2)
    9364:	2084b03a 	or	r2,r4,r2
    9368:	1009883a 	mov	r4,r2
    936c:	d0a80044 	addi	r2,gp,-24575
    9370:	1885883a 	add	r2,r3,r2
    9374:	11000005 	stb	r4,0(r2)
    9378:	e0bff717 	ldw	r2,-36(fp)
    937c:	e0bffc15 	stw	r2,-16(fp)
    9380:	e0bffc17 	ldw	r2,-16(fp)
    9384:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
    9388:	00035d40 	call	35d4 <OS_Sched>
    938c:	00000406 	br	93a0 <OSTimeDlyResume+0x1bc>
    9390:	e0bff717 	ldw	r2,-36(fp)
    9394:	e0bffd15 	stw	r2,-12(fp)
    9398:	e0bffd17 	ldw	r2,-12(fp)
    939c:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
    93a0:	0005883a 	mov	r2,zero
}
    93a4:	e037883a 	mov	sp,fp
    93a8:	dfc00117 	ldw	ra,4(sp)
    93ac:	df000017 	ldw	fp,0(sp)
    93b0:	dec00204 	addi	sp,sp,8
    93b4:	f800283a 	ret

000093b8 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
    93b8:	defffb04 	addi	sp,sp,-20
    93bc:	df000415 	stw	fp,16(sp)
    93c0:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    93c4:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    93c8:	0005303a 	rdctl	r2,status
    93cc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    93d0:	e0fffe17 	ldw	r3,-8(fp)
    93d4:	00bfff84 	movi	r2,-2
    93d8:	1884703a 	and	r2,r3,r2
    93dc:	1001703a 	wrctl	status,r2
  
  return context;
    93e0:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
    93e4:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
    93e8:	d0a80417 	ldw	r2,-24560(gp)
    93ec:	e0bffd15 	stw	r2,-12(fp)
    93f0:	e0bffc17 	ldw	r2,-16(fp)
    93f4:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    93f8:	e0bfff17 	ldw	r2,-4(fp)
    93fc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
    9400:	e0bffd17 	ldw	r2,-12(fp)
}
    9404:	e037883a 	mov	sp,fp
    9408:	df000017 	ldw	fp,0(sp)
    940c:	dec00104 	addi	sp,sp,4
    9410:	f800283a 	ret

00009414 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
    9414:	defffb04 	addi	sp,sp,-20
    9418:	df000415 	stw	fp,16(sp)
    941c:	df000404 	addi	fp,sp,16
    9420:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    9424:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9428:	0005303a 	rdctl	r2,status
    942c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9430:	e0fffd17 	ldw	r3,-12(fp)
    9434:	00bfff84 	movi	r2,-2
    9438:	1884703a 	and	r2,r3,r2
    943c:	1001703a 	wrctl	status,r2
  
  return context;
    9440:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
    9444:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
    9448:	e0bfff17 	ldw	r2,-4(fp)
    944c:	d0a80415 	stw	r2,-24560(gp)
    9450:	e0bffc17 	ldw	r2,-16(fp)
    9454:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9458:	e0bffe17 	ldw	r2,-8(fp)
    945c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
    9460:	0001883a 	nop
    9464:	e037883a 	mov	sp,fp
    9468:	df000017 	ldw	fp,0(sp)
    946c:	dec00104 	addi	sp,sp,4
    9470:	f800283a 	ret

00009474 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    9474:	defffd04 	addi	sp,sp,-12
    9478:	dfc00215 	stw	ra,8(sp)
    947c:	df000115 	stw	fp,4(sp)
    9480:	df000104 	addi	fp,sp,4
    9484:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    9488:	d1602604 	addi	r5,gp,-32616
    948c:	e13fff17 	ldw	r4,-4(fp)
    9490:	000c0880 	call	c088 <alt_dev_llist_insert>
}
    9494:	e037883a 	mov	sp,fp
    9498:	dfc00117 	ldw	ra,4(sp)
    949c:	df000017 	ldw	fp,0(sp)
    94a0:	dec00204 	addi	sp,sp,8
    94a4:	f800283a 	ret

000094a8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    94a8:	defffd04 	addi	sp,sp,-12
    94ac:	dfc00215 	stw	ra,8(sp)
    94b0:	df000115 	stw	fp,4(sp)
    94b4:	df000104 	addi	fp,sp,4
    94b8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
    94bc:	000c9cc0 	call	c9cc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    94c0:	00800044 	movi	r2,1
    94c4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    94c8:	0001883a 	nop
    94cc:	e037883a 	mov	sp,fp
    94d0:	dfc00117 	ldw	ra,4(sp)
    94d4:	df000017 	ldw	fp,0(sp)
    94d8:	dec00204 	addi	sp,sp,8
    94dc:	f800283a 	ret

000094e0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    94e0:	defffc04 	addi	sp,sp,-16
    94e4:	dfc00315 	stw	ra,12(sp)
    94e8:	df000215 	stw	fp,8(sp)
    94ec:	df000204 	addi	fp,sp,8
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
    94f0:	01c00204 	movi	r7,8
    94f4:	000d883a 	mov	r6,zero
    94f8:	000b883a 	mov	r5,zero
    94fc:	01040034 	movhi	r4,4096
    9500:	21080004 	addi	r4,r4,8192
    9504:	000aa940 	call	aa94 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
    9508:	01800204 	movi	r6,8
    950c:	000b883a 	mov	r5,zero
    9510:	01000074 	movhi	r4,1
    9514:	21388f04 	addi	r4,r4,-7620
    9518:	0009e580 	call	9e58 <altera_avalon_jtag_uart_init>
    951c:	01000074 	movhi	r4,1
    9520:	21388504 	addi	r4,r4,-7660
    9524:	00094740 	call	9474 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
    9528:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
    952c:	01000074 	movhi	r4,1
    9530:	213ca004 	addi	r4,r4,-3456
    9534:	00094740 	call	9474 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_SUBSYSTEM_AUDIO, Audio_Subsystem_Audio);
    9538:	01000074 	movhi	r4,1
    953c:	213cac04 	addi	r4,r4,-3408
    9540:	00094740 	call	9474 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
    9544:	01000074 	movhi	r4,1
    9548:	213cb804 	addi	r4,r4,-3360
    954c:	000abbc0 	call	abbc <alt_up_character_lcd_init>
    9550:	01000074 	movhi	r4,1
    9554:	213cb804 	addi	r4,r4,-3360
    9558:	00094740 	call	9474 <alt_dev_reg>
    ALTERA_UP_AVALON_IRDA_INIT ( IRDA, IrDA);
    955c:	01000074 	movhi	r4,1
    9560:	213cc304 	addi	r4,r4,-3316
    9564:	00094740 	call	9474 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( EXPANSION_JP5, Expansion_JP5);
    9568:	01000074 	movhi	r4,1
    956c:	213cce04 	addi	r4,r4,-3272
    9570:	00094740 	call	9474 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( GREEN_LEDS, Green_LEDs);
    9574:	01000074 	movhi	r4,1
    9578:	213cd904 	addi	r4,r4,-3228
    957c:	00094740 	call	9474 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
    9580:	01000074 	movhi	r4,1
    9584:	213ce404 	addi	r4,r4,-3184
    9588:	00094740 	call	9474 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX7_HEX4, HEX7_HEX4);
    958c:	01000074 	movhi	r4,1
    9590:	213cef04 	addi	r4,r4,-3140
    9594:	00094740 	call	9474 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
    9598:	01000074 	movhi	r4,1
    959c:	213cfa04 	addi	r4,r4,-3096
    95a0:	00094740 	call	9474 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
    95a4:	01000074 	movhi	r4,1
    95a8:	213d0504 	addi	r4,r4,-3052
    95ac:	00094740 	call	9474 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
    95b0:	01000074 	movhi	r4,1
    95b4:	213d1004 	addi	r4,r4,-3008
    95b8:	00094740 	call	9474 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
    95bc:	01000074 	movhi	r4,1
    95c0:	213d1b04 	addi	r4,r4,-2964
    95c4:	000b4b00 	call	b4b0 <alt_up_ps2_init>
    95c8:	01000074 	movhi	r4,1
    95cc:	213d1b04 	addi	r4,r4,-2964
    95d0:	00094740 	call	9474 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT_DUAL, PS2_Port_Dual);
    95d4:	01000074 	movhi	r4,1
    95d8:	213d2904 	addi	r4,r4,-2908
    95dc:	000b4b00 	call	b4b0 <alt_up_ps2_init>
    95e0:	01000074 	movhi	r4,1
    95e4:	213d2904 	addi	r4,r4,-2908
    95e8:	00094740 	call	9474 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
    95ec:	01000074 	movhi	r4,1
    95f0:	213d3704 	addi	r4,r4,-2852
    95f4:	00094740 	call	9474 <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
    95f8:	01000074 	movhi	r4,1
    95fc:	213d4204 	addi	r4,r4,-2808
    9600:	00094740 	call	9474 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VGA_SUBSYSTEM_CHAR_BUF_SUBSYSTEM_CHAR_BUF_DMA, VGA_Subsystem_Char_Buf_Subsystem_Char_Buf_DMA);
    9604:	00800074 	movhi	r2,1
    9608:	10bd4f04 	addi	r2,r2,-2756
    960c:	10800a17 	ldw	r2,40(r2)
    9610:	10800017 	ldw	r2,0(r2)
    9614:	1007883a 	mov	r3,r2
    9618:	00800074 	movhi	r2,1
    961c:	10bd4f04 	addi	r2,r2,-2756
    9620:	10c00b15 	stw	r3,44(r2)
    9624:	00800074 	movhi	r2,1
    9628:	10bd4f04 	addi	r2,r2,-2756
    962c:	10800a17 	ldw	r2,40(r2)
    9630:	10800104 	addi	r2,r2,4
    9634:	10800017 	ldw	r2,0(r2)
    9638:	1007883a 	mov	r3,r2
    963c:	00800074 	movhi	r2,1
    9640:	10bd4f04 	addi	r2,r2,-2756
    9644:	10c00c15 	stw	r3,48(r2)
    9648:	00800074 	movhi	r2,1
    964c:	10bd4f04 	addi	r2,r2,-2756
    9650:	10800a17 	ldw	r2,40(r2)
    9654:	10800204 	addi	r2,r2,8
    9658:	10800017 	ldw	r2,0(r2)
    965c:	10ffffcc 	andi	r3,r2,65535
    9660:	00800074 	movhi	r2,1
    9664:	10bd4f04 	addi	r2,r2,-2756
    9668:	10c01115 	stw	r3,68(r2)
    966c:	00800074 	movhi	r2,1
    9670:	10bd4f04 	addi	r2,r2,-2756
    9674:	10800a17 	ldw	r2,40(r2)
    9678:	10800204 	addi	r2,r2,8
    967c:	10800017 	ldw	r2,0(r2)
    9680:	1006d43a 	srli	r3,r2,16
    9684:	00800074 	movhi	r2,1
    9688:	10bd4f04 	addi	r2,r2,-2756
    968c:	10c01215 	stw	r3,72(r2)
    9690:	00800074 	movhi	r2,1
    9694:	10bd4f04 	addi	r2,r2,-2756
    9698:	10800a17 	ldw	r2,40(r2)
    969c:	10800304 	addi	r2,r2,12
    96a0:	10800017 	ldw	r2,0(r2)
    96a4:	1005d07a 	srai	r2,r2,1
    96a8:	10c0004c 	andi	r3,r2,1
    96ac:	00800074 	movhi	r2,1
    96b0:	10bd4f04 	addi	r2,r2,-2756
    96b4:	10c00d15 	stw	r3,52(r2)
    96b8:	00800074 	movhi	r2,1
    96bc:	10bd4f04 	addi	r2,r2,-2756
    96c0:	10800a17 	ldw	r2,40(r2)
    96c4:	10800304 	addi	r2,r2,12
    96c8:	10800017 	ldw	r2,0(r2)
    96cc:	1005d23a 	srai	r2,r2,8
    96d0:	10c003cc 	andi	r3,r2,15
    96d4:	00800074 	movhi	r2,1
    96d8:	10bd4f04 	addi	r2,r2,-2756
    96dc:	10c00e15 	stw	r3,56(r2)
    96e0:	00800074 	movhi	r2,1
    96e4:	10bd4f04 	addi	r2,r2,-2756
    96e8:	10800a17 	ldw	r2,40(r2)
    96ec:	10800304 	addi	r2,r2,12
    96f0:	10800017 	ldw	r2,0(r2)
    96f4:	1005d1ba 	srai	r2,r2,6
    96f8:	10c000cc 	andi	r3,r2,3
    96fc:	00800074 	movhi	r2,1
    9700:	10bd4f04 	addi	r2,r2,-2756
    9704:	10c00f15 	stw	r3,60(r2)
    9708:	00800074 	movhi	r2,1
    970c:	10bd4f04 	addi	r2,r2,-2756
    9710:	10800e17 	ldw	r2,56(r2)
    9714:	1007883a 	mov	r3,r2
    9718:	00800074 	movhi	r2,1
    971c:	10bd4f04 	addi	r2,r2,-2756
    9720:	10800f17 	ldw	r2,60(r2)
    9724:	1885383a 	mul	r2,r3,r2
    9728:	e0bffe05 	stb	r2,-8(fp)
    972c:	e0bffe03 	ldbu	r2,-8(fp)
    9730:	10800268 	cmpgeui	r2,r2,9
    9734:	1000051e 	bne	r2,zero,974c <alt_sys_init+0x26c>
    9738:	00800074 	movhi	r2,1
    973c:	10bd4f04 	addi	r2,r2,-2756
    9740:	00c00044 	movi	r3,1
    9744:	10c01015 	stw	r3,64(r2)
    9748:	00000c06 	br	977c <alt_sys_init+0x29c>
    974c:	e0bffe03 	ldbu	r2,-8(fp)
    9750:	10800468 	cmpgeui	r2,r2,17
    9754:	1000051e 	bne	r2,zero,976c <alt_sys_init+0x28c>
    9758:	00800074 	movhi	r2,1
    975c:	10bd4f04 	addi	r2,r2,-2756
    9760:	00c00084 	movi	r3,2
    9764:	10c01015 	stw	r3,64(r2)
    9768:	00000406 	br	977c <alt_sys_init+0x29c>
    976c:	00800074 	movhi	r2,1
    9770:	10bd4f04 	addi	r2,r2,-2756
    9774:	00c00104 	movi	r3,4
    9778:	10c01015 	stw	r3,64(r2)
    977c:	00800074 	movhi	r2,1
    9780:	10bd4f04 	addi	r2,r2,-2756
    9784:	10800a17 	ldw	r2,40(r2)
    9788:	10800304 	addi	r2,r2,12
    978c:	10800017 	ldw	r2,0(r2)
    9790:	1005d43a 	srai	r2,r2,16
    9794:	e0bffe45 	stb	r2,-7(fp)
    9798:	00800074 	movhi	r2,1
    979c:	10bd4f04 	addi	r2,r2,-2756
    97a0:	10800a17 	ldw	r2,40(r2)
    97a4:	10800304 	addi	r2,r2,12
    97a8:	10800017 	ldw	r2,0(r2)
    97ac:	1004d63a 	srli	r2,r2,24
    97b0:	e0bffe85 	stb	r2,-6(fp)
    97b4:	00800074 	movhi	r2,1
    97b8:	10bd4f04 	addi	r2,r2,-2756
    97bc:	10801017 	ldw	r2,64(r2)
    97c0:	10800058 	cmpnei	r2,r2,1
    97c4:	1000041e 	bne	r2,zero,97d8 <alt_sys_init+0x2f8>
    97c8:	00800074 	movhi	r2,1
    97cc:	10bd4f04 	addi	r2,r2,-2756
    97d0:	10001315 	stw	zero,76(r2)
    97d4:	00000e06 	br	9810 <alt_sys_init+0x330>
    97d8:	00800074 	movhi	r2,1
    97dc:	10bd4f04 	addi	r2,r2,-2756
    97e0:	10801017 	ldw	r2,64(r2)
    97e4:	10800098 	cmpnei	r2,r2,2
    97e8:	1000051e 	bne	r2,zero,9800 <alt_sys_init+0x320>
    97ec:	00800074 	movhi	r2,1
    97f0:	10bd4f04 	addi	r2,r2,-2756
    97f4:	00c00044 	movi	r3,1
    97f8:	10c01315 	stw	r3,76(r2)
    97fc:	00000406 	br	9810 <alt_sys_init+0x330>
    9800:	00800074 	movhi	r2,1
    9804:	10bd4f04 	addi	r2,r2,-2756
    9808:	00c00084 	movi	r3,2
    980c:	10c01315 	stw	r3,76(r2)
    9810:	e0bffe43 	ldbu	r2,-7(fp)
    9814:	00c00804 	movi	r3,32
    9818:	1885c83a 	sub	r2,r3,r2
    981c:	00ffffc4 	movi	r3,-1
    9820:	1886d83a 	srl	r3,r3,r2
    9824:	00800074 	movhi	r2,1
    9828:	10bd4f04 	addi	r2,r2,-2756
    982c:	10c01415 	stw	r3,80(r2)
    9830:	e0fffe43 	ldbu	r3,-7(fp)
    9834:	00800074 	movhi	r2,1
    9838:	10bd4f04 	addi	r2,r2,-2756
    983c:	10801317 	ldw	r2,76(r2)
    9840:	1887883a 	add	r3,r3,r2
    9844:	00800074 	movhi	r2,1
    9848:	10bd4f04 	addi	r2,r2,-2756
    984c:	10c01515 	stw	r3,84(r2)
    9850:	e0bffe83 	ldbu	r2,-6(fp)
    9854:	00c00804 	movi	r3,32
    9858:	1885c83a 	sub	r2,r3,r2
    985c:	00ffffc4 	movi	r3,-1
    9860:	1886d83a 	srl	r3,r3,r2
    9864:	00800074 	movhi	r2,1
    9868:	10bd4f04 	addi	r2,r2,-2756
    986c:	10c01615 	stw	r3,88(r2)
    9870:	01000074 	movhi	r4,1
    9874:	213d4f04 	addi	r4,r4,-2756
    9878:	00094740 	call	9474 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VIDEO_IN_SUBSYSTEM_VIDEO_IN_DMA, Video_In_Subsystem_Video_In_DMA);
    987c:	00800074 	movhi	r2,1
    9880:	10bd6604 	addi	r2,r2,-2664
    9884:	10800a17 	ldw	r2,40(r2)
    9888:	10800017 	ldw	r2,0(r2)
    988c:	1007883a 	mov	r3,r2
    9890:	00800074 	movhi	r2,1
    9894:	10bd6604 	addi	r2,r2,-2664
    9898:	10c00b15 	stw	r3,44(r2)
    989c:	00800074 	movhi	r2,1
    98a0:	10bd6604 	addi	r2,r2,-2664
    98a4:	10800a17 	ldw	r2,40(r2)
    98a8:	10800104 	addi	r2,r2,4
    98ac:	10800017 	ldw	r2,0(r2)
    98b0:	1007883a 	mov	r3,r2
    98b4:	00800074 	movhi	r2,1
    98b8:	10bd6604 	addi	r2,r2,-2664
    98bc:	10c00c15 	stw	r3,48(r2)
    98c0:	00800074 	movhi	r2,1
    98c4:	10bd6604 	addi	r2,r2,-2664
    98c8:	10800a17 	ldw	r2,40(r2)
    98cc:	10800204 	addi	r2,r2,8
    98d0:	10800017 	ldw	r2,0(r2)
    98d4:	10ffffcc 	andi	r3,r2,65535
    98d8:	00800074 	movhi	r2,1
    98dc:	10bd6604 	addi	r2,r2,-2664
    98e0:	10c01115 	stw	r3,68(r2)
    98e4:	00800074 	movhi	r2,1
    98e8:	10bd6604 	addi	r2,r2,-2664
    98ec:	10800a17 	ldw	r2,40(r2)
    98f0:	10800204 	addi	r2,r2,8
    98f4:	10800017 	ldw	r2,0(r2)
    98f8:	1006d43a 	srli	r3,r2,16
    98fc:	00800074 	movhi	r2,1
    9900:	10bd6604 	addi	r2,r2,-2664
    9904:	10c01215 	stw	r3,72(r2)
    9908:	00800074 	movhi	r2,1
    990c:	10bd6604 	addi	r2,r2,-2664
    9910:	10800a17 	ldw	r2,40(r2)
    9914:	10800304 	addi	r2,r2,12
    9918:	10800017 	ldw	r2,0(r2)
    991c:	1005d07a 	srai	r2,r2,1
    9920:	10c0004c 	andi	r3,r2,1
    9924:	00800074 	movhi	r2,1
    9928:	10bd6604 	addi	r2,r2,-2664
    992c:	10c00d15 	stw	r3,52(r2)
    9930:	00800074 	movhi	r2,1
    9934:	10bd6604 	addi	r2,r2,-2664
    9938:	10800a17 	ldw	r2,40(r2)
    993c:	10800304 	addi	r2,r2,12
    9940:	10800017 	ldw	r2,0(r2)
    9944:	1005d23a 	srai	r2,r2,8
    9948:	10c003cc 	andi	r3,r2,15
    994c:	00800074 	movhi	r2,1
    9950:	10bd6604 	addi	r2,r2,-2664
    9954:	10c00e15 	stw	r3,56(r2)
    9958:	00800074 	movhi	r2,1
    995c:	10bd6604 	addi	r2,r2,-2664
    9960:	10800a17 	ldw	r2,40(r2)
    9964:	10800304 	addi	r2,r2,12
    9968:	10800017 	ldw	r2,0(r2)
    996c:	1005d1ba 	srai	r2,r2,6
    9970:	10c000cc 	andi	r3,r2,3
    9974:	00800074 	movhi	r2,1
    9978:	10bd6604 	addi	r2,r2,-2664
    997c:	10c00f15 	stw	r3,60(r2)
    9980:	00800074 	movhi	r2,1
    9984:	10bd6604 	addi	r2,r2,-2664
    9988:	10800e17 	ldw	r2,56(r2)
    998c:	1007883a 	mov	r3,r2
    9990:	00800074 	movhi	r2,1
    9994:	10bd6604 	addi	r2,r2,-2664
    9998:	10800f17 	ldw	r2,60(r2)
    999c:	1885383a 	mul	r2,r3,r2
    99a0:	e0bffec5 	stb	r2,-5(fp)
    99a4:	e0bffec3 	ldbu	r2,-5(fp)
    99a8:	10800268 	cmpgeui	r2,r2,9
    99ac:	1000051e 	bne	r2,zero,99c4 <alt_sys_init+0x4e4>
    99b0:	00800074 	movhi	r2,1
    99b4:	10bd6604 	addi	r2,r2,-2664
    99b8:	00c00044 	movi	r3,1
    99bc:	10c01015 	stw	r3,64(r2)
    99c0:	00000c06 	br	99f4 <alt_sys_init+0x514>
    99c4:	e0bffec3 	ldbu	r2,-5(fp)
    99c8:	10800468 	cmpgeui	r2,r2,17
    99cc:	1000051e 	bne	r2,zero,99e4 <alt_sys_init+0x504>
    99d0:	00800074 	movhi	r2,1
    99d4:	10bd6604 	addi	r2,r2,-2664
    99d8:	00c00084 	movi	r3,2
    99dc:	10c01015 	stw	r3,64(r2)
    99e0:	00000406 	br	99f4 <alt_sys_init+0x514>
    99e4:	00800074 	movhi	r2,1
    99e8:	10bd6604 	addi	r2,r2,-2664
    99ec:	00c00104 	movi	r3,4
    99f0:	10c01015 	stw	r3,64(r2)
    99f4:	00800074 	movhi	r2,1
    99f8:	10bd6604 	addi	r2,r2,-2664
    99fc:	10800a17 	ldw	r2,40(r2)
    9a00:	10800304 	addi	r2,r2,12
    9a04:	10800017 	ldw	r2,0(r2)
    9a08:	1005d43a 	srai	r2,r2,16
    9a0c:	e0bfff05 	stb	r2,-4(fp)
    9a10:	00800074 	movhi	r2,1
    9a14:	10bd6604 	addi	r2,r2,-2664
    9a18:	10800a17 	ldw	r2,40(r2)
    9a1c:	10800304 	addi	r2,r2,12
    9a20:	10800017 	ldw	r2,0(r2)
    9a24:	1004d63a 	srli	r2,r2,24
    9a28:	e0bfff45 	stb	r2,-3(fp)
    9a2c:	00800074 	movhi	r2,1
    9a30:	10bd6604 	addi	r2,r2,-2664
    9a34:	10801017 	ldw	r2,64(r2)
    9a38:	10800058 	cmpnei	r2,r2,1
    9a3c:	1000041e 	bne	r2,zero,9a50 <alt_sys_init+0x570>
    9a40:	00800074 	movhi	r2,1
    9a44:	10bd6604 	addi	r2,r2,-2664
    9a48:	10001315 	stw	zero,76(r2)
    9a4c:	00000e06 	br	9a88 <alt_sys_init+0x5a8>
    9a50:	00800074 	movhi	r2,1
    9a54:	10bd6604 	addi	r2,r2,-2664
    9a58:	10801017 	ldw	r2,64(r2)
    9a5c:	10800098 	cmpnei	r2,r2,2
    9a60:	1000051e 	bne	r2,zero,9a78 <alt_sys_init+0x598>
    9a64:	00800074 	movhi	r2,1
    9a68:	10bd6604 	addi	r2,r2,-2664
    9a6c:	00c00044 	movi	r3,1
    9a70:	10c01315 	stw	r3,76(r2)
    9a74:	00000406 	br	9a88 <alt_sys_init+0x5a8>
    9a78:	00800074 	movhi	r2,1
    9a7c:	10bd6604 	addi	r2,r2,-2664
    9a80:	00c00084 	movi	r3,2
    9a84:	10c01315 	stw	r3,76(r2)
    9a88:	e0bfff03 	ldbu	r2,-4(fp)
    9a8c:	00c00804 	movi	r3,32
    9a90:	1885c83a 	sub	r2,r3,r2
    9a94:	00ffffc4 	movi	r3,-1
    9a98:	1886d83a 	srl	r3,r3,r2
    9a9c:	00800074 	movhi	r2,1
    9aa0:	10bd6604 	addi	r2,r2,-2664
    9aa4:	10c01415 	stw	r3,80(r2)
    9aa8:	e0ffff03 	ldbu	r3,-4(fp)
    9aac:	00800074 	movhi	r2,1
    9ab0:	10bd6604 	addi	r2,r2,-2664
    9ab4:	10801317 	ldw	r2,76(r2)
    9ab8:	1887883a 	add	r3,r3,r2
    9abc:	00800074 	movhi	r2,1
    9ac0:	10bd6604 	addi	r2,r2,-2664
    9ac4:	10c01515 	stw	r3,84(r2)
    9ac8:	e0bfff43 	ldbu	r2,-3(fp)
    9acc:	00c00804 	movi	r3,32
    9ad0:	1885c83a 	sub	r2,r3,r2
    9ad4:	00ffffc4 	movi	r3,-1
    9ad8:	1886d83a 	srl	r3,r3,r2
    9adc:	00800074 	movhi	r2,1
    9ae0:	10bd6604 	addi	r2,r2,-2664
    9ae4:	10c01615 	stw	r3,88(r2)
    9ae8:	01000074 	movhi	r4,1
    9aec:	213d6604 	addi	r4,r4,-2664
    9af0:	00094740 	call	9474 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_DMA, VGA_Subsystem_VGA_Pixel_DMA);
    9af4:	00800074 	movhi	r2,1
    9af8:	10bd7d04 	addi	r2,r2,-2572
    9afc:	10800a17 	ldw	r2,40(r2)
    9b00:	10800017 	ldw	r2,0(r2)
    9b04:	1007883a 	mov	r3,r2
    9b08:	00800074 	movhi	r2,1
    9b0c:	10bd7d04 	addi	r2,r2,-2572
    9b10:	10c00b15 	stw	r3,44(r2)
    9b14:	00800074 	movhi	r2,1
    9b18:	10bd7d04 	addi	r2,r2,-2572
    9b1c:	10800a17 	ldw	r2,40(r2)
    9b20:	10800104 	addi	r2,r2,4
    9b24:	10800017 	ldw	r2,0(r2)
    9b28:	1007883a 	mov	r3,r2
    9b2c:	00800074 	movhi	r2,1
    9b30:	10bd7d04 	addi	r2,r2,-2572
    9b34:	10c00c15 	stw	r3,48(r2)
    9b38:	00800074 	movhi	r2,1
    9b3c:	10bd7d04 	addi	r2,r2,-2572
    9b40:	10800a17 	ldw	r2,40(r2)
    9b44:	10800204 	addi	r2,r2,8
    9b48:	10800017 	ldw	r2,0(r2)
    9b4c:	10ffffcc 	andi	r3,r2,65535
    9b50:	00800074 	movhi	r2,1
    9b54:	10bd7d04 	addi	r2,r2,-2572
    9b58:	10c00f15 	stw	r3,60(r2)
    9b5c:	00800074 	movhi	r2,1
    9b60:	10bd7d04 	addi	r2,r2,-2572
    9b64:	10800a17 	ldw	r2,40(r2)
    9b68:	10800204 	addi	r2,r2,8
    9b6c:	10800017 	ldw	r2,0(r2)
    9b70:	1006d43a 	srli	r3,r2,16
    9b74:	00800074 	movhi	r2,1
    9b78:	10bd7d04 	addi	r2,r2,-2572
    9b7c:	10c01015 	stw	r3,64(r2)
    9b80:	00800074 	movhi	r2,1
    9b84:	10bd7d04 	addi	r2,r2,-2572
    9b88:	10800a17 	ldw	r2,40(r2)
    9b8c:	10800304 	addi	r2,r2,12
    9b90:	10800017 	ldw	r2,0(r2)
    9b94:	1005d07a 	srai	r2,r2,1
    9b98:	10c0004c 	andi	r3,r2,1
    9b9c:	00800074 	movhi	r2,1
    9ba0:	10bd7d04 	addi	r2,r2,-2572
    9ba4:	10c00d15 	stw	r3,52(r2)
    9ba8:	00800074 	movhi	r2,1
    9bac:	10bd7d04 	addi	r2,r2,-2572
    9bb0:	10800a17 	ldw	r2,40(r2)
    9bb4:	10800304 	addi	r2,r2,12
    9bb8:	10800017 	ldw	r2,0(r2)
    9bbc:	1005d13a 	srai	r2,r2,4
    9bc0:	10c003cc 	andi	r3,r2,15
    9bc4:	00800074 	movhi	r2,1
    9bc8:	10bd7d04 	addi	r2,r2,-2572
    9bcc:	10c00e15 	stw	r3,56(r2)
    9bd0:	00800074 	movhi	r2,1
    9bd4:	10bd7d04 	addi	r2,r2,-2572
    9bd8:	10800a17 	ldw	r2,40(r2)
    9bdc:	10800304 	addi	r2,r2,12
    9be0:	10800017 	ldw	r2,0(r2)
    9be4:	1005d43a 	srai	r2,r2,16
    9be8:	e0bfff85 	stb	r2,-2(fp)
    9bec:	00800074 	movhi	r2,1
    9bf0:	10bd7d04 	addi	r2,r2,-2572
    9bf4:	10800a17 	ldw	r2,40(r2)
    9bf8:	10800304 	addi	r2,r2,12
    9bfc:	10800017 	ldw	r2,0(r2)
    9c00:	1004d63a 	srli	r2,r2,24
    9c04:	e0bfffc5 	stb	r2,-1(fp)
    9c08:	00800074 	movhi	r2,1
    9c0c:	10bd7d04 	addi	r2,r2,-2572
    9c10:	10800e17 	ldw	r2,56(r2)
    9c14:	10800058 	cmpnei	r2,r2,1
    9c18:	1000041e 	bne	r2,zero,9c2c <alt_sys_init+0x74c>
    9c1c:	00800074 	movhi	r2,1
    9c20:	10bd7d04 	addi	r2,r2,-2572
    9c24:	10001115 	stw	zero,68(r2)
    9c28:	00000e06 	br	9c64 <alt_sys_init+0x784>
    9c2c:	00800074 	movhi	r2,1
    9c30:	10bd7d04 	addi	r2,r2,-2572
    9c34:	10800e17 	ldw	r2,56(r2)
    9c38:	10800098 	cmpnei	r2,r2,2
    9c3c:	1000051e 	bne	r2,zero,9c54 <alt_sys_init+0x774>
    9c40:	00800074 	movhi	r2,1
    9c44:	10bd7d04 	addi	r2,r2,-2572
    9c48:	00c00044 	movi	r3,1
    9c4c:	10c01115 	stw	r3,68(r2)
    9c50:	00000406 	br	9c64 <alt_sys_init+0x784>
    9c54:	00800074 	movhi	r2,1
    9c58:	10bd7d04 	addi	r2,r2,-2572
    9c5c:	00c00084 	movi	r3,2
    9c60:	10c01115 	stw	r3,68(r2)
    9c64:	e0bfff83 	ldbu	r2,-2(fp)
    9c68:	00c00804 	movi	r3,32
    9c6c:	1885c83a 	sub	r2,r3,r2
    9c70:	00ffffc4 	movi	r3,-1
    9c74:	1886d83a 	srl	r3,r3,r2
    9c78:	00800074 	movhi	r2,1
    9c7c:	10bd7d04 	addi	r2,r2,-2572
    9c80:	10c01215 	stw	r3,72(r2)
    9c84:	e0ffff83 	ldbu	r3,-2(fp)
    9c88:	00800074 	movhi	r2,1
    9c8c:	10bd7d04 	addi	r2,r2,-2572
    9c90:	10801117 	ldw	r2,68(r2)
    9c94:	1887883a 	add	r3,r3,r2
    9c98:	00800074 	movhi	r2,1
    9c9c:	10bd7d04 	addi	r2,r2,-2572
    9ca0:	10c01315 	stw	r3,76(r2)
    9ca4:	e0bfffc3 	ldbu	r2,-1(fp)
    9ca8:	00c00804 	movi	r3,32
    9cac:	1885c83a 	sub	r2,r3,r2
    9cb0:	00ffffc4 	movi	r3,-1
    9cb4:	1886d83a 	srl	r3,r3,r2
    9cb8:	00800074 	movhi	r2,1
    9cbc:	10bd7d04 	addi	r2,r2,-2572
    9cc0:	10c01415 	stw	r3,80(r2)
    9cc4:	01000074 	movhi	r4,1
    9cc8:	213d7d04 	addi	r4,r4,-2572
    9ccc:	00094740 	call	9474 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
    9cd0:	01000074 	movhi	r4,1
    9cd4:	213d9204 	addi	r4,r4,-2488
    9cd8:	00094740 	call	9474 <alt_dev_reg>
}
    9cdc:	0001883a 	nop
    9ce0:	e037883a 	mov	sp,fp
    9ce4:	dfc00117 	ldw	ra,4(sp)
    9ce8:	df000017 	ldw	fp,0(sp)
    9cec:	dec00204 	addi	sp,sp,8
    9cf0:	f800283a 	ret

00009cf4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    9cf4:	defffa04 	addi	sp,sp,-24
    9cf8:	dfc00515 	stw	ra,20(sp)
    9cfc:	df000415 	stw	fp,16(sp)
    9d00:	df000404 	addi	fp,sp,16
    9d04:	e13ffd15 	stw	r4,-12(fp)
    9d08:	e17ffe15 	stw	r5,-8(fp)
    9d0c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    9d10:	e0bffd17 	ldw	r2,-12(fp)
    9d14:	10800017 	ldw	r2,0(r2)
    9d18:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    9d1c:	e0bffc17 	ldw	r2,-16(fp)
    9d20:	10c00a04 	addi	r3,r2,40
    9d24:	e0bffd17 	ldw	r2,-12(fp)
    9d28:	10800217 	ldw	r2,8(r2)
    9d2c:	100f883a 	mov	r7,r2
    9d30:	e1bfff17 	ldw	r6,-4(fp)
    9d34:	e17ffe17 	ldw	r5,-8(fp)
    9d38:	1809883a 	mov	r4,r3
    9d3c:	000a4980 	call	a498 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    9d40:	e037883a 	mov	sp,fp
    9d44:	dfc00117 	ldw	ra,4(sp)
    9d48:	df000017 	ldw	fp,0(sp)
    9d4c:	dec00204 	addi	sp,sp,8
    9d50:	f800283a 	ret

00009d54 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    9d54:	defffa04 	addi	sp,sp,-24
    9d58:	dfc00515 	stw	ra,20(sp)
    9d5c:	df000415 	stw	fp,16(sp)
    9d60:	df000404 	addi	fp,sp,16
    9d64:	e13ffd15 	stw	r4,-12(fp)
    9d68:	e17ffe15 	stw	r5,-8(fp)
    9d6c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    9d70:	e0bffd17 	ldw	r2,-12(fp)
    9d74:	10800017 	ldw	r2,0(r2)
    9d78:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    9d7c:	e0bffc17 	ldw	r2,-16(fp)
    9d80:	10c00a04 	addi	r3,r2,40
    9d84:	e0bffd17 	ldw	r2,-12(fp)
    9d88:	10800217 	ldw	r2,8(r2)
    9d8c:	100f883a 	mov	r7,r2
    9d90:	e1bfff17 	ldw	r6,-4(fp)
    9d94:	e17ffe17 	ldw	r5,-8(fp)
    9d98:	1809883a 	mov	r4,r3
    9d9c:	000a7540 	call	a754 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    9da0:	e037883a 	mov	sp,fp
    9da4:	dfc00117 	ldw	ra,4(sp)
    9da8:	df000017 	ldw	fp,0(sp)
    9dac:	dec00204 	addi	sp,sp,8
    9db0:	f800283a 	ret

00009db4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    9db4:	defffc04 	addi	sp,sp,-16
    9db8:	dfc00315 	stw	ra,12(sp)
    9dbc:	df000215 	stw	fp,8(sp)
    9dc0:	df000204 	addi	fp,sp,8
    9dc4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    9dc8:	e0bfff17 	ldw	r2,-4(fp)
    9dcc:	10800017 	ldw	r2,0(r2)
    9dd0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    9dd4:	e0bffe17 	ldw	r2,-8(fp)
    9dd8:	10c00a04 	addi	r3,r2,40
    9ddc:	e0bfff17 	ldw	r2,-4(fp)
    9de0:	10800217 	ldw	r2,8(r2)
    9de4:	100b883a 	mov	r5,r2
    9de8:	1809883a 	mov	r4,r3
    9dec:	000a3400 	call	a340 <altera_avalon_jtag_uart_close>
}
    9df0:	e037883a 	mov	sp,fp
    9df4:	dfc00117 	ldw	ra,4(sp)
    9df8:	df000017 	ldw	fp,0(sp)
    9dfc:	dec00204 	addi	sp,sp,8
    9e00:	f800283a 	ret

00009e04 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    9e04:	defffa04 	addi	sp,sp,-24
    9e08:	dfc00515 	stw	ra,20(sp)
    9e0c:	df000415 	stw	fp,16(sp)
    9e10:	df000404 	addi	fp,sp,16
    9e14:	e13ffd15 	stw	r4,-12(fp)
    9e18:	e17ffe15 	stw	r5,-8(fp)
    9e1c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    9e20:	e0bffd17 	ldw	r2,-12(fp)
    9e24:	10800017 	ldw	r2,0(r2)
    9e28:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    9e2c:	e0bffc17 	ldw	r2,-16(fp)
    9e30:	10800a04 	addi	r2,r2,40
    9e34:	e1bfff17 	ldw	r6,-4(fp)
    9e38:	e17ffe17 	ldw	r5,-8(fp)
    9e3c:	1009883a 	mov	r4,r2
    9e40:	000a3a80 	call	a3a8 <altera_avalon_jtag_uart_ioctl>
}
    9e44:	e037883a 	mov	sp,fp
    9e48:	dfc00117 	ldw	ra,4(sp)
    9e4c:	df000017 	ldw	fp,0(sp)
    9e50:	dec00204 	addi	sp,sp,8
    9e54:	f800283a 	ret

00009e58 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    9e58:	defff204 	addi	sp,sp,-56
    9e5c:	dfc00d15 	stw	ra,52(sp)
    9e60:	df000c15 	stw	fp,48(sp)
    9e64:	df000c04 	addi	fp,sp,48
    9e68:	e13ff915 	stw	r4,-28(fp)
    9e6c:	e17ffa15 	stw	r5,-24(fp)
    9e70:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
    9e74:	e0bff917 	ldw	r2,-28(fp)
    9e78:	10800c04 	addi	r2,r2,48
    9e7c:	e0bff415 	stw	r2,-48(fp)
    9e80:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
    9e84:	e0bff80b 	ldhu	r2,-32(fp)
    9e88:	e0fff884 	addi	r3,fp,-30
    9e8c:	180b883a 	mov	r5,r3
    9e90:	1009883a 	mov	r4,r2
    9e94:	00041500 	call	4150 <OSFlagCreate>
    9e98:	1007883a 	mov	r3,r2
    9e9c:	e0bff417 	ldw	r2,-48(fp)
    9ea0:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
    9ea4:	e0bff917 	ldw	r2,-28(fp)
    9ea8:	10800a04 	addi	r2,r2,40
    9eac:	e0bff515 	stw	r2,-44(fp)
    9eb0:	00800044 	movi	r2,1
    9eb4:	e0bff78d 	sth	r2,-34(fp)
    9eb8:	e0bff78b 	ldhu	r2,-34(fp)
    9ebc:	1009883a 	mov	r4,r2
    9ec0:	0006e640 	call	6e64 <OSSemCreate>
    9ec4:	1007883a 	mov	r3,r2
    9ec8:	e0bff517 	ldw	r2,-44(fp)
    9ecc:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
    9ed0:	e0bff917 	ldw	r2,-28(fp)
    9ed4:	10800b04 	addi	r2,r2,44
    9ed8:	e0bff615 	stw	r2,-40(fp)
    9edc:	00800044 	movi	r2,1
    9ee0:	e0bff70d 	sth	r2,-36(fp)
    9ee4:	e0bff70b 	ldhu	r2,-36(fp)
    9ee8:	1009883a 	mov	r4,r2
    9eec:	0006e640 	call	6e64 <OSSemCreate>
    9ef0:	1007883a 	mov	r3,r2
    9ef4:	e0bff617 	ldw	r2,-40(fp)
    9ef8:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    9efc:	e0bff917 	ldw	r2,-28(fp)
    9f00:	00c00044 	movi	r3,1
    9f04:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    9f08:	e0bff917 	ldw	r2,-28(fp)
    9f0c:	10800017 	ldw	r2,0(r2)
    9f10:	10800104 	addi	r2,r2,4
    9f14:	1007883a 	mov	r3,r2
    9f18:	e0bff917 	ldw	r2,-28(fp)
    9f1c:	10800817 	ldw	r2,32(r2)
    9f20:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
    9f24:	e0bffb17 	ldw	r2,-20(fp)
    9f28:	01800074 	movhi	r6,1
    9f2c:	31a7e504 	addi	r6,r6,-24684
    9f30:	e17ff917 	ldw	r5,-28(fp)
    9f34:	1009883a 	mov	r4,r2
    9f38:	000c3f00 	call	c3f0 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    9f3c:	e0bff917 	ldw	r2,-28(fp)
    9f40:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    9f44:	e0bff917 	ldw	r2,-28(fp)
    9f48:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    9f4c:	d0e80a17 	ldw	r3,-24536(gp)
    9f50:	e1fff917 	ldw	r7,-28(fp)
    9f54:	01800074 	movhi	r6,1
    9f58:	31a88f04 	addi	r6,r6,-24004
    9f5c:	180b883a 	mov	r5,r3
    9f60:	1009883a 	mov	r4,r2
    9f64:	000bdc80 	call	bdc8 <alt_alarm_start>
    9f68:	1000040e 	bge	r2,zero,9f7c <altera_avalon_jtag_uart_init+0x124>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    9f6c:	e0fff917 	ldw	r3,-28(fp)
    9f70:	00a00034 	movhi	r2,32768
    9f74:	10bfffc4 	addi	r2,r2,-1
    9f78:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    9f7c:	0001883a 	nop
    9f80:	e037883a 	mov	sp,fp
    9f84:	dfc00117 	ldw	ra,4(sp)
    9f88:	df000017 	ldw	fp,0(sp)
    9f8c:	dec00204 	addi	sp,sp,8
    9f90:	f800283a 	ret

00009f94 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    9f94:	defff104 	addi	sp,sp,-60
    9f98:	dfc00e15 	stw	ra,56(sp)
    9f9c:	df000d15 	stw	fp,52(sp)
    9fa0:	df000d04 	addi	fp,sp,52
    9fa4:	e13ffe15 	stw	r4,-8(fp)
    9fa8:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    9fac:	e0bffe17 	ldw	r2,-8(fp)
    9fb0:	e0bff515 	stw	r2,-44(fp)
  unsigned int base = sp->base;
    9fb4:	e0bff517 	ldw	r2,-44(fp)
    9fb8:	10800017 	ldw	r2,0(r2)
    9fbc:	e0bff615 	stw	r2,-40(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    9fc0:	e0bff617 	ldw	r2,-40(fp)
    9fc4:	10800104 	addi	r2,r2,4
    9fc8:	10800037 	ldwio	r2,0(r2)
    9fcc:	e0bff715 	stw	r2,-36(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    9fd0:	e0bff717 	ldw	r2,-36(fp)
    9fd4:	1080c00c 	andi	r2,r2,768
    9fd8:	10009126 	beq	r2,zero,a220 <altera_avalon_jtag_uart_irq+0x28c>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    9fdc:	e0bff717 	ldw	r2,-36(fp)
    9fe0:	1080400c 	andi	r2,r2,256
    9fe4:	10004726 	beq	r2,zero,a104 <altera_avalon_jtag_uart_irq+0x170>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    9fe8:	00800074 	movhi	r2,1
    9fec:	e0bff315 	stw	r2,-52(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    9ff0:	e0bff517 	ldw	r2,-44(fp)
    9ff4:	10800d17 	ldw	r2,52(r2)
    9ff8:	10800044 	addi	r2,r2,1
    9ffc:	1081ffcc 	andi	r2,r2,2047
    a000:	e0bff815 	stw	r2,-32(fp)
        if (next == sp->rx_out)
    a004:	e0bff517 	ldw	r2,-44(fp)
    a008:	10c00e17 	ldw	r3,56(r2)
    a00c:	e0bff817 	ldw	r2,-32(fp)
    a010:	18802726 	beq	r3,r2,a0b0 <altera_avalon_jtag_uart_irq+0x11c>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    a014:	e0bff617 	ldw	r2,-40(fp)
    a018:	10800037 	ldwio	r2,0(r2)
    a01c:	e0bff315 	stw	r2,-52(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    a020:	e0bff317 	ldw	r2,-52(fp)
    a024:	10a0000c 	andi	r2,r2,32768
    a028:	10002326 	beq	r2,zero,a0b8 <altera_avalon_jtag_uart_irq+0x124>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    a02c:	e0bff517 	ldw	r2,-44(fp)
    a030:	10800d17 	ldw	r2,52(r2)
    a034:	e0fff317 	ldw	r3,-52(fp)
    a038:	1809883a 	mov	r4,r3
    a03c:	e0fff517 	ldw	r3,-44(fp)
    a040:	1885883a 	add	r2,r3,r2
    a044:	10801104 	addi	r2,r2,68
    a048:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    a04c:	e0bff517 	ldw	r2,-44(fp)
    a050:	10800d17 	ldw	r2,52(r2)
    a054:	10800044 	addi	r2,r2,1
    a058:	10c1ffcc 	andi	r3,r2,2047
    a05c:	e0bff517 	ldw	r2,-44(fp)
    a060:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
    a064:	e0bff517 	ldw	r2,-44(fp)
    a068:	10800c17 	ldw	r2,48(r2)
    a06c:	e0bffa15 	stw	r2,-24(fp)
    a070:	00800044 	movi	r2,1
    a074:	e0bffb0d 	sth	r2,-20(fp)
    a078:	00800044 	movi	r2,1
    a07c:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
    a080:	d0a7f443 	ldbu	r2,-24623(gp)
    a084:	10803fcc 	andi	r2,r2,255
    a088:	103fd926 	beq	r2,zero,9ff0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009ff0>
  {
    OSFlagPost (group, flags, opt, &err);
    a08c:	e0bffb0b 	ldhu	r2,-20(fp)
    a090:	e0fffb83 	ldbu	r3,-18(fp)
    a094:	e13ffcc4 	addi	r4,fp,-13
    a098:	200f883a 	mov	r7,r4
    a09c:	180d883a 	mov	r6,r3
    a0a0:	100b883a 	mov	r5,r2
    a0a4:	e13ffa17 	ldw	r4,-24(fp)
    a0a8:	0004d2c0 	call	4d2c <OSFlagPost>
      }
    a0ac:	003fd006 	br	9ff0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009ff0>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    a0b0:	0001883a 	nop
    a0b4:	00000106 	br	a0bc <altera_avalon_jtag_uart_irq+0x128>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    a0b8:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    a0bc:	e0bff317 	ldw	r2,-52(fp)
    a0c0:	10bfffec 	andhi	r2,r2,65535
    a0c4:	10000f26 	beq	r2,zero,a104 <altera_avalon_jtag_uart_irq+0x170>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    a0c8:	e0bff517 	ldw	r2,-44(fp)
    a0cc:	10c00817 	ldw	r3,32(r2)
    a0d0:	00bfff84 	movi	r2,-2
    a0d4:	1886703a 	and	r3,r3,r2
    a0d8:	e0bff517 	ldw	r2,-44(fp)
    a0dc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    a0e0:	e0bff617 	ldw	r2,-40(fp)
    a0e4:	10800104 	addi	r2,r2,4
    a0e8:	1007883a 	mov	r3,r2
    a0ec:	e0bff517 	ldw	r2,-44(fp)
    a0f0:	10800817 	ldw	r2,32(r2)
    a0f4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    a0f8:	e0bff617 	ldw	r2,-40(fp)
    a0fc:	10800104 	addi	r2,r2,4
    a100:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    a104:	e0bff717 	ldw	r2,-36(fp)
    a108:	1080800c 	andi	r2,r2,512
    a10c:	103fac26 	beq	r2,zero,9fc0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009fc0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    a110:	e0bff717 	ldw	r2,-36(fp)
    a114:	1004d43a 	srli	r2,r2,16
    a118:	e0bff415 	stw	r2,-48(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    a11c:	00002606 	br	a1b8 <altera_avalon_jtag_uart_irq+0x224>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    a120:	e0bff617 	ldw	r2,-40(fp)
    a124:	e0fff517 	ldw	r3,-44(fp)
    a128:	18c01017 	ldw	r3,64(r3)
    a12c:	e13ff517 	ldw	r4,-44(fp)
    a130:	20c7883a 	add	r3,r4,r3
    a134:	18c21104 	addi	r3,r3,2116
    a138:	18c00003 	ldbu	r3,0(r3)
    a13c:	18c03fcc 	andi	r3,r3,255
    a140:	18c0201c 	xori	r3,r3,128
    a144:	18ffe004 	addi	r3,r3,-128
    a148:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    a14c:	e0bff517 	ldw	r2,-44(fp)
    a150:	10801017 	ldw	r2,64(r2)
    a154:	10800044 	addi	r2,r2,1
    a158:	10c1ffcc 	andi	r3,r2,2047
    a15c:	e0bff517 	ldw	r2,-44(fp)
    a160:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
    a164:	e0bff517 	ldw	r2,-44(fp)
    a168:	10800c17 	ldw	r2,48(r2)
    a16c:	e0bff915 	stw	r2,-28(fp)
    a170:	00800084 	movi	r2,2
    a174:	e0bffc0d 	sth	r2,-16(fp)
    a178:	00800044 	movi	r2,1
    a17c:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
    a180:	d0a7f443 	ldbu	r2,-24623(gp)
    a184:	10803fcc 	andi	r2,r2,255
    a188:	10000826 	beq	r2,zero,a1ac <altera_avalon_jtag_uart_irq+0x218>
  {
    OSFlagPost (group, flags, opt, &err);
    a18c:	e0bffc0b 	ldhu	r2,-16(fp)
    a190:	e0fffc83 	ldbu	r3,-14(fp)
    a194:	e13ffd04 	addi	r4,fp,-12
    a198:	200f883a 	mov	r7,r4
    a19c:	180d883a 	mov	r6,r3
    a1a0:	100b883a 	mov	r5,r2
    a1a4:	e13ff917 	ldw	r4,-28(fp)
    a1a8:	0004d2c0 	call	4d2c <OSFlagPost>

        space--;
    a1ac:	e0bff417 	ldw	r2,-48(fp)
    a1b0:	10bfffc4 	addi	r2,r2,-1
    a1b4:	e0bff415 	stw	r2,-48(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    a1b8:	e0bff417 	ldw	r2,-48(fp)
    a1bc:	10000526 	beq	r2,zero,a1d4 <altera_avalon_jtag_uart_irq+0x240>
    a1c0:	e0bff517 	ldw	r2,-44(fp)
    a1c4:	10c01017 	ldw	r3,64(r2)
    a1c8:	e0bff517 	ldw	r2,-44(fp)
    a1cc:	10800f17 	ldw	r2,60(r2)
    a1d0:	18bfd31e 	bne	r3,r2,a120 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a120>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    a1d4:	e0bff417 	ldw	r2,-48(fp)
    a1d8:	103f7926 	beq	r2,zero,9fc0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009fc0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    a1dc:	e0bff517 	ldw	r2,-44(fp)
    a1e0:	10c00817 	ldw	r3,32(r2)
    a1e4:	00bfff44 	movi	r2,-3
    a1e8:	1886703a 	and	r3,r3,r2
    a1ec:	e0bff517 	ldw	r2,-44(fp)
    a1f0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    a1f4:	e0bff517 	ldw	r2,-44(fp)
    a1f8:	10800017 	ldw	r2,0(r2)
    a1fc:	10800104 	addi	r2,r2,4
    a200:	1007883a 	mov	r3,r2
    a204:	e0bff517 	ldw	r2,-44(fp)
    a208:	10800817 	ldw	r2,32(r2)
    a20c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    a210:	e0bff617 	ldw	r2,-40(fp)
    a214:	10800104 	addi	r2,r2,4
    a218:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    a21c:	003f6806 	br	9fc0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009fc0>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    a220:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    a224:	0001883a 	nop
    a228:	e037883a 	mov	sp,fp
    a22c:	dfc00117 	ldw	ra,4(sp)
    a230:	df000017 	ldw	fp,0(sp)
    a234:	dec00204 	addi	sp,sp,8
    a238:	f800283a 	ret

0000a23c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    a23c:	defff904 	addi	sp,sp,-28
    a240:	dfc00615 	stw	ra,24(sp)
    a244:	df000515 	stw	fp,20(sp)
    a248:	df000504 	addi	fp,sp,20
    a24c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    a250:	e0bfff17 	ldw	r2,-4(fp)
    a254:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    a258:	e0bffb17 	ldw	r2,-20(fp)
    a25c:	10800017 	ldw	r2,0(r2)
    a260:	10800104 	addi	r2,r2,4
    a264:	10800037 	ldwio	r2,0(r2)
    a268:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    a26c:	e0bffc17 	ldw	r2,-16(fp)
    a270:	1081000c 	andi	r2,r2,1024
    a274:	10000b26 	beq	r2,zero,a2a4 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    a278:	e0bffb17 	ldw	r2,-20(fp)
    a27c:	10800017 	ldw	r2,0(r2)
    a280:	10800104 	addi	r2,r2,4
    a284:	1007883a 	mov	r3,r2
    a288:	e0bffb17 	ldw	r2,-20(fp)
    a28c:	10800817 	ldw	r2,32(r2)
    a290:	10810014 	ori	r2,r2,1024
    a294:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    a298:	e0bffb17 	ldw	r2,-20(fp)
    a29c:	10000915 	stw	zero,36(r2)
    a2a0:	00002106 	br	a328 <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    a2a4:	e0bffb17 	ldw	r2,-20(fp)
    a2a8:	10c00917 	ldw	r3,36(r2)
    a2ac:	00a00034 	movhi	r2,32768
    a2b0:	10bfff04 	addi	r2,r2,-4
    a2b4:	10c01c36 	bltu	r2,r3,a328 <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
    a2b8:	e0bffb17 	ldw	r2,-20(fp)
    a2bc:	10800917 	ldw	r2,36(r2)
    a2c0:	10c00044 	addi	r3,r2,1
    a2c4:	e0bffb17 	ldw	r2,-20(fp)
    a2c8:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
    a2cc:	e0bffb17 	ldw	r2,-20(fp)
    a2d0:	10c00917 	ldw	r3,36(r2)
    a2d4:	e0bffb17 	ldw	r2,-20(fp)
    a2d8:	10800117 	ldw	r2,4(r2)
    a2dc:	18801236 	bltu	r3,r2,a328 <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    a2e0:	e0bffb17 	ldw	r2,-20(fp)
    a2e4:	10800c17 	ldw	r2,48(r2)
    a2e8:	e0bffd15 	stw	r2,-12(fp)
    a2ec:	00800104 	movi	r2,4
    a2f0:	e0bffe0d 	sth	r2,-8(fp)
    a2f4:	00800044 	movi	r2,1
    a2f8:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
    a2fc:	d0a7f443 	ldbu	r2,-24623(gp)
    a300:	10803fcc 	andi	r2,r2,255
    a304:	10000826 	beq	r2,zero,a328 <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
    a308:	e0bffe0b 	ldhu	r2,-8(fp)
    a30c:	e0fffe83 	ldbu	r3,-6(fp)
    a310:	e13ffec4 	addi	r4,fp,-5
    a314:	200f883a 	mov	r7,r4
    a318:	180d883a 	mov	r6,r3
    a31c:	100b883a 	mov	r5,r2
    a320:	e13ffd17 	ldw	r4,-12(fp)
    a324:	0004d2c0 	call	4d2c <OSFlagPost>
    a328:	d0a80a17 	ldw	r2,-24536(gp)
    }
  }

  return alt_ticks_per_second();
}
    a32c:	e037883a 	mov	sp,fp
    a330:	dfc00117 	ldw	ra,4(sp)
    a334:	df000017 	ldw	fp,0(sp)
    a338:	dec00204 	addi	sp,sp,8
    a33c:	f800283a 	ret

0000a340 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    a340:	defffd04 	addi	sp,sp,-12
    a344:	df000215 	stw	fp,8(sp)
    a348:	df000204 	addi	fp,sp,8
    a34c:	e13ffe15 	stw	r4,-8(fp)
    a350:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    a354:	00000506 	br	a36c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    a358:	e0bfff17 	ldw	r2,-4(fp)
    a35c:	1090000c 	andi	r2,r2,16384
    a360:	10000226 	beq	r2,zero,a36c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    a364:	00bffd44 	movi	r2,-11
    a368:	00000b06 	br	a398 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    a36c:	e0bffe17 	ldw	r2,-8(fp)
    a370:	10c01017 	ldw	r3,64(r2)
    a374:	e0bffe17 	ldw	r2,-8(fp)
    a378:	10800f17 	ldw	r2,60(r2)
    a37c:	18800526 	beq	r3,r2,a394 <altera_avalon_jtag_uart_close+0x54>
    a380:	e0bffe17 	ldw	r2,-8(fp)
    a384:	10c00917 	ldw	r3,36(r2)
    a388:	e0bffe17 	ldw	r2,-8(fp)
    a38c:	10800117 	ldw	r2,4(r2)
    a390:	18bff136 	bltu	r3,r2,a358 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a358>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    a394:	0005883a 	mov	r2,zero
}
    a398:	e037883a 	mov	sp,fp
    a39c:	df000017 	ldw	fp,0(sp)
    a3a0:	dec00104 	addi	sp,sp,4
    a3a4:	f800283a 	ret

0000a3a8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    a3a8:	defffa04 	addi	sp,sp,-24
    a3ac:	df000515 	stw	fp,20(sp)
    a3b0:	df000504 	addi	fp,sp,20
    a3b4:	e13ffd15 	stw	r4,-12(fp)
    a3b8:	e17ffe15 	stw	r5,-8(fp)
    a3bc:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    a3c0:	00bff9c4 	movi	r2,-25
    a3c4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    a3c8:	e0bffe17 	ldw	r2,-8(fp)
    a3cc:	10da8060 	cmpeqi	r3,r2,27137
    a3d0:	1800031e 	bne	r3,zero,a3e0 <altera_avalon_jtag_uart_ioctl+0x38>
    a3d4:	109a80a0 	cmpeqi	r2,r2,27138
    a3d8:	1000181e 	bne	r2,zero,a43c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    a3dc:	00002906 	br	a484 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    a3e0:	e0bffd17 	ldw	r2,-12(fp)
    a3e4:	10c00117 	ldw	r3,4(r2)
    a3e8:	00a00034 	movhi	r2,32768
    a3ec:	10bfffc4 	addi	r2,r2,-1
    a3f0:	18802126 	beq	r3,r2,a478 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    a3f4:	e0bfff17 	ldw	r2,-4(fp)
    a3f8:	10800017 	ldw	r2,0(r2)
    a3fc:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    a400:	e0bffc17 	ldw	r2,-16(fp)
    a404:	10800090 	cmplti	r2,r2,2
    a408:	1000061e 	bne	r2,zero,a424 <altera_avalon_jtag_uart_ioctl+0x7c>
    a40c:	e0fffc17 	ldw	r3,-16(fp)
    a410:	00a00034 	movhi	r2,32768
    a414:	10bfffc4 	addi	r2,r2,-1
    a418:	18800226 	beq	r3,r2,a424 <altera_avalon_jtag_uart_ioctl+0x7c>
    a41c:	e0bffc17 	ldw	r2,-16(fp)
    a420:	00000206 	br	a42c <altera_avalon_jtag_uart_ioctl+0x84>
    a424:	00a00034 	movhi	r2,32768
    a428:	10bfff84 	addi	r2,r2,-2
    a42c:	e0fffd17 	ldw	r3,-12(fp)
    a430:	18800115 	stw	r2,4(r3)
      rc = 0;
    a434:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    a438:	00000f06 	br	a478 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    a43c:	e0bffd17 	ldw	r2,-12(fp)
    a440:	10c00117 	ldw	r3,4(r2)
    a444:	00a00034 	movhi	r2,32768
    a448:	10bfffc4 	addi	r2,r2,-1
    a44c:	18800c26 	beq	r3,r2,a480 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    a450:	e0bffd17 	ldw	r2,-12(fp)
    a454:	10c00917 	ldw	r3,36(r2)
    a458:	e0bffd17 	ldw	r2,-12(fp)
    a45c:	10800117 	ldw	r2,4(r2)
    a460:	1885803a 	cmpltu	r2,r3,r2
    a464:	10c03fcc 	andi	r3,r2,255
    a468:	e0bfff17 	ldw	r2,-4(fp)
    a46c:	10c00015 	stw	r3,0(r2)
      rc = 0;
    a470:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    a474:	00000206 	br	a480 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    a478:	0001883a 	nop
    a47c:	00000106 	br	a484 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    a480:	0001883a 	nop

  default:
    break;
  }

  return rc;
    a484:	e0bffb17 	ldw	r2,-20(fp)
}
    a488:	e037883a 	mov	sp,fp
    a48c:	df000017 	ldw	fp,0(sp)
    a490:	dec00104 	addi	sp,sp,4
    a494:	f800283a 	ret

0000a498 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    a498:	deffed04 	addi	sp,sp,-76
    a49c:	dfc01215 	stw	ra,72(sp)
    a4a0:	df001115 	stw	fp,68(sp)
    a4a4:	df001104 	addi	fp,sp,68
    a4a8:	e13ffc15 	stw	r4,-16(fp)
    a4ac:	e17ffd15 	stw	r5,-12(fp)
    a4b0:	e1bffe15 	stw	r6,-8(fp)
    a4b4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    a4b8:	e0bffd17 	ldw	r2,-12(fp)
    a4bc:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
    a4c0:	e0bffc17 	ldw	r2,-16(fp)
    a4c4:	10800a17 	ldw	r2,40(r2)
    a4c8:	e0bff815 	stw	r2,-32(fp)
    a4cc:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
    a4d0:	e0bff90b 	ldhu	r2,-28(fp)
    a4d4:	e0fffb04 	addi	r3,fp,-20
    a4d8:	180d883a 	mov	r6,r3
    a4dc:	100b883a 	mov	r5,r2
    a4e0:	e13ff817 	ldw	r4,-32(fp)
    a4e4:	000717c0 	call	717c <OSSemPend>

  while (space > 0)
    a4e8:	00006106 	br	a670 <altera_avalon_jtag_uart_read+0x1d8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    a4ec:	e0bffc17 	ldw	r2,-16(fp)
    a4f0:	10800d17 	ldw	r2,52(r2)
    a4f4:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
    a4f8:	e0bffc17 	ldw	r2,-16(fp)
    a4fc:	10800e17 	ldw	r2,56(r2)
    a500:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
    a504:	e0fff317 	ldw	r3,-52(fp)
    a508:	e0bff417 	ldw	r2,-48(fp)
    a50c:	18800536 	bltu	r3,r2,a524 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
    a510:	e0fff317 	ldw	r3,-52(fp)
    a514:	e0bff417 	ldw	r2,-48(fp)
    a518:	1885c83a 	sub	r2,r3,r2
    a51c:	e0bff115 	stw	r2,-60(fp)
    a520:	00000406 	br	a534 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    a524:	00c20004 	movi	r3,2048
    a528:	e0bff417 	ldw	r2,-48(fp)
    a52c:	1885c83a 	sub	r2,r3,r2
    a530:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
    a534:	e0bff117 	ldw	r2,-60(fp)
    a538:	10001e26 	beq	r2,zero,a5b4 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
    a53c:	e0fffe17 	ldw	r3,-8(fp)
    a540:	e0bff117 	ldw	r2,-60(fp)
    a544:	1880022e 	bgeu	r3,r2,a550 <altera_avalon_jtag_uart_read+0xb8>
        n = space;
    a548:	e0bffe17 	ldw	r2,-8(fp)
    a54c:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    a550:	e0bffc17 	ldw	r2,-16(fp)
    a554:	10c01104 	addi	r3,r2,68
    a558:	e0bff417 	ldw	r2,-48(fp)
    a55c:	1885883a 	add	r2,r3,r2
    a560:	e1bff117 	ldw	r6,-60(fp)
    a564:	100b883a 	mov	r5,r2
    a568:	e13ff017 	ldw	r4,-64(fp)
    a56c:	000d1200 	call	d120 <memcpy>
      ptr   += n;
    a570:	e0fff017 	ldw	r3,-64(fp)
    a574:	e0bff117 	ldw	r2,-60(fp)
    a578:	1885883a 	add	r2,r3,r2
    a57c:	e0bff015 	stw	r2,-64(fp)
      space -= n;
    a580:	e0fffe17 	ldw	r3,-8(fp)
    a584:	e0bff117 	ldw	r2,-60(fp)
    a588:	1885c83a 	sub	r2,r3,r2
    a58c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    a590:	e0fff417 	ldw	r3,-48(fp)
    a594:	e0bff117 	ldw	r2,-60(fp)
    a598:	1885883a 	add	r2,r3,r2
    a59c:	10c1ffcc 	andi	r3,r2,2047
    a5a0:	e0bffc17 	ldw	r2,-16(fp)
    a5a4:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
    a5a8:	e0bffe17 	ldw	r2,-8(fp)
    a5ac:	00bfcf16 	blt	zero,r2,a4ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a4ec>
    a5b0:	00000106 	br	a5b8 <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    a5b4:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    a5b8:	e0fff017 	ldw	r3,-64(fp)
    a5bc:	e0bffd17 	ldw	r2,-12(fp)
    a5c0:	18802e1e 	bne	r3,r2,a67c <altera_avalon_jtag_uart_read+0x1e4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    a5c4:	e0bfff17 	ldw	r2,-4(fp)
    a5c8:	1090000c 	andi	r2,r2,16384
    a5cc:	10002d1e 	bne	r2,zero,a684 <altera_avalon_jtag_uart_read+0x1ec>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
    a5d0:	d0a7f443 	ldbu	r2,-24623(gp)
    a5d4:	10803fcc 	andi	r2,r2,255
    a5d8:	10800058 	cmpnei	r2,r2,1
    a5dc:	1000161e 	bne	r2,zero,a638 <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
    a5e0:	e0bffc17 	ldw	r2,-16(fp)
    a5e4:	10800c17 	ldw	r2,48(r2)
    a5e8:	e0bff215 	stw	r2,-56(fp)
    a5ec:	00800144 	movi	r2,5
    a5f0:	e0bff98d 	sth	r2,-26(fp)
    a5f4:	00bfe0c4 	movi	r2,-125
    a5f8:	e0bffa05 	stb	r2,-24(fp)
    a5fc:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
    a600:	d0a7f443 	ldbu	r2,-24623(gp)
    a604:	10803fcc 	andi	r2,r2,255
    a608:	10001526 	beq	r2,zero,a660 <altera_avalon_jtag_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
    a60c:	e0fff98b 	ldhu	r3,-26(fp)
    a610:	e13ffa03 	ldbu	r4,-24(fp)
    a614:	e17ffa8b 	ldhu	r5,-22(fp)
    a618:	e0bffb44 	addi	r2,fp,-19
    a61c:	d8800015 	stw	r2,0(sp)
    a620:	280f883a 	mov	r7,r5
    a624:	200d883a 	mov	r6,r4
    a628:	180b883a 	mov	r5,r3
    a62c:	e13ff217 	ldw	r4,-56(fp)
    a630:	00047140 	call	4714 <OSFlagPend>
    a634:	00000a06 	br	a660 <altera_avalon_jtag_uart_read+0x1c8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    a638:	0001883a 	nop
    a63c:	e0bffc17 	ldw	r2,-16(fp)
    a640:	10c00d17 	ldw	r3,52(r2)
    a644:	e0bff317 	ldw	r2,-52(fp)
    a648:	1880051e 	bne	r3,r2,a660 <altera_avalon_jtag_uart_read+0x1c8>
    a64c:	e0bffc17 	ldw	r2,-16(fp)
    a650:	10c00917 	ldw	r3,36(r2)
    a654:	e0bffc17 	ldw	r2,-16(fp)
    a658:	10800117 	ldw	r2,4(r2)
    a65c:	18bff736 	bltu	r3,r2,a63c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a63c>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    a660:	e0bffc17 	ldw	r2,-16(fp)
    a664:	10c00d17 	ldw	r3,52(r2)
    a668:	e0bff317 	ldw	r2,-52(fp)
    a66c:	18800726 	beq	r3,r2,a68c <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    a670:	e0bffe17 	ldw	r2,-8(fp)
    a674:	00bf9d16 	blt	zero,r2,a4ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a4ec>
    a678:	00000506 	br	a690 <altera_avalon_jtag_uart_read+0x1f8>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    a67c:	0001883a 	nop
    a680:	00000306 	br	a690 <altera_avalon_jtag_uart_read+0x1f8>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    a684:	0001883a 	nop
    a688:	00000106 	br	a690 <altera_avalon_jtag_uart_read+0x1f8>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    a68c:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
    a690:	e0bffc17 	ldw	r2,-16(fp)
    a694:	10800a17 	ldw	r2,40(r2)
    a698:	1009883a 	mov	r4,r2
    a69c:	00074f40 	call	74f4 <OSSemPost>

  if (ptr != buffer)
    a6a0:	e0fff017 	ldw	r3,-64(fp)
    a6a4:	e0bffd17 	ldw	r2,-12(fp)
    a6a8:	18801826 	beq	r3,r2,a70c <altera_avalon_jtag_uart_read+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a6ac:	0005303a 	rdctl	r2,status
    a6b0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a6b4:	e0fff717 	ldw	r3,-36(fp)
    a6b8:	00bfff84 	movi	r2,-2
    a6bc:	1884703a 	and	r2,r3,r2
    a6c0:	1001703a 	wrctl	status,r2
  
  return context;
    a6c4:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    a6c8:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    a6cc:	e0bffc17 	ldw	r2,-16(fp)
    a6d0:	10800817 	ldw	r2,32(r2)
    a6d4:	10c00054 	ori	r3,r2,1
    a6d8:	e0bffc17 	ldw	r2,-16(fp)
    a6dc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    a6e0:	e0bffc17 	ldw	r2,-16(fp)
    a6e4:	10800017 	ldw	r2,0(r2)
    a6e8:	10800104 	addi	r2,r2,4
    a6ec:	1007883a 	mov	r3,r2
    a6f0:	e0bffc17 	ldw	r2,-16(fp)
    a6f4:	10800817 	ldw	r2,32(r2)
    a6f8:	18800035 	stwio	r2,0(r3)
    a6fc:	e0bff617 	ldw	r2,-40(fp)
    a700:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a704:	e0bff517 	ldw	r2,-44(fp)
    a708:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    a70c:	e0fff017 	ldw	r3,-64(fp)
    a710:	e0bffd17 	ldw	r2,-12(fp)
    a714:	18800426 	beq	r3,r2,a728 <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
    a718:	e0fff017 	ldw	r3,-64(fp)
    a71c:	e0bffd17 	ldw	r2,-12(fp)
    a720:	1885c83a 	sub	r2,r3,r2
    a724:	00000606 	br	a740 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
    a728:	e0bfff17 	ldw	r2,-4(fp)
    a72c:	1090000c 	andi	r2,r2,16384
    a730:	10000226 	beq	r2,zero,a73c <altera_avalon_jtag_uart_read+0x2a4>
    return -EWOULDBLOCK;
    a734:	00bffd44 	movi	r2,-11
    a738:	00000106 	br	a740 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
    a73c:	00bffec4 	movi	r2,-5
}
    a740:	e037883a 	mov	sp,fp
    a744:	dfc00117 	ldw	ra,4(sp)
    a748:	df000017 	ldw	fp,0(sp)
    a74c:	dec00204 	addi	sp,sp,8
    a750:	f800283a 	ret

0000a754 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    a754:	deffed04 	addi	sp,sp,-76
    a758:	dfc01215 	stw	ra,72(sp)
    a75c:	df001115 	stw	fp,68(sp)
    a760:	df001104 	addi	fp,sp,68
    a764:	e13ffc15 	stw	r4,-16(fp)
    a768:	e17ffd15 	stw	r5,-12(fp)
    a76c:	e1bffe15 	stw	r6,-8(fp)
    a770:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    a774:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    a778:	e0bffd17 	ldw	r2,-12(fp)
    a77c:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
    a780:	e0bffc17 	ldw	r2,-16(fp)
    a784:	10800b17 	ldw	r2,44(r2)
    a788:	e0bff815 	stw	r2,-32(fp)
    a78c:	e03ff90d 	sth	zero,-28(fp)
    a790:	e0bff90b 	ldhu	r2,-28(fp)
    a794:	e0fffb44 	addi	r3,fp,-19
    a798:	180d883a 	mov	r6,r3
    a79c:	100b883a 	mov	r5,r2
    a7a0:	e13ff817 	ldw	r4,-32(fp)
    a7a4:	000717c0 	call	717c <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    a7a8:	00003706 	br	a888 <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    a7ac:	e0bffc17 	ldw	r2,-16(fp)
    a7b0:	10800f17 	ldw	r2,60(r2)
    a7b4:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
    a7b8:	e0bffc17 	ldw	r2,-16(fp)
    a7bc:	10801017 	ldw	r2,64(r2)
    a7c0:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
    a7c4:	e0fff417 	ldw	r3,-48(fp)
    a7c8:	e0bff017 	ldw	r2,-64(fp)
    a7cc:	1880062e 	bgeu	r3,r2,a7e8 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
    a7d0:	e0fff017 	ldw	r3,-64(fp)
    a7d4:	e0bff417 	ldw	r2,-48(fp)
    a7d8:	1885c83a 	sub	r2,r3,r2
    a7dc:	10bfffc4 	addi	r2,r2,-1
    a7e0:	e0bff115 	stw	r2,-60(fp)
    a7e4:	00000b06 	br	a814 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
    a7e8:	e0bff017 	ldw	r2,-64(fp)
    a7ec:	10000526 	beq	r2,zero,a804 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    a7f0:	00c20004 	movi	r3,2048
    a7f4:	e0bff417 	ldw	r2,-48(fp)
    a7f8:	1885c83a 	sub	r2,r3,r2
    a7fc:	e0bff115 	stw	r2,-60(fp)
    a800:	00000406 	br	a814 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    a804:	00c1ffc4 	movi	r3,2047
    a808:	e0bff417 	ldw	r2,-48(fp)
    a80c:	1885c83a 	sub	r2,r3,r2
    a810:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
    a814:	e0bff117 	ldw	r2,-60(fp)
    a818:	10001e26 	beq	r2,zero,a894 <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
    a81c:	e0fffe17 	ldw	r3,-8(fp)
    a820:	e0bff117 	ldw	r2,-60(fp)
    a824:	1880022e 	bgeu	r3,r2,a830 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
    a828:	e0bffe17 	ldw	r2,-8(fp)
    a82c:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    a830:	e0bffc17 	ldw	r2,-16(fp)
    a834:	10c21104 	addi	r3,r2,2116
    a838:	e0bff417 	ldw	r2,-48(fp)
    a83c:	1885883a 	add	r2,r3,r2
    a840:	e1bff117 	ldw	r6,-60(fp)
    a844:	e17ffd17 	ldw	r5,-12(fp)
    a848:	1009883a 	mov	r4,r2
    a84c:	000d1200 	call	d120 <memcpy>
      ptr   += n;
    a850:	e0fffd17 	ldw	r3,-12(fp)
    a854:	e0bff117 	ldw	r2,-60(fp)
    a858:	1885883a 	add	r2,r3,r2
    a85c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    a860:	e0fffe17 	ldw	r3,-8(fp)
    a864:	e0bff117 	ldw	r2,-60(fp)
    a868:	1885c83a 	sub	r2,r3,r2
    a86c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    a870:	e0fff417 	ldw	r3,-48(fp)
    a874:	e0bff117 	ldw	r2,-60(fp)
    a878:	1885883a 	add	r2,r3,r2
    a87c:	10c1ffcc 	andi	r3,r2,2047
    a880:	e0bffc17 	ldw	r2,-16(fp)
    a884:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    a888:	e0bffe17 	ldw	r2,-8(fp)
    a88c:	00bfc716 	blt	zero,r2,a7ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a7ac>
    a890:	00000106 	br	a898 <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    a894:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a898:	0005303a 	rdctl	r2,status
    a89c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a8a0:	e0fff717 	ldw	r3,-36(fp)
    a8a4:	00bfff84 	movi	r2,-2
    a8a8:	1884703a 	and	r2,r3,r2
    a8ac:	1001703a 	wrctl	status,r2
  
  return context;
    a8b0:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    a8b4:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    a8b8:	e0bffc17 	ldw	r2,-16(fp)
    a8bc:	10800817 	ldw	r2,32(r2)
    a8c0:	10c00094 	ori	r3,r2,2
    a8c4:	e0bffc17 	ldw	r2,-16(fp)
    a8c8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    a8cc:	e0bffc17 	ldw	r2,-16(fp)
    a8d0:	10800017 	ldw	r2,0(r2)
    a8d4:	10800104 	addi	r2,r2,4
    a8d8:	1007883a 	mov	r3,r2
    a8dc:	e0bffc17 	ldw	r2,-16(fp)
    a8e0:	10800817 	ldw	r2,32(r2)
    a8e4:	18800035 	stwio	r2,0(r3)
    a8e8:	e0bff617 	ldw	r2,-40(fp)
    a8ec:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a8f0:	e0bff317 	ldw	r2,-52(fp)
    a8f4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    a8f8:	e0bffe17 	ldw	r2,-8(fp)
    a8fc:	00802a0e 	bge	zero,r2,a9a8 <altera_avalon_jtag_uart_write+0x254>
    {
      if (flags & O_NONBLOCK)
    a900:	e0bfff17 	ldw	r2,-4(fp)
    a904:	1090000c 	andi	r2,r2,16384
    a908:	10002a1e 	bne	r2,zero,a9b4 <altera_avalon_jtag_uart_write+0x260>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
    a90c:	d0a7f443 	ldbu	r2,-24623(gp)
    a910:	10803fcc 	andi	r2,r2,255
    a914:	10800058 	cmpnei	r2,r2,1
    a918:	1000161e 	bne	r2,zero,a974 <altera_avalon_jtag_uart_write+0x220>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
    a91c:	e0bffc17 	ldw	r2,-16(fp)
    a920:	10800c17 	ldw	r2,48(r2)
    a924:	e0bff515 	stw	r2,-44(fp)
    a928:	00800184 	movi	r2,6
    a92c:	e0bff98d 	sth	r2,-26(fp)
    a930:	00bfe0c4 	movi	r2,-125
    a934:	e0bffa05 	stb	r2,-24(fp)
    a938:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
    a93c:	d0a7f443 	ldbu	r2,-24623(gp)
    a940:	10803fcc 	andi	r2,r2,255
    a944:	10001526 	beq	r2,zero,a99c <altera_avalon_jtag_uart_write+0x248>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
    a948:	e0fff98b 	ldhu	r3,-26(fp)
    a94c:	e13ffa03 	ldbu	r4,-24(fp)
    a950:	e17ffa8b 	ldhu	r5,-22(fp)
    a954:	e0bffb04 	addi	r2,fp,-20
    a958:	d8800015 	stw	r2,0(sp)
    a95c:	280f883a 	mov	r7,r5
    a960:	200d883a 	mov	r6,r4
    a964:	180b883a 	mov	r5,r3
    a968:	e13ff517 	ldw	r4,-44(fp)
    a96c:	00047140 	call	4714 <OSFlagPend>
    a970:	00000a06 	br	a99c <altera_avalon_jtag_uart_write+0x248>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    a974:	0001883a 	nop
    a978:	e0bffc17 	ldw	r2,-16(fp)
    a97c:	10c01017 	ldw	r3,64(r2)
    a980:	e0bff017 	ldw	r2,-64(fp)
    a984:	1880051e 	bne	r3,r2,a99c <altera_avalon_jtag_uart_write+0x248>
    a988:	e0bffc17 	ldw	r2,-16(fp)
    a98c:	10c00917 	ldw	r3,36(r2)
    a990:	e0bffc17 	ldw	r2,-16(fp)
    a994:	10800117 	ldw	r2,4(r2)
    a998:	18bff736 	bltu	r3,r2,a978 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a978>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    a99c:	e0bffc17 	ldw	r2,-16(fp)
    a9a0:	10800917 	ldw	r2,36(r2)
    a9a4:	1000051e 	bne	r2,zero,a9bc <altera_avalon_jtag_uart_write+0x268>
         break;
    }
  }
  while (count > 0);
    a9a8:	e0bffe17 	ldw	r2,-8(fp)
    a9ac:	00bfb616 	blt	zero,r2,a888 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a888>
    a9b0:	00000306 	br	a9c0 <altera_avalon_jtag_uart_write+0x26c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    a9b4:	0001883a 	nop
    a9b8:	00000106 	br	a9c0 <altera_avalon_jtag_uart_write+0x26c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    a9bc:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
    a9c0:	e0bffc17 	ldw	r2,-16(fp)
    a9c4:	10800b17 	ldw	r2,44(r2)
    a9c8:	1009883a 	mov	r4,r2
    a9cc:	00074f40 	call	74f4 <OSSemPost>

  if (ptr != start)
    a9d0:	e0fffd17 	ldw	r3,-12(fp)
    a9d4:	e0bff217 	ldw	r2,-56(fp)
    a9d8:	18800426 	beq	r3,r2,a9ec <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
    a9dc:	e0fffd17 	ldw	r3,-12(fp)
    a9e0:	e0bff217 	ldw	r2,-56(fp)
    a9e4:	1885c83a 	sub	r2,r3,r2
    a9e8:	00000606 	br	aa04 <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
    a9ec:	e0bfff17 	ldw	r2,-4(fp)
    a9f0:	1090000c 	andi	r2,r2,16384
    a9f4:	10000226 	beq	r2,zero,aa00 <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
    a9f8:	00bffd44 	movi	r2,-11
    a9fc:	00000106 	br	aa04 <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    aa00:	00bffec4 	movi	r2,-5
}
    aa04:	e037883a 	mov	sp,fp
    aa08:	dfc00117 	ldw	ra,4(sp)
    aa0c:	df000017 	ldw	fp,0(sp)
    aa10:	dec00204 	addi	sp,sp,8
    aa14:	f800283a 	ret

0000aa18 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    aa18:	defff904 	addi	sp,sp,-28
    aa1c:	dfc00615 	stw	ra,24(sp)
    aa20:	df000515 	stw	fp,20(sp)
    aa24:	df000504 	addi	fp,sp,20
    aa28:	e13ffe15 	stw	r4,-8(fp)
    aa2c:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    aa30:	0007883a 	mov	r3,zero
    aa34:	e0bffe17 	ldw	r2,-8(fp)
    aa38:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    aa3c:	e0bffe17 	ldw	r2,-8(fp)
    aa40:	10800104 	addi	r2,r2,4
    aa44:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    aa48:	0005303a 	rdctl	r2,status
    aa4c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    aa50:	e0fffc17 	ldw	r3,-16(fp)
    aa54:	00bfff84 	movi	r2,-2
    aa58:	1884703a 	and	r2,r3,r2
    aa5c:	1001703a 	wrctl	status,r2
  
  return context;
    aa60:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    aa64:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
    aa68:	000c8c40 	call	c8c4 <alt_tick>
    aa6c:	e0bffb17 	ldw	r2,-20(fp)
    aa70:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    aa74:	e0bffd17 	ldw	r2,-12(fp)
    aa78:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    aa7c:	0001883a 	nop
    aa80:	e037883a 	mov	sp,fp
    aa84:	dfc00117 	ldw	ra,4(sp)
    aa88:	df000017 	ldw	fp,0(sp)
    aa8c:	dec00204 	addi	sp,sp,8
    aa90:	f800283a 	ret

0000aa94 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    aa94:	defff904 	addi	sp,sp,-28
    aa98:	dfc00615 	stw	ra,24(sp)
    aa9c:	df000515 	stw	fp,20(sp)
    aaa0:	df000504 	addi	fp,sp,20
    aaa4:	e13ffc15 	stw	r4,-16(fp)
    aaa8:	e17ffd15 	stw	r5,-12(fp)
    aaac:	e1bffe15 	stw	r6,-8(fp)
    aab0:	e1ffff15 	stw	r7,-4(fp)
    aab4:	e0bfff17 	ldw	r2,-4(fp)
    aab8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    aabc:	d0a80a17 	ldw	r2,-24536(gp)
    aac0:	1000021e 	bne	r2,zero,aacc <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
    aac4:	e0bffb17 	ldw	r2,-20(fp)
    aac8:	d0a80a15 	stw	r2,-24536(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    aacc:	e0bffc17 	ldw	r2,-16(fp)
    aad0:	10800104 	addi	r2,r2,4
    aad4:	00c001c4 	movi	r3,7
    aad8:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
    aadc:	01800074 	movhi	r6,1
    aae0:	31aa8604 	addi	r6,r6,-21992
    aae4:	e17ffc17 	ldw	r5,-16(fp)
    aae8:	e13ffe17 	ldw	r4,-8(fp)
    aaec:	000c3f00 	call	c3f0 <alt_irq_register>
#endif  
}
    aaf0:	0001883a 	nop
    aaf4:	e037883a 	mov	sp,fp
    aaf8:	dfc00117 	ldw	ra,4(sp)
    aafc:	df000017 	ldw	fp,0(sp)
    ab00:	dec00204 	addi	sp,sp,8
    ab04:	f800283a 	ret

0000ab08 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
    ab08:	defffc04 	addi	sp,sp,-16
    ab0c:	df000315 	stw	fp,12(sp)
    ab10:	df000304 	addi	fp,sp,12
    ab14:	e13ffe15 	stw	r4,-8(fp)
    ab18:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
    ab1c:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
    ab20:	e0bfff17 	ldw	r2,-4(fp)
    ab24:	1000061e 	bne	r2,zero,ab40 <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
    ab28:	e0bffe17 	ldw	r2,-8(fp)
    ab2c:	1007883a 	mov	r3,r2
    ab30:	e0bffd03 	ldbu	r2,-12(fp)
    ab34:	1884b03a 	or	r2,r3,r2
    ab38:	e0bffd05 	stb	r2,-12(fp)
    ab3c:	00000806 	br	ab60 <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
    ab40:	e0bffe17 	ldw	r2,-8(fp)
    ab44:	1007883a 	mov	r3,r2
    ab48:	e0bffd03 	ldbu	r2,-12(fp)
    ab4c:	1884b03a 	or	r2,r3,r2
    ab50:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
    ab54:	e0bffd03 	ldbu	r2,-12(fp)
    ab58:	10801014 	ori	r2,r2,64
    ab5c:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
    ab60:	e0fffd03 	ldbu	r3,-12(fp)
    ab64:	00bfe004 	movi	r2,-128
    ab68:	1884b03a 	or	r2,r3,r2
}
    ab6c:	e037883a 	mov	sp,fp
    ab70:	df000017 	ldw	fp,0(sp)
    ab74:	dec00104 	addi	sp,sp,4
    ab78:	f800283a 	ret

0000ab7c <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
    ab7c:	defffd04 	addi	sp,sp,-12
    ab80:	df000215 	stw	fp,8(sp)
    ab84:	df000204 	addi	fp,sp,8
    ab88:	e13ffe15 	stw	r4,-8(fp)
    ab8c:	2805883a 	mov	r2,r5
    ab90:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
    ab94:	e0bffe17 	ldw	r2,-8(fp)
    ab98:	10800a17 	ldw	r2,40(r2)
    ab9c:	1007883a 	mov	r3,r2
    aba0:	e0bfff03 	ldbu	r2,-4(fp)
    aba4:	18800025 	stbio	r2,0(r3)
}
    aba8:	0001883a 	nop
    abac:	e037883a 	mov	sp,fp
    abb0:	df000017 	ldw	fp,0(sp)
    abb4:	dec00104 	addi	sp,sp,4
    abb8:	f800283a 	ret

0000abbc <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
    abbc:	defffe04 	addi	sp,sp,-8
    abc0:	df000115 	stw	fp,4(sp)
    abc4:	df000104 	addi	fp,sp,4
    abc8:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
    abcc:	e0bfff17 	ldw	r2,-4(fp)
    abd0:	10800a17 	ldw	r2,40(r2)
    abd4:	1007883a 	mov	r3,r2
    abd8:	00800044 	movi	r2,1
    abdc:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
    abe0:	0001883a 	nop
    abe4:	e037883a 	mov	sp,fp
    abe8:	df000017 	ldw	fp,0(sp)
    abec:	dec00104 	addi	sp,sp,4
    abf0:	f800283a 	ret

0000abf4 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
    abf4:	defffc04 	addi	sp,sp,-16
    abf8:	dfc00315 	stw	ra,12(sp)
    abfc:	df000215 	stw	fp,8(sp)
    ac00:	df000204 	addi	fp,sp,8
    ac04:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
    ac08:	d1602604 	addi	r5,gp,-32616
    ac0c:	e13fff17 	ldw	r4,-4(fp)
    ac10:	000c1ec0 	call	c1ec <alt_find_dev>
    ac14:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    ac18:	e0bffe17 	ldw	r2,-8(fp)
}
    ac1c:	e037883a 	mov	sp,fp
    ac20:	dfc00117 	ldw	ra,4(sp)
    ac24:	df000017 	ldw	fp,0(sp)
    ac28:	dec00204 	addi	sp,sp,8
    ac2c:	f800283a 	ret

0000ac30 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
    ac30:	defffb04 	addi	sp,sp,-20
    ac34:	df000415 	stw	fp,16(sp)
    ac38:	df000404 	addi	fp,sp,16
    ac3c:	e13ffd15 	stw	r4,-12(fp)
    ac40:	e17ffe15 	stw	r5,-8(fp)
    ac44:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
    ac48:	e03ffc15 	stw	zero,-16(fp)
    ac4c:	00000f06 	br	ac8c <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
    ac50:	e0bffd17 	ldw	r2,-12(fp)
    ac54:	10800a17 	ldw	r2,40(r2)
    ac58:	10800044 	addi	r2,r2,1
    ac5c:	1009883a 	mov	r4,r2
    ac60:	e0fffe17 	ldw	r3,-8(fp)
    ac64:	e0bffc17 	ldw	r2,-16(fp)
    ac68:	1885883a 	add	r2,r3,r2
    ac6c:	10800003 	ldbu	r2,0(r2)
    ac70:	10803fcc 	andi	r2,r2,255
    ac74:	1080201c 	xori	r2,r2,128
    ac78:	10bfe004 	addi	r2,r2,-128
    ac7c:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
    ac80:	e0bffc17 	ldw	r2,-16(fp)
    ac84:	10800044 	addi	r2,r2,1
    ac88:	e0bffc15 	stw	r2,-16(fp)
    ac8c:	e0fffc17 	ldw	r3,-16(fp)
    ac90:	e0bfff17 	ldw	r2,-4(fp)
    ac94:	18bfee36 	bltu	r3,r2,ac50 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ac50>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
    ac98:	0001883a 	nop
    ac9c:	e037883a 	mov	sp,fp
    aca0:	df000017 	ldw	fp,0(sp)
    aca4:	dec00104 	addi	sp,sp,4
    aca8:	f800283a 	ret

0000acac <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
    acac:	defffd04 	addi	sp,sp,-12
    acb0:	df000215 	stw	fp,8(sp)
    acb4:	df000204 	addi	fp,sp,8
    acb8:	e13ffe15 	stw	r4,-8(fp)
    acbc:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
    acc0:	00000d06 	br	acf8 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
    acc4:	e0bffe17 	ldw	r2,-8(fp)
    acc8:	10800a17 	ldw	r2,40(r2)
    accc:	10800044 	addi	r2,r2,1
    acd0:	1007883a 	mov	r3,r2
    acd4:	e0bfff17 	ldw	r2,-4(fp)
    acd8:	10800003 	ldbu	r2,0(r2)
    acdc:	10803fcc 	andi	r2,r2,255
    ace0:	1080201c 	xori	r2,r2,128
    ace4:	10bfe004 	addi	r2,r2,-128
    ace8:	18800025 	stbio	r2,0(r3)
		++ptr;
    acec:	e0bfff17 	ldw	r2,-4(fp)
    acf0:	10800044 	addi	r2,r2,1
    acf4:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
    acf8:	e0bfff17 	ldw	r2,-4(fp)
    acfc:	10800003 	ldbu	r2,0(r2)
    ad00:	10803fcc 	andi	r2,r2,255
    ad04:	1080201c 	xori	r2,r2,128
    ad08:	10bfe004 	addi	r2,r2,-128
    ad0c:	103fed1e 	bne	r2,zero,acc4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700acc4>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
    ad10:	0001883a 	nop
    ad14:	e037883a 	mov	sp,fp
    ad18:	df000017 	ldw	fp,0(sp)
    ad1c:	dec00104 	addi	sp,sp,4
    ad20:	f800283a 	ret

0000ad24 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
    ad24:	defffb04 	addi	sp,sp,-20
    ad28:	dfc00415 	stw	ra,16(sp)
    ad2c:	df000315 	stw	fp,12(sp)
    ad30:	df000304 	addi	fp,sp,12
    ad34:	e13ffd15 	stw	r4,-12(fp)
    ad38:	e17ffe15 	stw	r5,-8(fp)
    ad3c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
    ad40:	e0bffd17 	ldw	r2,-12(fp)
    ad44:	10800017 	ldw	r2,0(r2)
    ad48:	e0ffff17 	ldw	r3,-4(fp)
    ad4c:	180d883a 	mov	r6,r3
    ad50:	e17ffe17 	ldw	r5,-8(fp)
    ad54:	1009883a 	mov	r4,r2
    ad58:	000ac300 	call	ac30 <alt_up_character_lcd_write>
	return 0;
    ad5c:	0005883a 	mov	r2,zero
}
    ad60:	e037883a 	mov	sp,fp
    ad64:	dfc00117 	ldw	ra,4(sp)
    ad68:	df000017 	ldw	fp,0(sp)
    ad6c:	dec00204 	addi	sp,sp,8
    ad70:	f800283a 	ret

0000ad74 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
    ad74:	defffa04 	addi	sp,sp,-24
    ad78:	dfc00515 	stw	ra,20(sp)
    ad7c:	df000415 	stw	fp,16(sp)
    ad80:	df000404 	addi	fp,sp,16
    ad84:	e13ffd15 	stw	r4,-12(fp)
    ad88:	e17ffe15 	stw	r5,-8(fp)
    ad8c:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
    ad90:	e0bffe17 	ldw	r2,-8(fp)
    ad94:	10800a28 	cmpgeui	r2,r2,40
    ad98:	1000031e 	bne	r2,zero,ada8 <alt_up_character_lcd_set_cursor_pos+0x34>
    ad9c:	e0bfff17 	ldw	r2,-4(fp)
    ada0:	108000b0 	cmpltui	r2,r2,2
    ada4:	1000021e 	bne	r2,zero,adb0 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
    ada8:	00bfffc4 	movi	r2,-1
    adac:	00000906 	br	add4 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    adb0:	e17fff17 	ldw	r5,-4(fp)
    adb4:	e13ffe17 	ldw	r4,-8(fp)
    adb8:	000ab080 	call	ab08 <get_DDRAM_addr>
    adbc:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
    adc0:	e0bffc03 	ldbu	r2,-16(fp)
    adc4:	100b883a 	mov	r5,r2
    adc8:	e13ffd17 	ldw	r4,-12(fp)
    adcc:	000ab7c0 	call	ab7c <alt_up_character_lcd_send_cmd>
	return 0;
    add0:	0005883a 	mov	r2,zero
}
    add4:	e037883a 	mov	sp,fp
    add8:	dfc00117 	ldw	ra,4(sp)
    addc:	df000017 	ldw	fp,0(sp)
    ade0:	dec00204 	addi	sp,sp,8
    ade4:	f800283a 	ret

0000ade8 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    ade8:	defffb04 	addi	sp,sp,-20
    adec:	dfc00415 	stw	ra,16(sp)
    adf0:	df000315 	stw	fp,12(sp)
    adf4:	df000304 	addi	fp,sp,12
    adf8:	e13ffe15 	stw	r4,-8(fp)
    adfc:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
    ae00:	e0bfff17 	ldw	r2,-4(fp)
    ae04:	10001526 	beq	r2,zero,ae5c <alt_up_character_lcd_shift_cursor+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
    ae08:	e0bfff17 	ldw	r2,-4(fp)
    ae0c:	0080020e 	bge	zero,r2,ae18 <alt_up_character_lcd_shift_cursor+0x30>
    ae10:	00800504 	movi	r2,20
    ae14:	00000106 	br	ae1c <alt_up_character_lcd_shift_cursor+0x34>
    ae18:	00800404 	movi	r2,16
    ae1c:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
    ae20:	e0bfff17 	ldw	r2,-4(fp)
    ae24:	1000010e 	bge	r2,zero,ae2c <alt_up_character_lcd_shift_cursor+0x44>
    ae28:	0085c83a 	sub	r2,zero,r2
    ae2c:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    ae30:	00000406 	br	ae44 <alt_up_character_lcd_shift_cursor+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    ae34:	e0bffd43 	ldbu	r2,-11(fp)
    ae38:	100b883a 	mov	r5,r2
    ae3c:	e13ffe17 	ldw	r4,-8(fp)
    ae40:	000ab7c0 	call	ab7c <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    ae44:	e0bffd03 	ldbu	r2,-12(fp)
    ae48:	10ffffc4 	addi	r3,r2,-1
    ae4c:	e0fffd05 	stb	r3,-12(fp)
    ae50:	10803fcc 	andi	r2,r2,255
    ae54:	103ff71e 	bne	r2,zero,ae34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ae34>
    ae58:	00000106 	br	ae60 <alt_up_character_lcd_shift_cursor+0x78>

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
	if (x_right_shift_offset == 0) 
		// don't ask me to do nothing 
		return;
    ae5c:	0001883a 	nop
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    ae60:	e037883a 	mov	sp,fp
    ae64:	dfc00117 	ldw	ra,4(sp)
    ae68:	df000017 	ldw	fp,0(sp)
    ae6c:	dec00204 	addi	sp,sp,8
    ae70:	f800283a 	ret

0000ae74 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    ae74:	defffb04 	addi	sp,sp,-20
    ae78:	dfc00415 	stw	ra,16(sp)
    ae7c:	df000315 	stw	fp,12(sp)
    ae80:	df000304 	addi	fp,sp,12
    ae84:	e13ffe15 	stw	r4,-8(fp)
    ae88:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
    ae8c:	e0bfff17 	ldw	r2,-4(fp)
    ae90:	10001526 	beq	r2,zero,aee8 <alt_up_character_lcd_shift_display+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
    ae94:	e0bfff17 	ldw	r2,-4(fp)
    ae98:	0080020e 	bge	zero,r2,aea4 <alt_up_character_lcd_shift_display+0x30>
    ae9c:	00800704 	movi	r2,28
    aea0:	00000106 	br	aea8 <alt_up_character_lcd_shift_display+0x34>
    aea4:	00800604 	movi	r2,24
    aea8:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
    aeac:	e0bfff17 	ldw	r2,-4(fp)
    aeb0:	1000010e 	bge	r2,zero,aeb8 <alt_up_character_lcd_shift_display+0x44>
    aeb4:	0085c83a 	sub	r2,zero,r2
    aeb8:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    aebc:	00000406 	br	aed0 <alt_up_character_lcd_shift_display+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    aec0:	e0bffd43 	ldbu	r2,-11(fp)
    aec4:	100b883a 	mov	r5,r2
    aec8:	e13ffe17 	ldw	r4,-8(fp)
    aecc:	000ab7c0 	call	ab7c <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    aed0:	e0bffd03 	ldbu	r2,-12(fp)
    aed4:	10ffffc4 	addi	r3,r2,-1
    aed8:	e0fffd05 	stb	r3,-12(fp)
    aedc:	10803fcc 	andi	r2,r2,255
    aee0:	103ff71e 	bne	r2,zero,aec0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700aec0>
    aee4:	00000106 	br	aeec <alt_up_character_lcd_shift_display+0x78>

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
	if (x_right_shift_offset == 0) 
		// don't ask me to do nothing 
		return;
    aee8:	0001883a 	nop
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    aeec:	e037883a 	mov	sp,fp
    aef0:	dfc00117 	ldw	ra,4(sp)
    aef4:	df000017 	ldw	fp,0(sp)
    aef8:	dec00204 	addi	sp,sp,8
    aefc:	f800283a 	ret

0000af00 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
    af00:	defffa04 	addi	sp,sp,-24
    af04:	dfc00515 	stw	ra,20(sp)
    af08:	df000415 	stw	fp,16(sp)
    af0c:	df000404 	addi	fp,sp,16
    af10:	e13ffd15 	stw	r4,-12(fp)
    af14:	e17ffe15 	stw	r5,-8(fp)
    af18:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
    af1c:	e0bffe17 	ldw	r2,-8(fp)
    af20:	10800a28 	cmpgeui	r2,r2,40
    af24:	1000031e 	bne	r2,zero,af34 <alt_up_character_lcd_erase_pos+0x34>
    af28:	e0bfff17 	ldw	r2,-4(fp)
    af2c:	108000b0 	cmpltui	r2,r2,2
    af30:	1000021e 	bne	r2,zero,af3c <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
    af34:	00bfffc4 	movi	r2,-1
    af38:	00000f06 	br	af78 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    af3c:	e17fff17 	ldw	r5,-4(fp)
    af40:	e13ffe17 	ldw	r4,-8(fp)
    af44:	000ab080 	call	ab08 <get_DDRAM_addr>
    af48:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
    af4c:	e0bffc03 	ldbu	r2,-16(fp)
    af50:	100b883a 	mov	r5,r2
    af54:	e13ffd17 	ldw	r4,-12(fp)
    af58:	000ab7c0 	call	ab7c <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
    af5c:	e0bffd17 	ldw	r2,-12(fp)
    af60:	10800a17 	ldw	r2,40(r2)
    af64:	10800044 	addi	r2,r2,1
    af68:	1007883a 	mov	r3,r2
    af6c:	00800084 	movi	r2,2
    af70:	18800025 	stbio	r2,0(r3)
	return 0;
    af74:	0005883a 	mov	r2,zero
}
    af78:	e037883a 	mov	sp,fp
    af7c:	dfc00117 	ldw	ra,4(sp)
    af80:	df000017 	ldw	fp,0(sp)
    af84:	dec00204 	addi	sp,sp,8
    af88:	f800283a 	ret

0000af8c <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
    af8c:	defffd04 	addi	sp,sp,-12
    af90:	dfc00215 	stw	ra,8(sp)
    af94:	df000115 	stw	fp,4(sp)
    af98:	df000104 	addi	fp,sp,4
    af9c:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
    afa0:	01400304 	movi	r5,12
    afa4:	e13fff17 	ldw	r4,-4(fp)
    afa8:	000ab7c0 	call	ab7c <alt_up_character_lcd_send_cmd>
}
    afac:	0001883a 	nop
    afb0:	e037883a 	mov	sp,fp
    afb4:	dfc00117 	ldw	ra,4(sp)
    afb8:	df000017 	ldw	fp,0(sp)
    afbc:	dec00204 	addi	sp,sp,8
    afc0:	f800283a 	ret

0000afc4 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
    afc4:	defffd04 	addi	sp,sp,-12
    afc8:	dfc00215 	stw	ra,8(sp)
    afcc:	df000115 	stw	fp,4(sp)
    afd0:	df000104 	addi	fp,sp,4
    afd4:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
    afd8:	014003c4 	movi	r5,15
    afdc:	e13fff17 	ldw	r4,-4(fp)
    afe0:	000ab7c0 	call	ab7c <alt_up_character_lcd_send_cmd>
}
    afe4:	0001883a 	nop
    afe8:	e037883a 	mov	sp,fp
    afec:	dfc00117 	ldw	ra,4(sp)
    aff0:	df000017 	ldw	fp,0(sp)
    aff4:	dec00204 	addi	sp,sp,8
    aff8:	f800283a 	ret

0000affc <alt_up_irda_enable_read_interrupt>:
#include "altera_up_avalon_irda.h"
#include "altera_up_avalon_irda_regs.h"


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
    affc:	defffd04 	addi	sp,sp,-12
    b000:	df000215 	stw	fp,8(sp)
    b004:	df000204 	addi	fp,sp,8
    b008:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    b00c:	e0bfff17 	ldw	r2,-4(fp)
    b010:	10800a17 	ldw	r2,40(r2)
    b014:	10800104 	addi	r2,r2,4
    b018:	10800037 	ldwio	r2,0(r2)
    b01c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
    b020:	e0bffe17 	ldw	r2,-8(fp)
    b024:	10800054 	ori	r2,r2,1
    b028:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
    b02c:	e0bfff17 	ldw	r2,-4(fp)
    b030:	10800a17 	ldw	r2,40(r2)
    b034:	10800104 	addi	r2,r2,4
    b038:	1007883a 	mov	r3,r2
    b03c:	e0bffe17 	ldw	r2,-8(fp)
    b040:	18800035 	stwio	r2,0(r3)
}
    b044:	0001883a 	nop
    b048:	e037883a 	mov	sp,fp
    b04c:	df000017 	ldw	fp,0(sp)
    b050:	dec00104 	addi	sp,sp,4
    b054:	f800283a 	ret

0000b058 <alt_up_irda_disable_read_interrupt>:

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
    b058:	defffd04 	addi	sp,sp,-12
    b05c:	df000215 	stw	fp,8(sp)
    b060:	df000204 	addi	fp,sp,8
    b064:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    b068:	e0bfff17 	ldw	r2,-4(fp)
    b06c:	10800a17 	ldw	r2,40(r2)
    b070:	10800104 	addi	r2,r2,4
    b074:	10800037 	ldwio	r2,0(r2)
    b078:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
    b07c:	e0fffe17 	ldw	r3,-8(fp)
    b080:	00bfff84 	movi	r2,-2
    b084:	1884703a 	and	r2,r3,r2
    b088:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
    b08c:	e0bfff17 	ldw	r2,-4(fp)
    b090:	10800a17 	ldw	r2,40(r2)
    b094:	10800104 	addi	r2,r2,4
    b098:	1007883a 	mov	r3,r2
    b09c:	e0bffe17 	ldw	r2,-8(fp)
    b0a0:	18800035 	stwio	r2,0(r3)
}
    b0a4:	0001883a 	nop
    b0a8:	e037883a 	mov	sp,fp
    b0ac:	df000017 	ldw	fp,0(sp)
    b0b0:	dec00104 	addi	sp,sp,4
    b0b4:	f800283a 	ret

0000b0b8 <alt_up_irda_get_used_space_in_read_FIFO>:

unsigned alt_up_irda_get_used_space_in_read_FIFO(alt_up_irda_dev *irda)
{
    b0b8:	defffd04 	addi	sp,sp,-12
    b0bc:	df000215 	stw	fp,8(sp)
    b0c0:	df000204 	addi	fp,sp,8
    b0c4:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
    b0c8:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
    b0cc:	e0bfff17 	ldw	r2,-4(fp)
    b0d0:	10800a17 	ldw	r2,40(r2)
    b0d4:	10800084 	addi	r2,r2,2
    b0d8:	1080002b 	ldhuio	r2,0(r2)
    b0dc:	10bfffcc 	andi	r2,r2,65535
    b0e0:	e0bffe0d 	sth	r2,-8(fp)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
    b0e4:	e0bffe0b 	ldhu	r2,-8(fp)
}
    b0e8:	e037883a 	mov	sp,fp
    b0ec:	df000017 	ldw	fp,0(sp)
    b0f0:	dec00104 	addi	sp,sp,4
    b0f4:	f800283a 	ret

0000b0f8 <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
    b0f8:	defffd04 	addi	sp,sp,-12
    b0fc:	df000215 	stw	fp,8(sp)
    b100:	df000204 	addi	fp,sp,8
    b104:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    b108:	e0bfff17 	ldw	r2,-4(fp)
    b10c:	10800a17 	ldw	r2,40(r2)
    b110:	10800104 	addi	r2,r2,4
    b114:	10800037 	ldwio	r2,0(r2)
    b118:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
    b11c:	e0bffe17 	ldw	r2,-8(fp)
    b120:	1004d43a 	srli	r2,r2,16
}
    b124:	e037883a 	mov	sp,fp
    b128:	df000017 	ldw	fp,0(sp)
    b12c:	dec00104 	addi	sp,sp,4
    b130:	f800283a 	ret

0000b134 <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
    b134:	defffd04 	addi	sp,sp,-12
    b138:	df000215 	stw	fp,8(sp)
    b13c:	df000204 	addi	fp,sp,8
    b140:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
    b144:	e0bfff17 	ldw	r2,-4(fp)
    b148:	1080800c 	andi	r2,r2,512
    b14c:	1004d27a 	srli	r2,r2,9
    b150:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
    b154:	e0bffe17 	ldw	r2,-8(fp)
    b158:	10000226 	beq	r2,zero,b164 <alt_up_irda_check_parity+0x30>
    b15c:	00bfffc4 	movi	r2,-1
    b160:	00000106 	br	b168 <alt_up_irda_check_parity+0x34>
    b164:	0005883a 	mov	r2,zero
}
    b168:	e037883a 	mov	sp,fp
    b16c:	df000017 	ldw	fp,0(sp)
    b170:	dec00104 	addi	sp,sp,4
    b174:	f800283a 	ret

0000b178 <alt_up_irda_write_data>:

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
    b178:	defffd04 	addi	sp,sp,-12
    b17c:	df000215 	stw	fp,8(sp)
    b180:	df000204 	addi	fp,sp,8
    b184:	e13ffe15 	stw	r4,-8(fp)
    b188:	2805883a 	mov	r2,r5
    b18c:	e0bfff05 	stb	r2,-4(fp)
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    */

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
    b190:	e0bffe17 	ldw	r2,-8(fp)
    b194:	10800a17 	ldw	r2,40(r2)
    b198:	1007883a 	mov	r3,r2
    b19c:	e0bfff03 	ldbu	r2,-4(fp)
    b1a0:	18800035 	stwio	r2,0(r3)
	return 0;
    b1a4:	0005883a 	mov	r2,zero
}
    b1a8:	e037883a 	mov	sp,fp
    b1ac:	df000017 	ldw	fp,0(sp)
    b1b0:	dec00104 	addi	sp,sp,4
    b1b4:	f800283a 	ret

0000b1b8 <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
    b1b8:	defffa04 	addi	sp,sp,-24
    b1bc:	dfc00515 	stw	ra,20(sp)
    b1c0:	df000415 	stw	fp,16(sp)
    b1c4:	df000404 	addi	fp,sp,16
    b1c8:	e13ffd15 	stw	r4,-12(fp)
    b1cc:	e17ffe15 	stw	r5,-8(fp)
    b1d0:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    b1d4:	e0bffd17 	ldw	r2,-12(fp)
    b1d8:	10800a17 	ldw	r2,40(r2)
    b1dc:	10800037 	ldwio	r2,0(r2)
    b1e0:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
    b1e4:	e0bffc17 	ldw	r2,-16(fp)
    b1e8:	1007883a 	mov	r3,r2
    b1ec:	e0bffe17 	ldw	r2,-8(fp)
    b1f0:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_irda_check_parity(data_reg);
    b1f4:	e13ffc17 	ldw	r4,-16(fp)
    b1f8:	000b1340 	call	b134 <alt_up_irda_check_parity>
    b1fc:	1007883a 	mov	r3,r2
    b200:	e0bfff17 	ldw	r2,-4(fp)
    b204:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
    b208:	e0bffc17 	ldw	r2,-16(fp)
    b20c:	10a0000c 	andi	r2,r2,32768
    b210:	1004d3fa 	srli	r2,r2,15
    b214:	10bfffc4 	addi	r2,r2,-1
}
    b218:	e037883a 	mov	sp,fp
    b21c:	dfc00117 	ldw	ra,4(sp)
    b220:	df000017 	ldw	fp,0(sp)
    b224:	dec00204 	addi	sp,sp,8
    b228:	f800283a 	ret

0000b22c <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
    b22c:	defff804 	addi	sp,sp,-32
    b230:	dfc00715 	stw	ra,28(sp)
    b234:	df000615 	stw	fp,24(sp)
    b238:	df000604 	addi	fp,sp,24
    b23c:	e13ffd15 	stw	r4,-12(fp)
    b240:	e17ffe15 	stw	r5,-8(fp)
    b244:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
    b248:	e0bffd17 	ldw	r2,-12(fp)
    b24c:	10800017 	ldw	r2,0(r2)
    b250:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
    b254:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
    b258:	00000c06 	br	b28c <alt_up_irda_read_fd+0x60>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
    b25c:	e0bffe17 	ldw	r2,-8(fp)
    b260:	10c00044 	addi	r3,r2,1
    b264:	e0fffe15 	stw	r3,-8(fp)
    b268:	e0fffc04 	addi	r3,fp,-16
    b26c:	180d883a 	mov	r6,r3
    b270:	100b883a 	mov	r5,r2
    b274:	e13ffb17 	ldw	r4,-20(fp)
    b278:	000b1b80 	call	b1b8 <alt_up_irda_read_data>
    b27c:	1000081e 	bne	r2,zero,b2a0 <alt_up_irda_read_fd+0x74>
			count++;
    b280:	e0bffa17 	ldw	r2,-24(fp)
    b284:	10800044 	addi	r2,r2,1
    b288:	e0bffa15 	stw	r2,-24(fp)
int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    b28c:	e0bfff17 	ldw	r2,-4(fp)
    b290:	10ffffc4 	addi	r3,r2,-1
    b294:	e0ffff15 	stw	r3,-4(fp)
    b298:	103ff01e 	bne	r2,zero,b25c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b25c>
    b29c:	00000106 	br	b2a4 <alt_up_irda_read_fd+0x78>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
    b2a0:	0001883a 	nop
	}
	return count;
    b2a4:	e0bffa17 	ldw	r2,-24(fp)
}
    b2a8:	e037883a 	mov	sp,fp
    b2ac:	dfc00117 	ldw	ra,4(sp)
    b2b0:	df000017 	ldw	fp,0(sp)
    b2b4:	dec00204 	addi	sp,sp,8
    b2b8:	f800283a 	ret

0000b2bc <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
    b2bc:	defff904 	addi	sp,sp,-28
    b2c0:	dfc00615 	stw	ra,24(sp)
    b2c4:	df000515 	stw	fp,20(sp)
    b2c8:	df000504 	addi	fp,sp,20
    b2cc:	e13ffd15 	stw	r4,-12(fp)
    b2d0:	e17ffe15 	stw	r5,-8(fp)
    b2d4:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
    b2d8:	e0bffd17 	ldw	r2,-12(fp)
    b2dc:	10800017 	ldw	r2,0(r2)
    b2e0:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
    b2e4:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
    b2e8:	00000c06 	br	b31c <alt_up_irda_write_fd+0x60>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
    b2ec:	e0bffe17 	ldw	r2,-8(fp)
    b2f0:	10c00044 	addi	r3,r2,1
    b2f4:	e0fffe15 	stw	r3,-8(fp)
    b2f8:	10800003 	ldbu	r2,0(r2)
    b2fc:	10803fcc 	andi	r2,r2,255
    b300:	100b883a 	mov	r5,r2
    b304:	e13ffc17 	ldw	r4,-16(fp)
    b308:	000b1780 	call	b178 <alt_up_irda_write_data>
    b30c:	1000081e 	bne	r2,zero,b330 <alt_up_irda_write_fd+0x74>
			count++;
    b310:	e0bffb17 	ldw	r2,-20(fp)
    b314:	10800044 	addi	r2,r2,1
    b318:	e0bffb15 	stw	r2,-20(fp)

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	while(len--)
    b31c:	e0bfff17 	ldw	r2,-4(fp)
    b320:	10ffffc4 	addi	r3,r2,-1
    b324:	e0ffff15 	stw	r3,-4(fp)
    b328:	103ff01e 	bne	r2,zero,b2ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b2ec>
    b32c:	00000106 	br	b334 <alt_up_irda_write_fd+0x78>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
			count++;
		else
			break;
    b330:	0001883a 	nop
	}
	return count;
    b334:	e0bffb17 	ldw	r2,-20(fp)
}
    b338:	e037883a 	mov	sp,fp
    b33c:	dfc00117 	ldw	ra,4(sp)
    b340:	df000017 	ldw	fp,0(sp)
    b344:	dec00204 	addi	sp,sp,8
    b348:	f800283a 	ret

0000b34c <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
    b34c:	defffc04 	addi	sp,sp,-16
    b350:	dfc00315 	stw	ra,12(sp)
    b354:	df000215 	stw	fp,8(sp)
    b358:	df000204 	addi	fp,sp,8
    b35c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
    b360:	d1602604 	addi	r5,gp,-32616
    b364:	e13fff17 	ldw	r4,-4(fp)
    b368:	000c1ec0 	call	c1ec <alt_find_dev>
    b36c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    b370:	e0bffe17 	ldw	r2,-8(fp)
}
    b374:	e037883a 	mov	sp,fp
    b378:	dfc00117 	ldw	ra,4(sp)
    b37c:	df000017 	ldw	fp,0(sp)
    b380:	dec00204 	addi	sp,sp,8
    b384:	f800283a 	ret

0000b388 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
    b388:	defffd04 	addi	sp,sp,-12
    b38c:	df000215 	stw	fp,8(sp)
    b390:	df000204 	addi	fp,sp,8
    b394:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
    b398:	e0bfff17 	ldw	r2,-4(fp)
    b39c:	1080400c 	andi	r2,r2,256
    b3a0:	1004d23a 	srli	r2,r2,8
    b3a4:	e0bffe05 	stb	r2,-8(fp)
	return ri;
    b3a8:	e0bffe03 	ldbu	r2,-8(fp)
}
    b3ac:	e037883a 	mov	sp,fp
    b3b0:	df000017 	ldw	fp,0(sp)
    b3b4:	dec00104 	addi	sp,sp,4
    b3b8:	f800283a 	ret

0000b3bc <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
    b3bc:	defffd04 	addi	sp,sp,-12
    b3c0:	df000215 	stw	fp,8(sp)
    b3c4:	df000204 	addi	fp,sp,8
    b3c8:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
    b3cc:	e0bfff17 	ldw	r2,-4(fp)
    b3d0:	1080004c 	andi	r2,r2,1
    b3d4:	e0bffe05 	stb	r2,-8(fp)
	return re;
    b3d8:	e0bffe03 	ldbu	r2,-8(fp)
}
    b3dc:	e037883a 	mov	sp,fp
    b3e0:	df000017 	ldw	fp,0(sp)
    b3e4:	dec00104 	addi	sp,sp,4
    b3e8:	f800283a 	ret

0000b3ec <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
    b3ec:	defffd04 	addi	sp,sp,-12
    b3f0:	df000215 	stw	fp,8(sp)
    b3f4:	df000204 	addi	fp,sp,8
    b3f8:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
    b3fc:	e0bfff17 	ldw	r2,-4(fp)
    b400:	1081000c 	andi	r2,r2,1024
    b404:	1004d2ba 	srli	r2,r2,10
    b408:	e0bffe05 	stb	r2,-8(fp)
	return re;
    b40c:	e0bffe03 	ldbu	r2,-8(fp)
}
    b410:	e037883a 	mov	sp,fp
    b414:	df000017 	ldw	fp,0(sp)
    b418:	dec00104 	addi	sp,sp,4
    b41c:	f800283a 	ret

0000b420 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
    b420:	defffd04 	addi	sp,sp,-12
    b424:	df000215 	stw	fp,8(sp)
    b428:	df000204 	addi	fp,sp,8
    b42c:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
    b430:	e0bfff17 	ldw	r2,-4(fp)
    b434:	1004d43a 	srli	r2,r2,16
    b438:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
    b43c:	e0bffe0b 	ldhu	r2,-8(fp)
}
    b440:	e037883a 	mov	sp,fp
    b444:	df000017 	ldw	fp,0(sp)
    b448:	dec00104 	addi	sp,sp,4
    b44c:	f800283a 	ret

0000b450 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
    b450:	defffd04 	addi	sp,sp,-12
    b454:	df000215 	stw	fp,8(sp)
    b458:	df000204 	addi	fp,sp,8
    b45c:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
    b460:	e0bfff17 	ldw	r2,-4(fp)
    b464:	10a0000c 	andi	r2,r2,32768
    b468:	1004d3fa 	srli	r2,r2,15
    b46c:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
    b470:	e0bffe03 	ldbu	r2,-8(fp)
}
    b474:	e037883a 	mov	sp,fp
    b478:	df000017 	ldw	fp,0(sp)
    b47c:	dec00104 	addi	sp,sp,4
    b480:	f800283a 	ret

0000b484 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
    b484:	defffd04 	addi	sp,sp,-12
    b488:	df000215 	stw	fp,8(sp)
    b48c:	df000204 	addi	fp,sp,8
    b490:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
    b494:	e0bfff17 	ldw	r2,-4(fp)
    b498:	e0bffe05 	stb	r2,-8(fp)
	return data;
    b49c:	e0bffe03 	ldbu	r2,-8(fp)
}
    b4a0:	e037883a 	mov	sp,fp
    b4a4:	df000017 	ldw	fp,0(sp)
    b4a8:	dec00104 	addi	sp,sp,4
    b4ac:	f800283a 	ret

0000b4b0 <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
    b4b0:	defffb04 	addi	sp,sp,-20
    b4b4:	dfc00415 	stw	ra,16(sp)
    b4b8:	df000315 	stw	fp,12(sp)
    b4bc:	df000304 	addi	fp,sp,12
    b4c0:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
    b4c4:	01403fc4 	movi	r5,255
    b4c8:	e13fff17 	ldw	r4,-4(fp)
    b4cc:	000b7100 	call	b710 <alt_up_ps2_write_data_byte_with_ack>
    b4d0:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
    b4d4:	e0bffd17 	ldw	r2,-12(fp)
    b4d8:	1000211e 	bne	r2,zero,b560 <alt_up_ps2_init+0xb0>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    b4dc:	e0bffe04 	addi	r2,fp,-8
    b4e0:	100b883a 	mov	r5,r2
    b4e4:	e13fff17 	ldw	r4,-4(fp)
    b4e8:	000b7740 	call	b774 <alt_up_ps2_read_data_byte_timeout>
    b4ec:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
    b4f0:	e0bffd17 	ldw	r2,-12(fp)
    b4f4:	10001a1e 	bne	r2,zero,b560 <alt_up_ps2_init+0xb0>
    b4f8:	e0bffe03 	ldbu	r2,-8(fp)
    b4fc:	10803fcc 	andi	r2,r2,255
    b500:	10802a98 	cmpnei	r2,r2,170
    b504:	1000161e 	bne	r2,zero,b560 <alt_up_ps2_init+0xb0>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    b508:	e0bffe04 	addi	r2,fp,-8
    b50c:	100b883a 	mov	r5,r2
    b510:	e13fff17 	ldw	r4,-4(fp)
    b514:	000b7740 	call	b774 <alt_up_ps2_read_data_byte_timeout>
    b518:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
    b51c:	e0bffd17 	ldw	r2,-12(fp)
    b520:	10bfe318 	cmpnei	r2,r2,-116
    b524:	1000041e 	bne	r2,zero,b538 <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
    b528:	e0bfff17 	ldw	r2,-4(fp)
    b52c:	00c00044 	movi	r3,1
    b530:	10c00d15 	stw	r3,52(r2)
				ps2->device_type = PS2_MOUSE;
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
			}
		}
	}
}
    b534:	00000a06 	br	b560 <alt_up_ps2_init+0xb0>
			if (status == -ETIMEDOUT)
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
			}
			else if (status == 0 && byte == 0x00)
    b538:	e0bffd17 	ldw	r2,-12(fp)
    b53c:	1000081e 	bne	r2,zero,b560 <alt_up_ps2_init+0xb0>
    b540:	e0bffe03 	ldbu	r2,-8(fp)
    b544:	10803fcc 	andi	r2,r2,255
    b548:	1000051e 	bne	r2,zero,b560 <alt_up_ps2_init+0xb0>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
    b54c:	e0bfff17 	ldw	r2,-4(fp)
    b550:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
    b554:	01403d04 	movi	r5,244
    b558:	e13fff17 	ldw	r4,-4(fp)
    b55c:	000b6340 	call	b634 <alt_up_ps2_write_data_byte>
			}
		}
	}
}
    b560:	0001883a 	nop
    b564:	e037883a 	mov	sp,fp
    b568:	dfc00117 	ldw	ra,4(sp)
    b56c:	df000017 	ldw	fp,0(sp)
    b570:	dec00204 	addi	sp,sp,8
    b574:	f800283a 	ret

0000b578 <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
    b578:	defffd04 	addi	sp,sp,-12
    b57c:	df000215 	stw	fp,8(sp)
    b580:	df000204 	addi	fp,sp,8
    b584:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    b588:	e0bfff17 	ldw	r2,-4(fp)
    b58c:	10800a17 	ldw	r2,40(r2)
    b590:	10800104 	addi	r2,r2,4
    b594:	10800037 	ldwio	r2,0(r2)
    b598:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
    b59c:	e0bffe17 	ldw	r2,-8(fp)
    b5a0:	10800054 	ori	r2,r2,1
    b5a4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    b5a8:	e0bfff17 	ldw	r2,-4(fp)
    b5ac:	10800a17 	ldw	r2,40(r2)
    b5b0:	10800104 	addi	r2,r2,4
    b5b4:	1007883a 	mov	r3,r2
    b5b8:	e0bffe17 	ldw	r2,-8(fp)
    b5bc:	18800035 	stwio	r2,0(r3)
}
    b5c0:	0001883a 	nop
    b5c4:	e037883a 	mov	sp,fp
    b5c8:	df000017 	ldw	fp,0(sp)
    b5cc:	dec00104 	addi	sp,sp,4
    b5d0:	f800283a 	ret

0000b5d4 <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
    b5d4:	defffd04 	addi	sp,sp,-12
    b5d8:	df000215 	stw	fp,8(sp)
    b5dc:	df000204 	addi	fp,sp,8
    b5e0:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    b5e4:	e0bfff17 	ldw	r2,-4(fp)
    b5e8:	10800a17 	ldw	r2,40(r2)
    b5ec:	10800104 	addi	r2,r2,4
    b5f0:	10800037 	ldwio	r2,0(r2)
    b5f4:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
    b5f8:	e0fffe17 	ldw	r3,-8(fp)
    b5fc:	00bfff84 	movi	r2,-2
    b600:	1884703a 	and	r2,r3,r2
    b604:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    b608:	e0bfff17 	ldw	r2,-4(fp)
    b60c:	10800a17 	ldw	r2,40(r2)
    b610:	10800104 	addi	r2,r2,4
    b614:	1007883a 	mov	r3,r2
    b618:	e0bffe17 	ldw	r2,-8(fp)
    b61c:	18800035 	stwio	r2,0(r3)
}
    b620:	0001883a 	nop
    b624:	e037883a 	mov	sp,fp
    b628:	df000017 	ldw	fp,0(sp)
    b62c:	dec00104 	addi	sp,sp,4
    b630:	f800283a 	ret

0000b634 <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
    b634:	defffb04 	addi	sp,sp,-20
    b638:	dfc00415 	stw	ra,16(sp)
    b63c:	df000315 	stw	fp,12(sp)
    b640:	df000304 	addi	fp,sp,12
    b644:	e13ffe15 	stw	r4,-8(fp)
    b648:	2805883a 	mov	r2,r5
    b64c:	e0bfff05 	stb	r2,-4(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
    b650:	e0bffe17 	ldw	r2,-8(fp)
    b654:	10800a17 	ldw	r2,40(r2)
    b658:	1007883a 	mov	r3,r2
    b65c:	e0bfff03 	ldbu	r2,-4(fp)
    b660:	18800025 	stbio	r2,0(r3)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
    b664:	e0bffe17 	ldw	r2,-8(fp)
    b668:	10800a17 	ldw	r2,40(r2)
    b66c:	10800104 	addi	r2,r2,4
    b670:	10800037 	ldwio	r2,0(r2)
    b674:	e0bffd15 	stw	r2,-12(fp)
	if (read_CE_bit(ctrl_reg))
    b678:	e13ffd17 	ldw	r4,-12(fp)
    b67c:	000b3ec0 	call	b3ec <read_CE_bit>
    b680:	10803fcc 	andi	r2,r2,255
    b684:	10000226 	beq	r2,zero,b690 <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
    b688:	00bffec4 	movi	r2,-5
    b68c:	00000106 	br	b694 <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
    b690:	0005883a 	mov	r2,zero
}
    b694:	e037883a 	mov	sp,fp
    b698:	dfc00117 	ldw	ra,4(sp)
    b69c:	df000017 	ldw	fp,0(sp)
    b6a0:	dec00204 	addi	sp,sp,8
    b6a4:	f800283a 	ret

0000b6a8 <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
    b6a8:	defffc04 	addi	sp,sp,-16
    b6ac:	dfc00315 	stw	ra,12(sp)
    b6b0:	df000215 	stw	fp,8(sp)
    b6b4:	df000204 	addi	fp,sp,8
    b6b8:	e13fff15 	stw	r4,-4(fp)
	unsigned char data = 0;
    b6bc:	e03ffe45 	stb	zero,-7(fp)
	unsigned char status = 0;
    b6c0:	e03ffe05 	stb	zero,-8(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
    b6c4:	e0bffe44 	addi	r2,fp,-7
    b6c8:	100b883a 	mov	r5,r2
    b6cc:	e13fff17 	ldw	r4,-4(fp)
    b6d0:	000b7740 	call	b774 <alt_up_ps2_read_data_byte_timeout>
    b6d4:	e0bffe05 	stb	r2,-8(fp)
		if ( status == 0)
    b6d8:	e0bffe03 	ldbu	r2,-8(fp)
    b6dc:	1000061e 	bne	r2,zero,b6f8 <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
    b6e0:	e0bffe43 	ldbu	r2,-7(fp)
    b6e4:	10803fcc 	andi	r2,r2,255
    b6e8:	10803e98 	cmpnei	r2,r2,250
    b6ec:	103ff51e 	bne	r2,zero,b6c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b6c4>
				return 0;
    b6f0:	0005883a 	mov	r2,zero
    b6f4:	00000106 	br	b6fc <alt_up_ps2_wait_for_ack+0x54>
		}
		else 
		{
			return status;
    b6f8:	e0bffe03 	ldbu	r2,-8(fp)
		}
	} while(1);
	return -ETIMEDOUT;
}
    b6fc:	e037883a 	mov	sp,fp
    b700:	dfc00117 	ldw	ra,4(sp)
    b704:	df000017 	ldw	fp,0(sp)
    b708:	dec00204 	addi	sp,sp,8
    b70c:	f800283a 	ret

0000b710 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
    b710:	defffa04 	addi	sp,sp,-24
    b714:	dfc00515 	stw	ra,20(sp)
    b718:	df000415 	stw	fp,16(sp)
    b71c:	df000404 	addi	fp,sp,16
    b720:	e13ffe15 	stw	r4,-8(fp)
    b724:	2805883a 	mov	r2,r5
    b728:	e0bfff05 	stb	r2,-4(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
    b72c:	e0bfff03 	ldbu	r2,-4(fp)
    b730:	100b883a 	mov	r5,r2
    b734:	e13ffe17 	ldw	r4,-8(fp)
    b738:	000b6340 	call	b634 <alt_up_ps2_write_data_byte>
    b73c:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
    b740:	e0bffc17 	ldw	r2,-16(fp)
    b744:	10000226 	beq	r2,zero,b750 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
    b748:	e0bffc17 	ldw	r2,-16(fp)
    b74c:	00000406 	br	b760 <alt_up_ps2_write_data_byte_with_ack+0x50>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
    b750:	e13ffe17 	ldw	r4,-8(fp)
    b754:	000b6a80 	call	b6a8 <alt_up_ps2_wait_for_ack>
    b758:	e0bffd15 	stw	r2,-12(fp)
	return ack_status;
    b75c:	e0bffd17 	ldw	r2,-12(fp)
}
    b760:	e037883a 	mov	sp,fp
    b764:	dfc00117 	ldw	ra,4(sp)
    b768:	df000017 	ldw	fp,0(sp)
    b76c:	dec00204 	addi	sp,sp,8
    b770:	f800283a 	ret

0000b774 <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    b774:	defffa04 	addi	sp,sp,-24
    b778:	dfc00515 	stw	ra,20(sp)
    b77c:	df000415 	stw	fp,16(sp)
    b780:	df000404 	addi	fp,sp,16
    b784:	e13ffe15 	stw	r4,-8(fp)
    b788:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
    b78c:	e03ffd15 	stw	zero,-12(fp)
	unsigned int count = 0;
    b790:	e03ffc15 	stw	zero,-16(fp)
	do {
		count++;
    b794:	e0bffc17 	ldw	r2,-16(fp)
    b798:	10800044 	addi	r2,r2,1
    b79c:	e0bffc15 	stw	r2,-16(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    b7a0:	e0bffe17 	ldw	r2,-8(fp)
    b7a4:	10800a17 	ldw	r2,40(r2)
    b7a8:	10800037 	ldwio	r2,0(r2)
    b7ac:	e0bffd15 	stw	r2,-12(fp)
		if (read_data_valid(data_reg))
    b7b0:	e13ffd17 	ldw	r4,-12(fp)
    b7b4:	000b4500 	call	b450 <read_data_valid>
    b7b8:	10803fcc 	andi	r2,r2,255
    b7bc:	10000726 	beq	r2,zero,b7dc <alt_up_ps2_read_data_byte_timeout+0x68>
		{
			*byte = read_data_byte(data_reg);
    b7c0:	e13ffd17 	ldw	r4,-12(fp)
    b7c4:	000b4840 	call	b484 <read_data_byte>
    b7c8:	1007883a 	mov	r3,r2
    b7cc:	e0bfff17 	ldw	r2,-4(fp)
    b7d0:	10c00005 	stb	r3,0(r2)
			return 0;
    b7d4:	0005883a 	mov	r2,zero
    b7d8:	00000806 	br	b7fc <alt_up_ps2_read_data_byte_timeout+0x88>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
    b7dc:	e0bffe17 	ldw	r2,-8(fp)
    b7e0:	10800c17 	ldw	r2,48(r2)
    b7e4:	103feb26 	beq	r2,zero,b794 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b794>
    b7e8:	e0bffe17 	ldw	r2,-8(fp)
    b7ec:	10c00c17 	ldw	r3,48(r2)
    b7f0:	e0bffc17 	ldw	r2,-16(fp)
    b7f4:	18bfe72e 	bgeu	r3,r2,b794 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b794>
		{
			return -ETIMEDOUT;
    b7f8:	00bfe304 	movi	r2,-116
		}
	} while (1);
}
    b7fc:	e037883a 	mov	sp,fp
    b800:	dfc00117 	ldw	ra,4(sp)
    b804:	df000017 	ldw	fp,0(sp)
    b808:	dec00204 	addi	sp,sp,8
    b80c:	f800283a 	ret

0000b810 <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    b810:	defffb04 	addi	sp,sp,-20
    b814:	dfc00415 	stw	ra,16(sp)
    b818:	df000315 	stw	fp,12(sp)
    b81c:	df000304 	addi	fp,sp,12
    b820:	e13ffe15 	stw	r4,-8(fp)
    b824:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
    b828:	e03ffd15 	stw	zero,-12(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    b82c:	e0bffe17 	ldw	r2,-8(fp)
    b830:	10800a17 	ldw	r2,40(r2)
    b834:	10800037 	ldwio	r2,0(r2)
    b838:	e0bffd15 	stw	r2,-12(fp)
	if (read_data_valid(data_reg))
    b83c:	e13ffd17 	ldw	r4,-12(fp)
    b840:	000b4500 	call	b450 <read_data_valid>
    b844:	10803fcc 	andi	r2,r2,255
    b848:	10000726 	beq	r2,zero,b868 <alt_up_ps2_read_data_byte+0x58>
	{
		*byte = read_data_byte(data_reg);
    b84c:	e13ffd17 	ldw	r4,-12(fp)
    b850:	000b4840 	call	b484 <read_data_byte>
    b854:	1007883a 	mov	r3,r2
    b858:	e0bfff17 	ldw	r2,-4(fp)
    b85c:	10c00005 	stb	r3,0(r2)
		return 0;
    b860:	0005883a 	mov	r2,zero
    b864:	00000106 	br	b86c <alt_up_ps2_read_data_byte+0x5c>
	}
	return -1;
    b868:	00bfffc4 	movi	r2,-1
}
    b86c:	e037883a 	mov	sp,fp
    b870:	dfc00117 	ldw	ra,4(sp)
    b874:	df000017 	ldw	fp,0(sp)
    b878:	dec00204 	addi	sp,sp,8
    b87c:	f800283a 	ret

0000b880 <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
    b880:	defffb04 	addi	sp,sp,-20
    b884:	dfc00415 	stw	ra,16(sp)
    b888:	df000315 	stw	fp,12(sp)
    b88c:	df000304 	addi	fp,sp,12
    b890:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
    b894:	e03ffd0d 	sth	zero,-12(fp)
	unsigned int data_reg = 0;
    b898:	e03ffe15 	stw	zero,-8(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    b89c:	e0bfff17 	ldw	r2,-4(fp)
    b8a0:	10800a17 	ldw	r2,40(r2)
    b8a4:	10800037 	ldwio	r2,0(r2)
    b8a8:	e0bffe15 	stw	r2,-8(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
    b8ac:	e13ffe17 	ldw	r4,-8(fp)
    b8b0:	000b4200 	call	b420 <read_num_bytes_available>
    b8b4:	e0bffd0d 	sth	r2,-12(fp)
	} while (num > 0);
    b8b8:	e0bffd0b 	ldhu	r2,-12(fp)
    b8bc:	103ff71e 	bne	r2,zero,b89c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b89c>
}
    b8c0:	0001883a 	nop
    b8c4:	e037883a 	mov	sp,fp
    b8c8:	dfc00117 	ldw	ra,4(sp)
    b8cc:	df000017 	ldw	fp,0(sp)
    b8d0:	dec00204 	addi	sp,sp,8
    b8d4:	f800283a 	ret

0000b8d8 <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
    b8d8:	defff804 	addi	sp,sp,-32
    b8dc:	dfc00715 	stw	ra,28(sp)
    b8e0:	df000615 	stw	fp,24(sp)
    b8e4:	df000604 	addi	fp,sp,24
    b8e8:	e13ffd15 	stw	r4,-12(fp)
    b8ec:	e17ffe15 	stw	r5,-8(fp)
    b8f0:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    b8f4:	e0bffd17 	ldw	r2,-12(fp)
    b8f8:	10800017 	ldw	r2,0(r2)
    b8fc:	e0bffa15 	stw	r2,-24(fp)
	int status = 0;
    b900:	e03ffb15 	stw	zero,-20(fp)
	int count = 0;
    b904:	e03ffc15 	stw	zero,-16(fp)
	while (count < len);
    b908:	e0fffc17 	ldw	r3,-16(fp)
    b90c:	e0bfff17 	ldw	r2,-4(fp)
    b910:	18bffd16 	blt	r3,r2,b908 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b908>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, (unsigned char *)ptr++);
    b914:	e0bffe17 	ldw	r2,-8(fp)
    b918:	10c00044 	addi	r3,r2,1
    b91c:	e0fffe15 	stw	r3,-8(fp)
    b920:	100b883a 	mov	r5,r2
    b924:	e13ffa17 	ldw	r4,-24(fp)
    b928:	000b7740 	call	b774 <alt_up_ps2_read_data_byte_timeout>
    b92c:	e0bffb15 	stw	r2,-20(fp)
		if (status!=0)
    b930:	e0bffb17 	ldw	r2,-20(fp)
    b934:	10000226 	beq	r2,zero,b940 <alt_up_ps2_read_fd+0x68>
			return count;
    b938:	e0bffc17 	ldw	r2,-16(fp)
    b93c:	00000406 	br	b950 <alt_up_ps2_read_fd+0x78>
		count++;
    b940:	e0bffc17 	ldw	r2,-16(fp)
    b944:	10800044 	addi	r2,r2,1
    b948:	e0bffc15 	stw	r2,-16(fp)
	} 
	return count;
    b94c:	e0bffc17 	ldw	r2,-16(fp)
}
    b950:	e037883a 	mov	sp,fp
    b954:	dfc00117 	ldw	ra,4(sp)
    b958:	df000017 	ldw	fp,0(sp)
    b95c:	dec00204 	addi	sp,sp,8
    b960:	f800283a 	ret

0000b964 <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
    b964:	defff804 	addi	sp,sp,-32
    b968:	dfc00715 	stw	ra,28(sp)
    b96c:	df000615 	stw	fp,24(sp)
    b970:	df000604 	addi	fp,sp,24
    b974:	e13ffd15 	stw	r4,-12(fp)
    b978:	e17ffe15 	stw	r5,-8(fp)
    b97c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    b980:	e0bffd17 	ldw	r2,-12(fp)
    b984:	10800017 	ldw	r2,0(r2)
    b988:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
    b98c:	e03ffc15 	stw	zero,-16(fp)
	int count = 0;
    b990:	e03ffa15 	stw	zero,-24(fp)
	while (count < len)
    b994:	00001006 	br	b9d8 <alt_up_ps2_write_fd+0x74>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
    b998:	e0bffe17 	ldw	r2,-8(fp)
    b99c:	10c00044 	addi	r3,r2,1
    b9a0:	e0fffe15 	stw	r3,-8(fp)
    b9a4:	10800003 	ldbu	r2,0(r2)
    b9a8:	10803fcc 	andi	r2,r2,255
    b9ac:	100b883a 	mov	r5,r2
    b9b0:	e13ffb17 	ldw	r4,-20(fp)
    b9b4:	000b6340 	call	b634 <alt_up_ps2_write_data_byte>
    b9b8:	e0bffc15 	stw	r2,-16(fp)
		if (status!=0)
    b9bc:	e0bffc17 	ldw	r2,-16(fp)
    b9c0:	10000226 	beq	r2,zero,b9cc <alt_up_ps2_write_fd+0x68>
			return count;
    b9c4:	e0bffa17 	ldw	r2,-24(fp)
    b9c8:	00000706 	br	b9e8 <alt_up_ps2_write_fd+0x84>
		count++;
    b9cc:	e0bffa17 	ldw	r2,-24(fp)
    b9d0:	10800044 	addi	r2,r2,1
    b9d4:	e0bffa15 	stw	r2,-24(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
    b9d8:	e0fffa17 	ldw	r3,-24(fp)
    b9dc:	e0bfff17 	ldw	r2,-4(fp)
    b9e0:	18bfed16 	blt	r3,r2,b998 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b998>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
    b9e4:	e0bffa17 	ldw	r2,-24(fp)
}
    b9e8:	e037883a 	mov	sp,fp
    b9ec:	dfc00117 	ldw	ra,4(sp)
    b9f0:	df000017 	ldw	fp,0(sp)
    b9f4:	dec00204 	addi	sp,sp,8
    b9f8:	f800283a 	ret

0000b9fc <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
    b9fc:	defffc04 	addi	sp,sp,-16
    ba00:	dfc00315 	stw	ra,12(sp)
    ba04:	df000215 	stw	fp,8(sp)
    ba08:	df000204 	addi	fp,sp,8
    ba0c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
    ba10:	d1602604 	addi	r5,gp,-32616
    ba14:	e13fff17 	ldw	r4,-4(fp)
    ba18:	000c1ec0 	call	c1ec <alt_find_dev>
    ba1c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    ba20:	e0bffe17 	ldw	r2,-8(fp)
}
    ba24:	e037883a 	mov	sp,fp
    ba28:	dfc00117 	ldw	ra,4(sp)
    ba2c:	df000017 	ldw	fp,0(sp)
    ba30:	dec00204 	addi	sp,sp,8
    ba34:	f800283a 	ret

0000ba38 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
    ba38:	defffd04 	addi	sp,sp,-12
    ba3c:	df000215 	stw	fp,8(sp)
    ba40:	df000204 	addi	fp,sp,8
    ba44:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    ba48:	e0bfff17 	ldw	r2,-4(fp)
    ba4c:	10800a17 	ldw	r2,40(r2)
    ba50:	10800104 	addi	r2,r2,4
    ba54:	10800037 	ldwio	r2,0(r2)
    ba58:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
    ba5c:	e0bffe17 	ldw	r2,-8(fp)
    ba60:	10800054 	ori	r2,r2,1
    ba64:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    ba68:	e0bfff17 	ldw	r2,-4(fp)
    ba6c:	10800a17 	ldw	r2,40(r2)
    ba70:	10800104 	addi	r2,r2,4
    ba74:	1007883a 	mov	r3,r2
    ba78:	e0bffe17 	ldw	r2,-8(fp)
    ba7c:	18800035 	stwio	r2,0(r3)
}
    ba80:	0001883a 	nop
    ba84:	e037883a 	mov	sp,fp
    ba88:	df000017 	ldw	fp,0(sp)
    ba8c:	dec00104 	addi	sp,sp,4
    ba90:	f800283a 	ret

0000ba94 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
    ba94:	defffd04 	addi	sp,sp,-12
    ba98:	df000215 	stw	fp,8(sp)
    ba9c:	df000204 	addi	fp,sp,8
    baa0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    baa4:	e0bfff17 	ldw	r2,-4(fp)
    baa8:	10800a17 	ldw	r2,40(r2)
    baac:	10800104 	addi	r2,r2,4
    bab0:	10800037 	ldwio	r2,0(r2)
    bab4:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
    bab8:	e0fffe17 	ldw	r3,-8(fp)
    babc:	00bfff84 	movi	r2,-2
    bac0:	1884703a 	and	r2,r3,r2
    bac4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    bac8:	e0bfff17 	ldw	r2,-4(fp)
    bacc:	10800a17 	ldw	r2,40(r2)
    bad0:	10800104 	addi	r2,r2,4
    bad4:	1007883a 	mov	r3,r2
    bad8:	e0bffe17 	ldw	r2,-8(fp)
    badc:	18800035 	stwio	r2,0(r3)
}
    bae0:	0001883a 	nop
    bae4:	e037883a 	mov	sp,fp
    bae8:	df000017 	ldw	fp,0(sp)
    baec:	dec00104 	addi	sp,sp,4
    baf0:	f800283a 	ret

0000baf4 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
    baf4:	defffd04 	addi	sp,sp,-12
    baf8:	df000215 	stw	fp,8(sp)
    bafc:	df000204 	addi	fp,sp,8
    bb00:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
    bb04:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
    bb08:	e0bfff17 	ldw	r2,-4(fp)
    bb0c:	10800a17 	ldw	r2,40(r2)
    bb10:	10800084 	addi	r2,r2,2
    bb14:	1080002b 	ldhuio	r2,0(r2)
    bb18:	10bfffcc 	andi	r2,r2,65535
    bb1c:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
    bb20:	e0bffe0b 	ldhu	r2,-8(fp)
}
    bb24:	e037883a 	mov	sp,fp
    bb28:	df000017 	ldw	fp,0(sp)
    bb2c:	dec00104 	addi	sp,sp,4
    bb30:	f800283a 	ret

0000bb34 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
    bb34:	defffd04 	addi	sp,sp,-12
    bb38:	df000215 	stw	fp,8(sp)
    bb3c:	df000204 	addi	fp,sp,8
    bb40:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    bb44:	e0bfff17 	ldw	r2,-4(fp)
    bb48:	10800a17 	ldw	r2,40(r2)
    bb4c:	10800104 	addi	r2,r2,4
    bb50:	10800037 	ldwio	r2,0(r2)
    bb54:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
    bb58:	e0bffe17 	ldw	r2,-8(fp)
    bb5c:	1004d43a 	srli	r2,r2,16
}
    bb60:	e037883a 	mov	sp,fp
    bb64:	df000017 	ldw	fp,0(sp)
    bb68:	dec00104 	addi	sp,sp,4
    bb6c:	f800283a 	ret

0000bb70 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
    bb70:	defffd04 	addi	sp,sp,-12
    bb74:	df000215 	stw	fp,8(sp)
    bb78:	df000204 	addi	fp,sp,8
    bb7c:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
    bb80:	e0bfff17 	ldw	r2,-4(fp)
    bb84:	1080800c 	andi	r2,r2,512
    bb88:	1004d27a 	srli	r2,r2,9
    bb8c:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
    bb90:	e0bffe17 	ldw	r2,-8(fp)
    bb94:	10000226 	beq	r2,zero,bba0 <alt_up_rs232_check_parity+0x30>
    bb98:	00bfffc4 	movi	r2,-1
    bb9c:	00000106 	br	bba4 <alt_up_rs232_check_parity+0x34>
    bba0:	0005883a 	mov	r2,zero
}
    bba4:	e037883a 	mov	sp,fp
    bba8:	df000017 	ldw	fp,0(sp)
    bbac:	dec00104 	addi	sp,sp,4
    bbb0:	f800283a 	ret

0000bbb4 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
    bbb4:	defffd04 	addi	sp,sp,-12
    bbb8:	df000215 	stw	fp,8(sp)
    bbbc:	df000204 	addi	fp,sp,8
    bbc0:	e13ffe15 	stw	r4,-8(fp)
    bbc4:	2805883a 	mov	r2,r5
    bbc8:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
    bbcc:	e0bffe17 	ldw	r2,-8(fp)
    bbd0:	10800a17 	ldw	r2,40(r2)
    bbd4:	1007883a 	mov	r3,r2
    bbd8:	e0bfff03 	ldbu	r2,-4(fp)
    bbdc:	18800035 	stwio	r2,0(r3)
	return 0;
    bbe0:	0005883a 	mov	r2,zero
}
    bbe4:	e037883a 	mov	sp,fp
    bbe8:	df000017 	ldw	fp,0(sp)
    bbec:	dec00104 	addi	sp,sp,4
    bbf0:	f800283a 	ret

0000bbf4 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
    bbf4:	defffa04 	addi	sp,sp,-24
    bbf8:	dfc00515 	stw	ra,20(sp)
    bbfc:	df000415 	stw	fp,16(sp)
    bc00:	df000404 	addi	fp,sp,16
    bc04:	e13ffd15 	stw	r4,-12(fp)
    bc08:	e17ffe15 	stw	r5,-8(fp)
    bc0c:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    bc10:	e0bffd17 	ldw	r2,-12(fp)
    bc14:	10800a17 	ldw	r2,40(r2)
    bc18:	10800037 	ldwio	r2,0(r2)
    bc1c:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
    bc20:	e0bffc17 	ldw	r2,-16(fp)
    bc24:	1007883a 	mov	r3,r2
    bc28:	e0bffe17 	ldw	r2,-8(fp)
    bc2c:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
    bc30:	e13ffc17 	ldw	r4,-16(fp)
    bc34:	000bb700 	call	bb70 <alt_up_rs232_check_parity>
    bc38:	1007883a 	mov	r3,r2
    bc3c:	e0bfff17 	ldw	r2,-4(fp)
    bc40:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
    bc44:	e0bffc17 	ldw	r2,-16(fp)
    bc48:	10a0000c 	andi	r2,r2,32768
    bc4c:	1004d3fa 	srli	r2,r2,15
    bc50:	10bfffc4 	addi	r2,r2,-1
}
    bc54:	e037883a 	mov	sp,fp
    bc58:	dfc00117 	ldw	ra,4(sp)
    bc5c:	df000017 	ldw	fp,0(sp)
    bc60:	dec00204 	addi	sp,sp,8
    bc64:	f800283a 	ret

0000bc68 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
    bc68:	defff804 	addi	sp,sp,-32
    bc6c:	dfc00715 	stw	ra,28(sp)
    bc70:	df000615 	stw	fp,24(sp)
    bc74:	df000604 	addi	fp,sp,24
    bc78:	e13ffd15 	stw	r4,-12(fp)
    bc7c:	e17ffe15 	stw	r5,-8(fp)
    bc80:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    bc84:	e0bffd17 	ldw	r2,-12(fp)
    bc88:	10800017 	ldw	r2,0(r2)
    bc8c:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
    bc90:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
    bc94:	00000c06 	br	bcc8 <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
    bc98:	e0bffe17 	ldw	r2,-8(fp)
    bc9c:	10c00044 	addi	r3,r2,1
    bca0:	e0fffe15 	stw	r3,-8(fp)
    bca4:	e0fffc04 	addi	r3,fp,-16
    bca8:	180d883a 	mov	r6,r3
    bcac:	100b883a 	mov	r5,r2
    bcb0:	e13ffb17 	ldw	r4,-20(fp)
    bcb4:	000bbf40 	call	bbf4 <alt_up_rs232_read_data>
    bcb8:	1000081e 	bne	r2,zero,bcdc <alt_up_rs232_read_fd+0x74>
			count++;
    bcbc:	e0bffa17 	ldw	r2,-24(fp)
    bcc0:	10800044 	addi	r2,r2,1
    bcc4:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    bcc8:	e0bfff17 	ldw	r2,-4(fp)
    bccc:	10ffffc4 	addi	r3,r2,-1
    bcd0:	e0ffff15 	stw	r3,-4(fp)
    bcd4:	103ff01e 	bne	r2,zero,bc98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bc98>
    bcd8:	00000106 	br	bce0 <alt_up_rs232_read_fd+0x78>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
    bcdc:	0001883a 	nop
	}
	return count;
    bce0:	e0bffa17 	ldw	r2,-24(fp)
}
    bce4:	e037883a 	mov	sp,fp
    bce8:	dfc00117 	ldw	ra,4(sp)
    bcec:	df000017 	ldw	fp,0(sp)
    bcf0:	dec00204 	addi	sp,sp,8
    bcf4:	f800283a 	ret

0000bcf8 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
    bcf8:	defff904 	addi	sp,sp,-28
    bcfc:	dfc00615 	stw	ra,24(sp)
    bd00:	df000515 	stw	fp,20(sp)
    bd04:	df000504 	addi	fp,sp,20
    bd08:	e13ffd15 	stw	r4,-12(fp)
    bd0c:	e17ffe15 	stw	r5,-8(fp)
    bd10:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    bd14:	e0bffd17 	ldw	r2,-12(fp)
    bd18:	10800017 	ldw	r2,0(r2)
    bd1c:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
    bd20:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
    bd24:	00000d06 	br	bd5c <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
    bd28:	e0bffe17 	ldw	r2,-8(fp)
    bd2c:	10800003 	ldbu	r2,0(r2)
    bd30:	10803fcc 	andi	r2,r2,255
    bd34:	100b883a 	mov	r5,r2
    bd38:	e13ffc17 	ldw	r4,-16(fp)
    bd3c:	000bbb40 	call	bbb4 <alt_up_rs232_write_data>
    bd40:	10000b1e 	bne	r2,zero,bd70 <alt_up_rs232_write_fd+0x78>
		{
			count++;
    bd44:	e0bffb17 	ldw	r2,-20(fp)
    bd48:	10800044 	addi	r2,r2,1
    bd4c:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
    bd50:	e0bffe17 	ldw	r2,-8(fp)
    bd54:	10800044 	addi	r2,r2,1
    bd58:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
    bd5c:	e0bfff17 	ldw	r2,-4(fp)
    bd60:	10ffffc4 	addi	r3,r2,-1
    bd64:	e0ffff15 	stw	r3,-4(fp)
    bd68:	103fef1e 	bne	r2,zero,bd28 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bd28>
    bd6c:	00000106 	br	bd74 <alt_up_rs232_write_fd+0x7c>
		{
			count++;
			ptr++;
		}
		else
			break;
    bd70:	0001883a 	nop
	}
	return count;
    bd74:	e0bffb17 	ldw	r2,-20(fp)
}
    bd78:	e037883a 	mov	sp,fp
    bd7c:	dfc00117 	ldw	ra,4(sp)
    bd80:	df000017 	ldw	fp,0(sp)
    bd84:	dec00204 	addi	sp,sp,8
    bd88:	f800283a 	ret

0000bd8c <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
    bd8c:	defffc04 	addi	sp,sp,-16
    bd90:	dfc00315 	stw	ra,12(sp)
    bd94:	df000215 	stw	fp,8(sp)
    bd98:	df000204 	addi	fp,sp,8
    bd9c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
    bda0:	d1602604 	addi	r5,gp,-32616
    bda4:	e13fff17 	ldw	r4,-4(fp)
    bda8:	000c1ec0 	call	c1ec <alt_find_dev>
    bdac:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    bdb0:	e0bffe17 	ldw	r2,-8(fp)
}
    bdb4:	e037883a 	mov	sp,fp
    bdb8:	dfc00117 	ldw	ra,4(sp)
    bdbc:	df000017 	ldw	fp,0(sp)
    bdc0:	dec00204 	addi	sp,sp,8
    bdc4:	f800283a 	ret

0000bdc8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    bdc8:	defff504 	addi	sp,sp,-44
    bdcc:	df000a15 	stw	fp,40(sp)
    bdd0:	df000a04 	addi	fp,sp,40
    bdd4:	e13ffc15 	stw	r4,-16(fp)
    bdd8:	e17ffd15 	stw	r5,-12(fp)
    bddc:	e1bffe15 	stw	r6,-8(fp)
    bde0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    bde4:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    bde8:	d0a80a17 	ldw	r2,-24536(gp)
  
  if (alt_ticks_per_second ())
    bdec:	10003c26 	beq	r2,zero,bee0 <alt_alarm_start+0x118>
  {
    if (alarm)
    bdf0:	e0bffc17 	ldw	r2,-16(fp)
    bdf4:	10003826 	beq	r2,zero,bed8 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
    bdf8:	e0bffc17 	ldw	r2,-16(fp)
    bdfc:	e0fffe17 	ldw	r3,-8(fp)
    be00:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    be04:	e0bffc17 	ldw	r2,-16(fp)
    be08:	e0ffff17 	ldw	r3,-4(fp)
    be0c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    be10:	0005303a 	rdctl	r2,status
    be14:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    be18:	e0fff917 	ldw	r3,-28(fp)
    be1c:	00bfff84 	movi	r2,-2
    be20:	1884703a 	and	r2,r3,r2
    be24:	1001703a 	wrctl	status,r2
  
  return context;
    be28:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    be2c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    be30:	d0a80b17 	ldw	r2,-24532(gp)
      
      current_nticks = alt_nticks();
    be34:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    be38:	e0fffd17 	ldw	r3,-12(fp)
    be3c:	e0bff617 	ldw	r2,-40(fp)
    be40:	1885883a 	add	r2,r3,r2
    be44:	10c00044 	addi	r3,r2,1
    be48:	e0bffc17 	ldw	r2,-16(fp)
    be4c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    be50:	e0bffc17 	ldw	r2,-16(fp)
    be54:	10c00217 	ldw	r3,8(r2)
    be58:	e0bff617 	ldw	r2,-40(fp)
    be5c:	1880042e 	bgeu	r3,r2,be70 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
    be60:	e0bffc17 	ldw	r2,-16(fp)
    be64:	00c00044 	movi	r3,1
    be68:	10c00405 	stb	r3,16(r2)
    be6c:	00000206 	br	be78 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
    be70:	e0bffc17 	ldw	r2,-16(fp)
    be74:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    be78:	e0bffc17 	ldw	r2,-16(fp)
    be7c:	d0e02b04 	addi	r3,gp,-32596
    be80:	e0fffa15 	stw	r3,-24(fp)
    be84:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    be88:	e0bffb17 	ldw	r2,-20(fp)
    be8c:	e0fffa17 	ldw	r3,-24(fp)
    be90:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    be94:	e0bffa17 	ldw	r2,-24(fp)
    be98:	10c00017 	ldw	r3,0(r2)
    be9c:	e0bffb17 	ldw	r2,-20(fp)
    bea0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    bea4:	e0bffa17 	ldw	r2,-24(fp)
    bea8:	10800017 	ldw	r2,0(r2)
    beac:	e0fffb17 	ldw	r3,-20(fp)
    beb0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    beb4:	e0bffa17 	ldw	r2,-24(fp)
    beb8:	e0fffb17 	ldw	r3,-20(fp)
    bebc:	10c00015 	stw	r3,0(r2)
    bec0:	e0bff817 	ldw	r2,-32(fp)
    bec4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bec8:	e0bff717 	ldw	r2,-36(fp)
    becc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    bed0:	0005883a 	mov	r2,zero
    bed4:	00000306 	br	bee4 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
    bed8:	00bffa84 	movi	r2,-22
    bedc:	00000106 	br	bee4 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
    bee0:	00bfde84 	movi	r2,-134
  }
}
    bee4:	e037883a 	mov	sp,fp
    bee8:	df000017 	ldw	fp,0(sp)
    beec:	dec00104 	addi	sp,sp,4
    bef0:	f800283a 	ret

0000bef4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    bef4:	defffe04 	addi	sp,sp,-8
    bef8:	dfc00115 	stw	ra,4(sp)
    befc:	df000015 	stw	fp,0(sp)
    bf00:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    bf04:	d0a02917 	ldw	r2,-32604(gp)
    bf08:	10000326 	beq	r2,zero,bf18 <alt_get_errno+0x24>
    bf0c:	d0a02917 	ldw	r2,-32604(gp)
    bf10:	103ee83a 	callr	r2
    bf14:	00000106 	br	bf1c <alt_get_errno+0x28>
    bf18:	d0a7ec04 	addi	r2,gp,-24656
}
    bf1c:	e037883a 	mov	sp,fp
    bf20:	dfc00117 	ldw	ra,4(sp)
    bf24:	df000017 	ldw	fp,0(sp)
    bf28:	dec00204 	addi	sp,sp,8
    bf2c:	f800283a 	ret

0000bf30 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    bf30:	defffb04 	addi	sp,sp,-20
    bf34:	dfc00415 	stw	ra,16(sp)
    bf38:	df000315 	stw	fp,12(sp)
    bf3c:	df000304 	addi	fp,sp,12
    bf40:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    bf44:	e0bfff17 	ldw	r2,-4(fp)
    bf48:	10000616 	blt	r2,zero,bf64 <close+0x34>
    bf4c:	e0bfff17 	ldw	r2,-4(fp)
    bf50:	10c00324 	muli	r3,r2,12
    bf54:	00800074 	movhi	r2,1
    bf58:	10bda704 	addi	r2,r2,-2404
    bf5c:	1885883a 	add	r2,r3,r2
    bf60:	00000106 	br	bf68 <close+0x38>
    bf64:	0005883a 	mov	r2,zero
    bf68:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    bf6c:	e0bffd17 	ldw	r2,-12(fp)
    bf70:	10001926 	beq	r2,zero,bfd8 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    bf74:	e0bffd17 	ldw	r2,-12(fp)
    bf78:	10800017 	ldw	r2,0(r2)
    bf7c:	10800417 	ldw	r2,16(r2)
    bf80:	10000626 	beq	r2,zero,bf9c <close+0x6c>
    bf84:	e0bffd17 	ldw	r2,-12(fp)
    bf88:	10800017 	ldw	r2,0(r2)
    bf8c:	10800417 	ldw	r2,16(r2)
    bf90:	e13ffd17 	ldw	r4,-12(fp)
    bf94:	103ee83a 	callr	r2
    bf98:	00000106 	br	bfa0 <close+0x70>
    bf9c:	0005883a 	mov	r2,zero
    bfa0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    bfa4:	e13fff17 	ldw	r4,-4(fp)
    bfa8:	000c7c40 	call	c7c4 <alt_release_fd>
    if (rval < 0)
    bfac:	e0bffe17 	ldw	r2,-8(fp)
    bfb0:	1000070e 	bge	r2,zero,bfd0 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    bfb4:	000bef40 	call	bef4 <alt_get_errno>
    bfb8:	1007883a 	mov	r3,r2
    bfbc:	e0bffe17 	ldw	r2,-8(fp)
    bfc0:	0085c83a 	sub	r2,zero,r2
    bfc4:	18800015 	stw	r2,0(r3)
      return -1;
    bfc8:	00bfffc4 	movi	r2,-1
    bfcc:	00000706 	br	bfec <close+0xbc>
    }
    return 0;
    bfd0:	0005883a 	mov	r2,zero
    bfd4:	00000506 	br	bfec <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    bfd8:	000bef40 	call	bef4 <alt_get_errno>
    bfdc:	1007883a 	mov	r3,r2
    bfe0:	00801444 	movi	r2,81
    bfe4:	18800015 	stw	r2,0(r3)
    return -1;
    bfe8:	00bfffc4 	movi	r2,-1
  }
}
    bfec:	e037883a 	mov	sp,fp
    bff0:	dfc00117 	ldw	ra,4(sp)
    bff4:	df000017 	ldw	fp,0(sp)
    bff8:	dec00204 	addi	sp,sp,8
    bffc:	f800283a 	ret

0000c000 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    c000:	deffff04 	addi	sp,sp,-4
    c004:	df000015 	stw	fp,0(sp)
    c008:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    c00c:	0001883a 	nop
    c010:	e037883a 	mov	sp,fp
    c014:	df000017 	ldw	fp,0(sp)
    c018:	dec00104 	addi	sp,sp,4
    c01c:	f800283a 	ret

0000c020 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    c020:	defffc04 	addi	sp,sp,-16
    c024:	df000315 	stw	fp,12(sp)
    c028:	df000304 	addi	fp,sp,12
    c02c:	e13ffd15 	stw	r4,-12(fp)
    c030:	e17ffe15 	stw	r5,-8(fp)
    c034:	e1bfff15 	stw	r6,-4(fp)
  return len;
    c038:	e0bfff17 	ldw	r2,-4(fp)
}
    c03c:	e037883a 	mov	sp,fp
    c040:	df000017 	ldw	fp,0(sp)
    c044:	dec00104 	addi	sp,sp,4
    c048:	f800283a 	ret

0000c04c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c04c:	defffe04 	addi	sp,sp,-8
    c050:	dfc00115 	stw	ra,4(sp)
    c054:	df000015 	stw	fp,0(sp)
    c058:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    c05c:	d0a02917 	ldw	r2,-32604(gp)
    c060:	10000326 	beq	r2,zero,c070 <alt_get_errno+0x24>
    c064:	d0a02917 	ldw	r2,-32604(gp)
    c068:	103ee83a 	callr	r2
    c06c:	00000106 	br	c074 <alt_get_errno+0x28>
    c070:	d0a7ec04 	addi	r2,gp,-24656
}
    c074:	e037883a 	mov	sp,fp
    c078:	dfc00117 	ldw	ra,4(sp)
    c07c:	df000017 	ldw	fp,0(sp)
    c080:	dec00204 	addi	sp,sp,8
    c084:	f800283a 	ret

0000c088 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    c088:	defffa04 	addi	sp,sp,-24
    c08c:	dfc00515 	stw	ra,20(sp)
    c090:	df000415 	stw	fp,16(sp)
    c094:	df000404 	addi	fp,sp,16
    c098:	e13ffe15 	stw	r4,-8(fp)
    c09c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    c0a0:	e0bffe17 	ldw	r2,-8(fp)
    c0a4:	10000326 	beq	r2,zero,c0b4 <alt_dev_llist_insert+0x2c>
    c0a8:	e0bffe17 	ldw	r2,-8(fp)
    c0ac:	10800217 	ldw	r2,8(r2)
    c0b0:	1000061e 	bne	r2,zero,c0cc <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    c0b4:	000c04c0 	call	c04c <alt_get_errno>
    c0b8:	1007883a 	mov	r3,r2
    c0bc:	00800584 	movi	r2,22
    c0c0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    c0c4:	00bffa84 	movi	r2,-22
    c0c8:	00001306 	br	c118 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    c0cc:	e0bffe17 	ldw	r2,-8(fp)
    c0d0:	e0ffff17 	ldw	r3,-4(fp)
    c0d4:	e0fffc15 	stw	r3,-16(fp)
    c0d8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    c0dc:	e0bffd17 	ldw	r2,-12(fp)
    c0e0:	e0fffc17 	ldw	r3,-16(fp)
    c0e4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    c0e8:	e0bffc17 	ldw	r2,-16(fp)
    c0ec:	10c00017 	ldw	r3,0(r2)
    c0f0:	e0bffd17 	ldw	r2,-12(fp)
    c0f4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    c0f8:	e0bffc17 	ldw	r2,-16(fp)
    c0fc:	10800017 	ldw	r2,0(r2)
    c100:	e0fffd17 	ldw	r3,-12(fp)
    c104:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    c108:	e0bffc17 	ldw	r2,-16(fp)
    c10c:	e0fffd17 	ldw	r3,-12(fp)
    c110:	10c00015 	stw	r3,0(r2)

  return 0;  
    c114:	0005883a 	mov	r2,zero
}
    c118:	e037883a 	mov	sp,fp
    c11c:	dfc00117 	ldw	ra,4(sp)
    c120:	df000017 	ldw	fp,0(sp)
    c124:	dec00204 	addi	sp,sp,8
    c128:	f800283a 	ret

0000c12c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    c12c:	defffd04 	addi	sp,sp,-12
    c130:	dfc00215 	stw	ra,8(sp)
    c134:	df000115 	stw	fp,4(sp)
    c138:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    c13c:	00800074 	movhi	r2,1
    c140:	10b5bc04 	addi	r2,r2,-10512
    c144:	e0bfff15 	stw	r2,-4(fp)
    c148:	00000606 	br	c164 <_do_ctors+0x38>
        (*ctor) (); 
    c14c:	e0bfff17 	ldw	r2,-4(fp)
    c150:	10800017 	ldw	r2,0(r2)
    c154:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    c158:	e0bfff17 	ldw	r2,-4(fp)
    c15c:	10bfff04 	addi	r2,r2,-4
    c160:	e0bfff15 	stw	r2,-4(fp)
    c164:	e0ffff17 	ldw	r3,-4(fp)
    c168:	00800074 	movhi	r2,1
    c16c:	10b5bd04 	addi	r2,r2,-10508
    c170:	18bff62e 	bgeu	r3,r2,c14c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c14c>
        (*ctor) (); 
}
    c174:	0001883a 	nop
    c178:	e037883a 	mov	sp,fp
    c17c:	dfc00117 	ldw	ra,4(sp)
    c180:	df000017 	ldw	fp,0(sp)
    c184:	dec00204 	addi	sp,sp,8
    c188:	f800283a 	ret

0000c18c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    c18c:	defffd04 	addi	sp,sp,-12
    c190:	dfc00215 	stw	ra,8(sp)
    c194:	df000115 	stw	fp,4(sp)
    c198:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    c19c:	00800074 	movhi	r2,1
    c1a0:	10b5bc04 	addi	r2,r2,-10512
    c1a4:	e0bfff15 	stw	r2,-4(fp)
    c1a8:	00000606 	br	c1c4 <_do_dtors+0x38>
        (*dtor) (); 
    c1ac:	e0bfff17 	ldw	r2,-4(fp)
    c1b0:	10800017 	ldw	r2,0(r2)
    c1b4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    c1b8:	e0bfff17 	ldw	r2,-4(fp)
    c1bc:	10bfff04 	addi	r2,r2,-4
    c1c0:	e0bfff15 	stw	r2,-4(fp)
    c1c4:	e0ffff17 	ldw	r3,-4(fp)
    c1c8:	00800074 	movhi	r2,1
    c1cc:	10b5bd04 	addi	r2,r2,-10508
    c1d0:	18bff62e 	bgeu	r3,r2,c1ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c1ac>
        (*dtor) (); 
}
    c1d4:	0001883a 	nop
    c1d8:	e037883a 	mov	sp,fp
    c1dc:	dfc00117 	ldw	ra,4(sp)
    c1e0:	df000017 	ldw	fp,0(sp)
    c1e4:	dec00204 	addi	sp,sp,8
    c1e8:	f800283a 	ret

0000c1ec <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    c1ec:	defffa04 	addi	sp,sp,-24
    c1f0:	dfc00515 	stw	ra,20(sp)
    c1f4:	df000415 	stw	fp,16(sp)
    c1f8:	df000404 	addi	fp,sp,16
    c1fc:	e13ffe15 	stw	r4,-8(fp)
    c200:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    c204:	e0bfff17 	ldw	r2,-4(fp)
    c208:	10800017 	ldw	r2,0(r2)
    c20c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    c210:	e13ffe17 	ldw	r4,-8(fp)
    c214:	000d3900 	call	d390 <strlen>
    c218:	10800044 	addi	r2,r2,1
    c21c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    c220:	00000d06 	br	c258 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    c224:	e0bffc17 	ldw	r2,-16(fp)
    c228:	10800217 	ldw	r2,8(r2)
    c22c:	e0fffd17 	ldw	r3,-12(fp)
    c230:	180d883a 	mov	r6,r3
    c234:	e17ffe17 	ldw	r5,-8(fp)
    c238:	1009883a 	mov	r4,r2
    c23c:	000d0a40 	call	d0a4 <memcmp>
    c240:	1000021e 	bne	r2,zero,c24c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    c244:	e0bffc17 	ldw	r2,-16(fp)
    c248:	00000706 	br	c268 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    c24c:	e0bffc17 	ldw	r2,-16(fp)
    c250:	10800017 	ldw	r2,0(r2)
    c254:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    c258:	e0fffc17 	ldw	r3,-16(fp)
    c25c:	e0bfff17 	ldw	r2,-4(fp)
    c260:	18bff01e 	bne	r3,r2,c224 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c224>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    c264:	0005883a 	mov	r2,zero
}
    c268:	e037883a 	mov	sp,fp
    c26c:	dfc00117 	ldw	ra,4(sp)
    c270:	df000017 	ldw	fp,0(sp)
    c274:	dec00204 	addi	sp,sp,8
    c278:	f800283a 	ret

0000c27c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    c27c:	defffe04 	addi	sp,sp,-8
    c280:	dfc00115 	stw	ra,4(sp)
    c284:	df000015 	stw	fp,0(sp)
    c288:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    c28c:	01440004 	movi	r5,4096
    c290:	0009883a 	mov	r4,zero
    c294:	000cf2c0 	call	cf2c <alt_icache_flush>
#endif
}
    c298:	0001883a 	nop
    c29c:	e037883a 	mov	sp,fp
    c2a0:	dfc00117 	ldw	ra,4(sp)
    c2a4:	df000017 	ldw	fp,0(sp)
    c2a8:	dec00204 	addi	sp,sp,8
    c2ac:	f800283a 	ret

0000c2b0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    c2b0:	defff904 	addi	sp,sp,-28
    c2b4:	dfc00615 	stw	ra,24(sp)
    c2b8:	df000515 	stw	fp,20(sp)
    c2bc:	df000504 	addi	fp,sp,20
    c2c0:	e13ffc15 	stw	r4,-16(fp)
    c2c4:	e17ffd15 	stw	r5,-12(fp)
    c2c8:	e1bffe15 	stw	r6,-8(fp)
    c2cc:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    c2d0:	e1bfff17 	ldw	r6,-4(fp)
    c2d4:	e17ffe17 	ldw	r5,-8(fp)
    c2d8:	e13ffd17 	ldw	r4,-12(fp)
    c2dc:	000c6700 	call	c670 <open>
    c2e0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    c2e4:	e0bffb17 	ldw	r2,-20(fp)
    c2e8:	10001c16 	blt	r2,zero,c35c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
    c2ec:	00800074 	movhi	r2,1
    c2f0:	10bda704 	addi	r2,r2,-2404
    c2f4:	e0fffb17 	ldw	r3,-20(fp)
    c2f8:	18c00324 	muli	r3,r3,12
    c2fc:	10c5883a 	add	r2,r2,r3
    c300:	10c00017 	ldw	r3,0(r2)
    c304:	e0bffc17 	ldw	r2,-16(fp)
    c308:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    c30c:	00800074 	movhi	r2,1
    c310:	10bda704 	addi	r2,r2,-2404
    c314:	e0fffb17 	ldw	r3,-20(fp)
    c318:	18c00324 	muli	r3,r3,12
    c31c:	10c5883a 	add	r2,r2,r3
    c320:	10800104 	addi	r2,r2,4
    c324:	10c00017 	ldw	r3,0(r2)
    c328:	e0bffc17 	ldw	r2,-16(fp)
    c32c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    c330:	00800074 	movhi	r2,1
    c334:	10bda704 	addi	r2,r2,-2404
    c338:	e0fffb17 	ldw	r3,-20(fp)
    c33c:	18c00324 	muli	r3,r3,12
    c340:	10c5883a 	add	r2,r2,r3
    c344:	10800204 	addi	r2,r2,8
    c348:	10c00017 	ldw	r3,0(r2)
    c34c:	e0bffc17 	ldw	r2,-16(fp)
    c350:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    c354:	e13ffb17 	ldw	r4,-20(fp)
    c358:	000c7c40 	call	c7c4 <alt_release_fd>
  }
} 
    c35c:	0001883a 	nop
    c360:	e037883a 	mov	sp,fp
    c364:	dfc00117 	ldw	ra,4(sp)
    c368:	df000017 	ldw	fp,0(sp)
    c36c:	dec00204 	addi	sp,sp,8
    c370:	f800283a 	ret

0000c374 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    c374:	defffb04 	addi	sp,sp,-20
    c378:	dfc00415 	stw	ra,16(sp)
    c37c:	df000315 	stw	fp,12(sp)
    c380:	df000304 	addi	fp,sp,12
    c384:	e13ffd15 	stw	r4,-12(fp)
    c388:	e17ffe15 	stw	r5,-8(fp)
    c38c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    c390:	01c07fc4 	movi	r7,511
    c394:	01800044 	movi	r6,1
    c398:	e17ffd17 	ldw	r5,-12(fp)
    c39c:	01000074 	movhi	r4,1
    c3a0:	213daa04 	addi	r4,r4,-2392
    c3a4:	000c2b00 	call	c2b0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    c3a8:	01c07fc4 	movi	r7,511
    c3ac:	000d883a 	mov	r6,zero
    c3b0:	e17ffe17 	ldw	r5,-8(fp)
    c3b4:	01000074 	movhi	r4,1
    c3b8:	213da704 	addi	r4,r4,-2404
    c3bc:	000c2b00 	call	c2b0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    c3c0:	01c07fc4 	movi	r7,511
    c3c4:	01800044 	movi	r6,1
    c3c8:	e17fff17 	ldw	r5,-4(fp)
    c3cc:	01000074 	movhi	r4,1
    c3d0:	213dad04 	addi	r4,r4,-2380
    c3d4:	000c2b00 	call	c2b0 <alt_open_fd>
}  
    c3d8:	0001883a 	nop
    c3dc:	e037883a 	mov	sp,fp
    c3e0:	dfc00117 	ldw	ra,4(sp)
    c3e4:	df000017 	ldw	fp,0(sp)
    c3e8:	dec00204 	addi	sp,sp,8
    c3ec:	f800283a 	ret

0000c3f0 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    c3f0:	defff004 	addi	sp,sp,-64
    c3f4:	df000f15 	stw	fp,60(sp)
    c3f8:	df000f04 	addi	fp,sp,60
    c3fc:	e13ffd15 	stw	r4,-12(fp)
    c400:	e17ffe15 	stw	r5,-8(fp)
    c404:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
    c408:	00bffa84 	movi	r2,-22
    c40c:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    c410:	e0bffd17 	ldw	r2,-12(fp)
    c414:	10800828 	cmpgeui	r2,r2,32
    c418:	1000501e 	bne	r2,zero,c55c <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c41c:	0005303a 	rdctl	r2,status
    c420:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c424:	e0fff617 	ldw	r3,-40(fp)
    c428:	00bfff84 	movi	r2,-2
    c42c:	1884703a 	and	r2,r3,r2
    c430:	1001703a 	wrctl	status,r2
  
  return context;
    c434:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
    c438:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
    c43c:	008000b4 	movhi	r2,2
    c440:	10a2a704 	addi	r2,r2,-30052
    c444:	e0fffd17 	ldw	r3,-12(fp)
    c448:	180690fa 	slli	r3,r3,3
    c44c:	10c5883a 	add	r2,r2,r3
    c450:	e0ffff17 	ldw	r3,-4(fp)
    c454:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
    c458:	008000b4 	movhi	r2,2
    c45c:	10a2a704 	addi	r2,r2,-30052
    c460:	e0fffd17 	ldw	r3,-12(fp)
    c464:	180690fa 	slli	r3,r3,3
    c468:	10c5883a 	add	r2,r2,r3
    c46c:	10800104 	addi	r2,r2,4
    c470:	e0fffe17 	ldw	r3,-8(fp)
    c474:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    c478:	e0bfff17 	ldw	r2,-4(fp)
    c47c:	10001926 	beq	r2,zero,c4e4 <alt_irq_register+0xf4>
    c480:	e0bffd17 	ldw	r2,-12(fp)
    c484:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c488:	0005303a 	rdctl	r2,status
    c48c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c490:	e0fff717 	ldw	r3,-36(fp)
    c494:	00bfff84 	movi	r2,-2
    c498:	1884703a 	and	r2,r3,r2
    c49c:	1001703a 	wrctl	status,r2
  
  return context;
    c4a0:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    c4a4:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
    c4a8:	00c00044 	movi	r3,1
    c4ac:	e0bff217 	ldw	r2,-56(fp)
    c4b0:	1884983a 	sll	r2,r3,r2
    c4b4:	1007883a 	mov	r3,r2
    c4b8:	d0a80917 	ldw	r2,-24540(gp)
    c4bc:	1884b03a 	or	r2,r3,r2
    c4c0:	d0a80915 	stw	r2,-24540(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    c4c4:	d0a80917 	ldw	r2,-24540(gp)
    c4c8:	100170fa 	wrctl	ienable,r2
    c4cc:	e0bff817 	ldw	r2,-32(fp)
    c4d0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c4d4:	e0bff917 	ldw	r2,-28(fp)
    c4d8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    c4dc:	0005883a 	mov	r2,zero
    c4e0:	00001906 	br	c548 <alt_irq_register+0x158>
    c4e4:	e0bffd17 	ldw	r2,-12(fp)
    c4e8:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c4ec:	0005303a 	rdctl	r2,status
    c4f0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c4f4:	e0fffa17 	ldw	r3,-24(fp)
    c4f8:	00bfff84 	movi	r2,-2
    c4fc:	1884703a 	and	r2,r3,r2
    c500:	1001703a 	wrctl	status,r2
  
  return context;
    c504:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    c508:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
    c50c:	00c00044 	movi	r3,1
    c510:	e0bff417 	ldw	r2,-48(fp)
    c514:	1884983a 	sll	r2,r3,r2
    c518:	0084303a 	nor	r2,zero,r2
    c51c:	1007883a 	mov	r3,r2
    c520:	d0a80917 	ldw	r2,-24540(gp)
    c524:	1884703a 	and	r2,r3,r2
    c528:	d0a80915 	stw	r2,-24540(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    c52c:	d0a80917 	ldw	r2,-24540(gp)
    c530:	100170fa 	wrctl	ienable,r2
    c534:	e0bffb17 	ldw	r2,-20(fp)
    c538:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c53c:	e0bffc17 	ldw	r2,-16(fp)
    c540:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    c544:	0005883a 	mov	r2,zero
    c548:	e0bff115 	stw	r2,-60(fp)
    c54c:	e0bff317 	ldw	r2,-52(fp)
    c550:	e0bff515 	stw	r2,-44(fp)
    c554:	e0bff517 	ldw	r2,-44(fp)
    c558:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
    c55c:	e0bff117 	ldw	r2,-60(fp)
}
    c560:	e037883a 	mov	sp,fp
    c564:	df000017 	ldw	fp,0(sp)
    c568:	dec00104 	addi	sp,sp,4
    c56c:	f800283a 	ret

0000c570 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c570:	defffe04 	addi	sp,sp,-8
    c574:	dfc00115 	stw	ra,4(sp)
    c578:	df000015 	stw	fp,0(sp)
    c57c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    c580:	d0a02917 	ldw	r2,-32604(gp)
    c584:	10000326 	beq	r2,zero,c594 <alt_get_errno+0x24>
    c588:	d0a02917 	ldw	r2,-32604(gp)
    c58c:	103ee83a 	callr	r2
    c590:	00000106 	br	c598 <alt_get_errno+0x28>
    c594:	d0a7ec04 	addi	r2,gp,-24656
}
    c598:	e037883a 	mov	sp,fp
    c59c:	dfc00117 	ldw	ra,4(sp)
    c5a0:	df000017 	ldw	fp,0(sp)
    c5a4:	dec00204 	addi	sp,sp,8
    c5a8:	f800283a 	ret

0000c5ac <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    c5ac:	defffd04 	addi	sp,sp,-12
    c5b0:	df000215 	stw	fp,8(sp)
    c5b4:	df000204 	addi	fp,sp,8
    c5b8:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    c5bc:	e0bfff17 	ldw	r2,-4(fp)
    c5c0:	10800217 	ldw	r2,8(r2)
    c5c4:	10d00034 	orhi	r3,r2,16384
    c5c8:	e0bfff17 	ldw	r2,-4(fp)
    c5cc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    c5d0:	e03ffe15 	stw	zero,-8(fp)
    c5d4:	00001d06 	br	c64c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    c5d8:	00800074 	movhi	r2,1
    c5dc:	10bda704 	addi	r2,r2,-2404
    c5e0:	e0fffe17 	ldw	r3,-8(fp)
    c5e4:	18c00324 	muli	r3,r3,12
    c5e8:	10c5883a 	add	r2,r2,r3
    c5ec:	10c00017 	ldw	r3,0(r2)
    c5f0:	e0bfff17 	ldw	r2,-4(fp)
    c5f4:	10800017 	ldw	r2,0(r2)
    c5f8:	1880111e 	bne	r3,r2,c640 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    c5fc:	00800074 	movhi	r2,1
    c600:	10bda704 	addi	r2,r2,-2404
    c604:	e0fffe17 	ldw	r3,-8(fp)
    c608:	18c00324 	muli	r3,r3,12
    c60c:	10c5883a 	add	r2,r2,r3
    c610:	10800204 	addi	r2,r2,8
    c614:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    c618:	1000090e 	bge	r2,zero,c640 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    c61c:	e0bffe17 	ldw	r2,-8(fp)
    c620:	10c00324 	muli	r3,r2,12
    c624:	00800074 	movhi	r2,1
    c628:	10bda704 	addi	r2,r2,-2404
    c62c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    c630:	e0bfff17 	ldw	r2,-4(fp)
    c634:	18800226 	beq	r3,r2,c640 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    c638:	00bffcc4 	movi	r2,-13
    c63c:	00000806 	br	c660 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    c640:	e0bffe17 	ldw	r2,-8(fp)
    c644:	10800044 	addi	r2,r2,1
    c648:	e0bffe15 	stw	r2,-8(fp)
    c64c:	d0a02817 	ldw	r2,-32608(gp)
    c650:	1007883a 	mov	r3,r2
    c654:	e0bffe17 	ldw	r2,-8(fp)
    c658:	18bfdf2e 	bgeu	r3,r2,c5d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c5d8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    c65c:	0005883a 	mov	r2,zero
}
    c660:	e037883a 	mov	sp,fp
    c664:	df000017 	ldw	fp,0(sp)
    c668:	dec00104 	addi	sp,sp,4
    c66c:	f800283a 	ret

0000c670 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    c670:	defff604 	addi	sp,sp,-40
    c674:	dfc00915 	stw	ra,36(sp)
    c678:	df000815 	stw	fp,32(sp)
    c67c:	df000804 	addi	fp,sp,32
    c680:	e13ffd15 	stw	r4,-12(fp)
    c684:	e17ffe15 	stw	r5,-8(fp)
    c688:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    c68c:	00bfffc4 	movi	r2,-1
    c690:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    c694:	00bffb44 	movi	r2,-19
    c698:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    c69c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    c6a0:	d1602604 	addi	r5,gp,-32616
    c6a4:	e13ffd17 	ldw	r4,-12(fp)
    c6a8:	000c1ec0 	call	c1ec <alt_find_dev>
    c6ac:	e0bff815 	stw	r2,-32(fp)
    c6b0:	e0bff817 	ldw	r2,-32(fp)
    c6b4:	1000051e 	bne	r2,zero,c6cc <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    c6b8:	e13ffd17 	ldw	r4,-12(fp)
    c6bc:	000cd480 	call	cd48 <alt_find_file>
    c6c0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    c6c4:	00800044 	movi	r2,1
    c6c8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    c6cc:	e0bff817 	ldw	r2,-32(fp)
    c6d0:	10002926 	beq	r2,zero,c778 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
    c6d4:	e13ff817 	ldw	r4,-32(fp)
    c6d8:	000ce500 	call	ce50 <alt_get_fd>
    c6dc:	e0bff915 	stw	r2,-28(fp)
    c6e0:	e0bff917 	ldw	r2,-28(fp)
    c6e4:	1000030e 	bge	r2,zero,c6f4 <open+0x84>
    {
      status = index;
    c6e8:	e0bff917 	ldw	r2,-28(fp)
    c6ec:	e0bffa15 	stw	r2,-24(fp)
    c6f0:	00002306 	br	c780 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
    c6f4:	e0bff917 	ldw	r2,-28(fp)
    c6f8:	10c00324 	muli	r3,r2,12
    c6fc:	00800074 	movhi	r2,1
    c700:	10bda704 	addi	r2,r2,-2404
    c704:	1885883a 	add	r2,r3,r2
    c708:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    c70c:	e0fffe17 	ldw	r3,-8(fp)
    c710:	00900034 	movhi	r2,16384
    c714:	10bfffc4 	addi	r2,r2,-1
    c718:	1886703a 	and	r3,r3,r2
    c71c:	e0bffc17 	ldw	r2,-16(fp)
    c720:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    c724:	e0bffb17 	ldw	r2,-20(fp)
    c728:	1000051e 	bne	r2,zero,c740 <open+0xd0>
    c72c:	e13ffc17 	ldw	r4,-16(fp)
    c730:	000c5ac0 	call	c5ac <alt_file_locked>
    c734:	e0bffa15 	stw	r2,-24(fp)
    c738:	e0bffa17 	ldw	r2,-24(fp)
    c73c:	10001016 	blt	r2,zero,c780 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    c740:	e0bff817 	ldw	r2,-32(fp)
    c744:	10800317 	ldw	r2,12(r2)
    c748:	10000826 	beq	r2,zero,c76c <open+0xfc>
    c74c:	e0bff817 	ldw	r2,-32(fp)
    c750:	10800317 	ldw	r2,12(r2)
    c754:	e1ffff17 	ldw	r7,-4(fp)
    c758:	e1bffe17 	ldw	r6,-8(fp)
    c75c:	e17ffd17 	ldw	r5,-12(fp)
    c760:	e13ffc17 	ldw	r4,-16(fp)
    c764:	103ee83a 	callr	r2
    c768:	00000106 	br	c770 <open+0x100>
    c76c:	0005883a 	mov	r2,zero
    c770:	e0bffa15 	stw	r2,-24(fp)
    c774:	00000206 	br	c780 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
    c778:	00bffb44 	movi	r2,-19
    c77c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    c780:	e0bffa17 	ldw	r2,-24(fp)
    c784:	1000090e 	bge	r2,zero,c7ac <open+0x13c>
  {
    alt_release_fd (index);  
    c788:	e13ff917 	ldw	r4,-28(fp)
    c78c:	000c7c40 	call	c7c4 <alt_release_fd>
    ALT_ERRNO = -status;
    c790:	000c5700 	call	c570 <alt_get_errno>
    c794:	1007883a 	mov	r3,r2
    c798:	e0bffa17 	ldw	r2,-24(fp)
    c79c:	0085c83a 	sub	r2,zero,r2
    c7a0:	18800015 	stw	r2,0(r3)
    return -1;
    c7a4:	00bfffc4 	movi	r2,-1
    c7a8:	00000106 	br	c7b0 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
    c7ac:	e0bff917 	ldw	r2,-28(fp)
}
    c7b0:	e037883a 	mov	sp,fp
    c7b4:	dfc00117 	ldw	ra,4(sp)
    c7b8:	df000017 	ldw	fp,0(sp)
    c7bc:	dec00204 	addi	sp,sp,8
    c7c0:	f800283a 	ret

0000c7c4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    c7c4:	defffe04 	addi	sp,sp,-8
    c7c8:	df000115 	stw	fp,4(sp)
    c7cc:	df000104 	addi	fp,sp,4
    c7d0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    c7d4:	e0bfff17 	ldw	r2,-4(fp)
    c7d8:	108000d0 	cmplti	r2,r2,3
    c7dc:	10000d1e 	bne	r2,zero,c814 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    c7e0:	00800074 	movhi	r2,1
    c7e4:	10bda704 	addi	r2,r2,-2404
    c7e8:	e0ffff17 	ldw	r3,-4(fp)
    c7ec:	18c00324 	muli	r3,r3,12
    c7f0:	10c5883a 	add	r2,r2,r3
    c7f4:	10800204 	addi	r2,r2,8
    c7f8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    c7fc:	00800074 	movhi	r2,1
    c800:	10bda704 	addi	r2,r2,-2404
    c804:	e0ffff17 	ldw	r3,-4(fp)
    c808:	18c00324 	muli	r3,r3,12
    c80c:	10c5883a 	add	r2,r2,r3
    c810:	10000015 	stw	zero,0(r2)
  }
}
    c814:	0001883a 	nop
    c818:	e037883a 	mov	sp,fp
    c81c:	df000017 	ldw	fp,0(sp)
    c820:	dec00104 	addi	sp,sp,4
    c824:	f800283a 	ret

0000c828 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    c828:	defffa04 	addi	sp,sp,-24
    c82c:	df000515 	stw	fp,20(sp)
    c830:	df000504 	addi	fp,sp,20
    c834:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c838:	0005303a 	rdctl	r2,status
    c83c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c840:	e0fffc17 	ldw	r3,-16(fp)
    c844:	00bfff84 	movi	r2,-2
    c848:	1884703a 	and	r2,r3,r2
    c84c:	1001703a 	wrctl	status,r2
  
  return context;
    c850:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    c854:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    c858:	e0bfff17 	ldw	r2,-4(fp)
    c85c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    c860:	e0bffd17 	ldw	r2,-12(fp)
    c864:	10800017 	ldw	r2,0(r2)
    c868:	e0fffd17 	ldw	r3,-12(fp)
    c86c:	18c00117 	ldw	r3,4(r3)
    c870:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    c874:	e0bffd17 	ldw	r2,-12(fp)
    c878:	10800117 	ldw	r2,4(r2)
    c87c:	e0fffd17 	ldw	r3,-12(fp)
    c880:	18c00017 	ldw	r3,0(r3)
    c884:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    c888:	e0bffd17 	ldw	r2,-12(fp)
    c88c:	e0fffd17 	ldw	r3,-12(fp)
    c890:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    c894:	e0bffd17 	ldw	r2,-12(fp)
    c898:	e0fffd17 	ldw	r3,-12(fp)
    c89c:	10c00015 	stw	r3,0(r2)
    c8a0:	e0bffb17 	ldw	r2,-20(fp)
    c8a4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c8a8:	e0bffe17 	ldw	r2,-8(fp)
    c8ac:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    c8b0:	0001883a 	nop
    c8b4:	e037883a 	mov	sp,fp
    c8b8:	df000017 	ldw	fp,0(sp)
    c8bc:	dec00104 	addi	sp,sp,4
    c8c0:	f800283a 	ret

0000c8c4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    c8c4:	defffb04 	addi	sp,sp,-20
    c8c8:	dfc00415 	stw	ra,16(sp)
    c8cc:	df000315 	stw	fp,12(sp)
    c8d0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    c8d4:	d0a02b17 	ldw	r2,-32596(gp)
    c8d8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    c8dc:	d0a80b17 	ldw	r2,-24532(gp)
    c8e0:	10800044 	addi	r2,r2,1
    c8e4:	d0a80b15 	stw	r2,-24532(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    c8e8:	00002e06 	br	c9a4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    c8ec:	e0bffd17 	ldw	r2,-12(fp)
    c8f0:	10800017 	ldw	r2,0(r2)
    c8f4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    c8f8:	e0bffd17 	ldw	r2,-12(fp)
    c8fc:	10800403 	ldbu	r2,16(r2)
    c900:	10803fcc 	andi	r2,r2,255
    c904:	10000426 	beq	r2,zero,c918 <alt_tick+0x54>
    c908:	d0a80b17 	ldw	r2,-24532(gp)
    c90c:	1000021e 	bne	r2,zero,c918 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    c910:	e0bffd17 	ldw	r2,-12(fp)
    c914:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    c918:	e0bffd17 	ldw	r2,-12(fp)
    c91c:	10800217 	ldw	r2,8(r2)
    c920:	d0e80b17 	ldw	r3,-24532(gp)
    c924:	18801d36 	bltu	r3,r2,c99c <alt_tick+0xd8>
    c928:	e0bffd17 	ldw	r2,-12(fp)
    c92c:	10800403 	ldbu	r2,16(r2)
    c930:	10803fcc 	andi	r2,r2,255
    c934:	1000191e 	bne	r2,zero,c99c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    c938:	e0bffd17 	ldw	r2,-12(fp)
    c93c:	10800317 	ldw	r2,12(r2)
    c940:	e0fffd17 	ldw	r3,-12(fp)
    c944:	18c00517 	ldw	r3,20(r3)
    c948:	1809883a 	mov	r4,r3
    c94c:	103ee83a 	callr	r2
    c950:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    c954:	e0bfff17 	ldw	r2,-4(fp)
    c958:	1000031e 	bne	r2,zero,c968 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    c95c:	e13ffd17 	ldw	r4,-12(fp)
    c960:	000c8280 	call	c828 <alt_alarm_stop>
    c964:	00000d06 	br	c99c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    c968:	e0bffd17 	ldw	r2,-12(fp)
    c96c:	10c00217 	ldw	r3,8(r2)
    c970:	e0bfff17 	ldw	r2,-4(fp)
    c974:	1887883a 	add	r3,r3,r2
    c978:	e0bffd17 	ldw	r2,-12(fp)
    c97c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    c980:	e0bffd17 	ldw	r2,-12(fp)
    c984:	10c00217 	ldw	r3,8(r2)
    c988:	d0a80b17 	ldw	r2,-24532(gp)
    c98c:	1880032e 	bgeu	r3,r2,c99c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    c990:	e0bffd17 	ldw	r2,-12(fp)
    c994:	00c00044 	movi	r3,1
    c998:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    c99c:	e0bffe17 	ldw	r2,-8(fp)
    c9a0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    c9a4:	e0fffd17 	ldw	r3,-12(fp)
    c9a8:	d0a02b04 	addi	r2,gp,-32596
    c9ac:	18bfcf1e 	bne	r3,r2,c8ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c8ec>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    c9b0:	00029280 	call	2928 <OSTimeTick>
}
    c9b4:	0001883a 	nop
    c9b8:	e037883a 	mov	sp,fp
    c9bc:	dfc00117 	ldw	ra,4(sp)
    c9c0:	df000017 	ldw	fp,0(sp)
    c9c4:	dec00204 	addi	sp,sp,8
    c9c8:	f800283a 	ret

0000c9cc <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    c9cc:	deffff04 	addi	sp,sp,-4
    c9d0:	df000015 	stw	fp,0(sp)
    c9d4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    c9d8:	000170fa 	wrctl	ienable,zero
}
    c9dc:	0001883a 	nop
    c9e0:	e037883a 	mov	sp,fp
    c9e4:	df000017 	ldw	fp,0(sp)
    c9e8:	dec00104 	addi	sp,sp,4
    c9ec:	f800283a 	ret

0000c9f0 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
    c9f0:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
    c9f4:	d0e00317 	ldw	r3,-32756(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
    c9f8:	d1280317 	ldw	r4,-24564(gp)

      stw ra,  0(sp)
    c9fc:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
    ca00:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
    ca04:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
    ca08:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
    ca0c:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
    ca10:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
    ca14:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
    ca18:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
    ca1c:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
    ca20:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
    ca24:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
    ca28:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
    ca2c:	000cc640 	call	cc64 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
    ca30:	d127fe17 	ldw	r4,-24584(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
    ca34:	d167f607 	ldb	r5,-24616(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
    ca38:	d1280315 	stw	r4,-24564(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
    ca3c:	d167f645 	stb	r5,-24615(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
    ca40:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
    ca44:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
    ca48:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
    ca4c:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
    ca50:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
    ca54:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
    ca58:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
    ca5c:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
    ca60:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
    ca64:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
    ca68:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
    ca6c:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
    ca70:	d0e00315 	stw	r3,-32756(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
    ca74:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
    ca78:	f800283a 	ret

0000ca7c <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
    ca7c:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
    ca80:	047fff84 	movi	r17,-2
      and   r18, r18, r17
    ca84:	9464703a 	and	r18,r18,r17
      wrctl status, r18
    ca88:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
    ca8c:	000cc640 	call	cc64 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
    ca90:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
    ca94:	d4a7f445 	stb	r18,-24623(gp)

      /*
       * start execution of the new task.
       */

      br 9b
    ca98:	003fe506 	br	ca30 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ca30>

0000ca9c <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
    ca9c:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
    caa0:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
    caa4:	10800054 	ori	r2,r2,1
      wrctl status, r2
    caa8:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
    caac:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
    cab0:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
    cab4:	dec00204 	addi	sp,sp,8

      callr r2
    cab8:	103ee83a 	callr	r2

      nop
    cabc:	0001883a 	nop

0000cac0 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
    cac0:	defff704 	addi	sp,sp,-36
    cac4:	dfc00815 	stw	ra,32(sp)
    cac8:	df000715 	stw	fp,28(sp)
    cacc:	df000704 	addi	fp,sp,28
    cad0:	e13ffc15 	stw	r4,-16(fp)
    cad4:	e17ffd15 	stw	r5,-12(fp)
    cad8:	e1bffe15 	stw	r6,-8(fp)
    cadc:	3805883a 	mov	r2,r7
    cae0:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
    cae4:	e0fffe17 	ldw	r3,-8(fp)
    cae8:	00bfff04 	movi	r2,-4
    caec:	1884703a 	and	r2,r3,r2
    caf0:	10bef704 	addi	r2,r2,-1060
    caf4:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
    caf8:	01810904 	movi	r6,1060
    cafc:	000b883a 	mov	r5,zero
    cb00:	e13ff917 	ldw	r4,-28(fp)
    cb04:	000d2680 	call	d268 <memset>
    cb08:	e0bff917 	ldw	r2,-28(fp)
    cb0c:	10c0bb04 	addi	r3,r2,748
    cb10:	e0bff917 	ldw	r2,-28(fp)
    cb14:	10c00115 	stw	r3,4(r2)
    cb18:	e0bff917 	ldw	r2,-28(fp)
    cb1c:	10c0d504 	addi	r3,r2,852
    cb20:	e0bff917 	ldw	r2,-28(fp)
    cb24:	10c00215 	stw	r3,8(r2)
    cb28:	e0bff917 	ldw	r2,-28(fp)
    cb2c:	10c0ef04 	addi	r3,r2,956
    cb30:	e0bff917 	ldw	r2,-28(fp)
    cb34:	10c00315 	stw	r3,12(r2)
    cb38:	e0fff917 	ldw	r3,-28(fp)
    cb3c:	00800074 	movhi	r2,1
    cb40:	10b67904 	addi	r2,r2,-9756
    cb44:	18800d15 	stw	r2,52(r3)
    cb48:	e0bff917 	ldw	r2,-28(fp)
    cb4c:	00c00044 	movi	r3,1
    cb50:	10c02915 	stw	r3,164(r2)
    cb54:	10002a15 	stw	zero,168(r2)
    cb58:	e0bff917 	ldw	r2,-28(fp)
    cb5c:	00ccc384 	movi	r3,13070
    cb60:	10c02b0d 	sth	r3,172(r2)
    cb64:	e0bff917 	ldw	r2,-28(fp)
    cb68:	00eaf344 	movi	r3,-21555
    cb6c:	10c02b8d 	sth	r3,174(r2)
    cb70:	e0bff917 	ldw	r2,-28(fp)
    cb74:	00c48d04 	movi	r3,4660
    cb78:	10c02c0d 	sth	r3,176(r2)
    cb7c:	e0bff917 	ldw	r2,-28(fp)
    cb80:	00f99b44 	movi	r3,-6547
    cb84:	10c02c8d 	sth	r3,178(r2)
    cb88:	e0bff917 	ldw	r2,-28(fp)
    cb8c:	00f7bb04 	movi	r3,-8468
    cb90:	10c02d0d 	sth	r3,180(r2)
    cb94:	e0bff917 	ldw	r2,-28(fp)
    cb98:	00c00144 	movi	r3,5
    cb9c:	10c02d8d 	sth	r3,182(r2)
    cba0:	e0bff917 	ldw	r2,-28(fp)
    cba4:	00c002c4 	movi	r3,11
    cba8:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
    cbac:	e0bff917 	ldw	r2,-28(fp)
    cbb0:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
    cbb4:	e0bffa17 	ldw	r2,-24(fp)
    cbb8:	10bff304 	addi	r2,r2,-52
    cbbc:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
    cbc0:	e0bffb17 	ldw	r2,-20(fp)
    cbc4:	10800c04 	addi	r2,r2,48
    cbc8:	e0fffc17 	ldw	r3,-16(fp)
    cbcc:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
    cbd0:	e0bffb17 	ldw	r2,-20(fp)
    cbd4:	10800b04 	addi	r2,r2,44
    cbd8:	e0fffd17 	ldw	r3,-12(fp)
    cbdc:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
    cbe0:	e0bffb17 	ldw	r2,-20(fp)
    cbe4:	10800a04 	addi	r2,r2,40
    cbe8:	e0fff917 	ldw	r3,-28(fp)
    cbec:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
    cbf0:	00800074 	movhi	r2,1
    cbf4:	10b2a704 	addi	r2,r2,-13668
    cbf8:	10c00104 	addi	r3,r2,4
    cbfc:	e0bffb17 	ldw	r2,-20(fp)
    cc00:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
    cc04:	e0bffb17 	ldw	r2,-20(fp)
}
    cc08:	e037883a 	mov	sp,fp
    cc0c:	dfc00117 	ldw	ra,4(sp)
    cc10:	df000017 	ldw	fp,0(sp)
    cc14:	dec00204 	addi	sp,sp,8
    cc18:	f800283a 	ret

0000cc1c <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
    cc1c:	defffe04 	addi	sp,sp,-8
    cc20:	df000115 	stw	fp,4(sp)
    cc24:	df000104 	addi	fp,sp,4
    cc28:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
    cc2c:	0001883a 	nop
    cc30:	e037883a 	mov	sp,fp
    cc34:	df000017 	ldw	fp,0(sp)
    cc38:	dec00104 	addi	sp,sp,4
    cc3c:	f800283a 	ret

0000cc40 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
    cc40:	defffe04 	addi	sp,sp,-8
    cc44:	df000115 	stw	fp,4(sp)
    cc48:	df000104 	addi	fp,sp,4
    cc4c:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
    cc50:	0001883a 	nop
    cc54:	e037883a 	mov	sp,fp
    cc58:	df000017 	ldw	fp,0(sp)
    cc5c:	dec00104 	addi	sp,sp,4
    cc60:	f800283a 	ret

0000cc64 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
    cc64:	deffff04 	addi	sp,sp,-4
    cc68:	df000015 	stw	fp,0(sp)
    cc6c:	d839883a 	mov	fp,sp
}
    cc70:	0001883a 	nop
    cc74:	e037883a 	mov	sp,fp
    cc78:	df000017 	ldw	fp,0(sp)
    cc7c:	dec00104 	addi	sp,sp,4
    cc80:	f800283a 	ret

0000cc84 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
    cc84:	deffff04 	addi	sp,sp,-4
    cc88:	df000015 	stw	fp,0(sp)
    cc8c:	d839883a 	mov	fp,sp
}
    cc90:	0001883a 	nop
    cc94:	e037883a 	mov	sp,fp
    cc98:	df000017 	ldw	fp,0(sp)
    cc9c:	dec00104 	addi	sp,sp,4
    cca0:	f800283a 	ret

0000cca4 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
    cca4:	deffff04 	addi	sp,sp,-4
    cca8:	df000015 	stw	fp,0(sp)
    ccac:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
    ccb0:	0001883a 	nop
    ccb4:	e037883a 	mov	sp,fp
    ccb8:	df000017 	ldw	fp,0(sp)
    ccbc:	dec00104 	addi	sp,sp,4
    ccc0:	f800283a 	ret

0000ccc4 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
    ccc4:	deffff04 	addi	sp,sp,-4
    ccc8:	df000015 	stw	fp,0(sp)
    cccc:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
    ccd0:	0001883a 	nop
    ccd4:	e037883a 	mov	sp,fp
    ccd8:	df000017 	ldw	fp,0(sp)
    ccdc:	dec00104 	addi	sp,sp,4
    cce0:	f800283a 	ret

0000cce4 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
    cce4:	deffff04 	addi	sp,sp,-4
    cce8:	df000015 	stw	fp,0(sp)
    ccec:	d839883a 	mov	fp,sp
}
    ccf0:	0001883a 	nop
    ccf4:	e037883a 	mov	sp,fp
    ccf8:	df000017 	ldw	fp,0(sp)
    ccfc:	dec00104 	addi	sp,sp,4
    cd00:	f800283a 	ret

0000cd04 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
    cd04:	deffff04 	addi	sp,sp,-4
    cd08:	df000015 	stw	fp,0(sp)
    cd0c:	d839883a 	mov	fp,sp
}
    cd10:	0001883a 	nop
    cd14:	e037883a 	mov	sp,fp
    cd18:	df000017 	ldw	fp,0(sp)
    cd1c:	dec00104 	addi	sp,sp,4
    cd20:	f800283a 	ret

0000cd24 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
    cd24:	defffe04 	addi	sp,sp,-8
    cd28:	df000115 	stw	fp,4(sp)
    cd2c:	df000104 	addi	fp,sp,4
    cd30:	e13fff15 	stw	r4,-4(fp)
}
    cd34:	0001883a 	nop
    cd38:	e037883a 	mov	sp,fp
    cd3c:	df000017 	ldw	fp,0(sp)
    cd40:	dec00104 	addi	sp,sp,4
    cd44:	f800283a 	ret

0000cd48 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    cd48:	defffb04 	addi	sp,sp,-20
    cd4c:	dfc00415 	stw	ra,16(sp)
    cd50:	df000315 	stw	fp,12(sp)
    cd54:	df000304 	addi	fp,sp,12
    cd58:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    cd5c:	d0a02417 	ldw	r2,-32624(gp)
    cd60:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    cd64:	00003106 	br	ce2c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    cd68:	e0bffd17 	ldw	r2,-12(fp)
    cd6c:	10800217 	ldw	r2,8(r2)
    cd70:	1009883a 	mov	r4,r2
    cd74:	000d3900 	call	d390 <strlen>
    cd78:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    cd7c:	e0bffd17 	ldw	r2,-12(fp)
    cd80:	10c00217 	ldw	r3,8(r2)
    cd84:	e0bffe17 	ldw	r2,-8(fp)
    cd88:	10bfffc4 	addi	r2,r2,-1
    cd8c:	1885883a 	add	r2,r3,r2
    cd90:	10800003 	ldbu	r2,0(r2)
    cd94:	10803fcc 	andi	r2,r2,255
    cd98:	1080201c 	xori	r2,r2,128
    cd9c:	10bfe004 	addi	r2,r2,-128
    cda0:	10800bd8 	cmpnei	r2,r2,47
    cda4:	1000031e 	bne	r2,zero,cdb4 <alt_find_file+0x6c>
    {
      len -= 1;
    cda8:	e0bffe17 	ldw	r2,-8(fp)
    cdac:	10bfffc4 	addi	r2,r2,-1
    cdb0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    cdb4:	e0bffe17 	ldw	r2,-8(fp)
    cdb8:	e0ffff17 	ldw	r3,-4(fp)
    cdbc:	1885883a 	add	r2,r3,r2
    cdc0:	10800003 	ldbu	r2,0(r2)
    cdc4:	10803fcc 	andi	r2,r2,255
    cdc8:	1080201c 	xori	r2,r2,128
    cdcc:	10bfe004 	addi	r2,r2,-128
    cdd0:	10800be0 	cmpeqi	r2,r2,47
    cdd4:	1000081e 	bne	r2,zero,cdf8 <alt_find_file+0xb0>
    cdd8:	e0bffe17 	ldw	r2,-8(fp)
    cddc:	e0ffff17 	ldw	r3,-4(fp)
    cde0:	1885883a 	add	r2,r3,r2
    cde4:	10800003 	ldbu	r2,0(r2)
    cde8:	10803fcc 	andi	r2,r2,255
    cdec:	1080201c 	xori	r2,r2,128
    cdf0:	10bfe004 	addi	r2,r2,-128
    cdf4:	10000a1e 	bne	r2,zero,ce20 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    cdf8:	e0bffd17 	ldw	r2,-12(fp)
    cdfc:	10800217 	ldw	r2,8(r2)
    ce00:	e0fffe17 	ldw	r3,-8(fp)
    ce04:	180d883a 	mov	r6,r3
    ce08:	e17fff17 	ldw	r5,-4(fp)
    ce0c:	1009883a 	mov	r4,r2
    ce10:	000d0a40 	call	d0a4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    ce14:	1000021e 	bne	r2,zero,ce20 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    ce18:	e0bffd17 	ldw	r2,-12(fp)
    ce1c:	00000706 	br	ce3c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    ce20:	e0bffd17 	ldw	r2,-12(fp)
    ce24:	10800017 	ldw	r2,0(r2)
    ce28:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    ce2c:	e0fffd17 	ldw	r3,-12(fp)
    ce30:	d0a02404 	addi	r2,gp,-32624
    ce34:	18bfcc1e 	bne	r3,r2,cd68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cd68>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    ce38:	0005883a 	mov	r2,zero
}
    ce3c:	e037883a 	mov	sp,fp
    ce40:	dfc00117 	ldw	ra,4(sp)
    ce44:	df000017 	ldw	fp,0(sp)
    ce48:	dec00204 	addi	sp,sp,8
    ce4c:	f800283a 	ret

0000ce50 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    ce50:	defff904 	addi	sp,sp,-28
    ce54:	dfc00615 	stw	ra,24(sp)
    ce58:	df000515 	stw	fp,20(sp)
    ce5c:	df000504 	addi	fp,sp,20
    ce60:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    ce64:	00bffa04 	movi	r2,-24
    ce68:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
    ce6c:	d0a80817 	ldw	r2,-24544(gp)
    ce70:	e0bffd15 	stw	r2,-12(fp)
    ce74:	e03ffe0d 	sth	zero,-8(fp)
    ce78:	e0bffe0b 	ldhu	r2,-8(fp)
    ce7c:	e0fffe84 	addi	r3,fp,-6
    ce80:	180d883a 	mov	r6,r3
    ce84:	100b883a 	mov	r5,r2
    ce88:	e13ffd17 	ldw	r4,-12(fp)
    ce8c:	000717c0 	call	717c <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    ce90:	e03ffb15 	stw	zero,-20(fp)
    ce94:	00001906 	br	cefc <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
    ce98:	00800074 	movhi	r2,1
    ce9c:	10bda704 	addi	r2,r2,-2404
    cea0:	e0fffb17 	ldw	r3,-20(fp)
    cea4:	18c00324 	muli	r3,r3,12
    cea8:	10c5883a 	add	r2,r2,r3
    ceac:	10800017 	ldw	r2,0(r2)
    ceb0:	10000f1e 	bne	r2,zero,cef0 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
    ceb4:	00800074 	movhi	r2,1
    ceb8:	10bda704 	addi	r2,r2,-2404
    cebc:	e0fffb17 	ldw	r3,-20(fp)
    cec0:	18c00324 	muli	r3,r3,12
    cec4:	10c5883a 	add	r2,r2,r3
    cec8:	e0ffff17 	ldw	r3,-4(fp)
    cecc:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    ced0:	d0e02817 	ldw	r3,-32608(gp)
    ced4:	e0bffb17 	ldw	r2,-20(fp)
    ced8:	1880020e 	bge	r3,r2,cee4 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
    cedc:	e0bffb17 	ldw	r2,-20(fp)
    cee0:	d0a02815 	stw	r2,-32608(gp)
      }
      rc = i;
    cee4:	e0bffb17 	ldw	r2,-20(fp)
    cee8:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
    ceec:	00000606 	br	cf08 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    cef0:	e0bffb17 	ldw	r2,-20(fp)
    cef4:	10800044 	addi	r2,r2,1
    cef8:	e0bffb15 	stw	r2,-20(fp)
    cefc:	e0bffb17 	ldw	r2,-20(fp)
    cf00:	10800810 	cmplti	r2,r2,32
    cf04:	103fe41e 	bne	r2,zero,ce98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ce98>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
    cf08:	d0a80817 	ldw	r2,-24544(gp)
    cf0c:	1009883a 	mov	r4,r2
    cf10:	00074f40 	call	74f4 <OSSemPost>

  return rc;
    cf14:	e0bffc17 	ldw	r2,-16(fp)
}
    cf18:	e037883a 	mov	sp,fp
    cf1c:	dfc00117 	ldw	ra,4(sp)
    cf20:	df000017 	ldw	fp,0(sp)
    cf24:	dec00204 	addi	sp,sp,8
    cf28:	f800283a 	ret

0000cf2c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    cf2c:	defffb04 	addi	sp,sp,-20
    cf30:	df000415 	stw	fp,16(sp)
    cf34:	df000404 	addi	fp,sp,16
    cf38:	e13ffe15 	stw	r4,-8(fp)
    cf3c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    cf40:	e0bfff17 	ldw	r2,-4(fp)
    cf44:	10840070 	cmpltui	r2,r2,4097
    cf48:	1000021e 	bne	r2,zero,cf54 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    cf4c:	00840004 	movi	r2,4096
    cf50:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    cf54:	e0fffe17 	ldw	r3,-8(fp)
    cf58:	e0bfff17 	ldw	r2,-4(fp)
    cf5c:	1885883a 	add	r2,r3,r2
    cf60:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    cf64:	e0bffe17 	ldw	r2,-8(fp)
    cf68:	e0bffc15 	stw	r2,-16(fp)
    cf6c:	00000506 	br	cf84 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    cf70:	e0bffc17 	ldw	r2,-16(fp)
    cf74:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    cf78:	e0bffc17 	ldw	r2,-16(fp)
    cf7c:	10800804 	addi	r2,r2,32
    cf80:	e0bffc15 	stw	r2,-16(fp)
    cf84:	e0fffc17 	ldw	r3,-16(fp)
    cf88:	e0bffd17 	ldw	r2,-12(fp)
    cf8c:	18bff836 	bltu	r3,r2,cf70 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cf70>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    cf90:	e0bffe17 	ldw	r2,-8(fp)
    cf94:	108007cc 	andi	r2,r2,31
    cf98:	10000226 	beq	r2,zero,cfa4 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    cf9c:	e0bffc17 	ldw	r2,-16(fp)
    cfa0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    cfa4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    cfa8:	0001883a 	nop
    cfac:	e037883a 	mov	sp,fp
    cfb0:	df000017 	ldw	fp,0(sp)
    cfb4:	dec00104 	addi	sp,sp,4
    cfb8:	f800283a 	ret

0000cfbc <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    cfbc:	defffe04 	addi	sp,sp,-8
    cfc0:	df000115 	stw	fp,4(sp)
    cfc4:	df000104 	addi	fp,sp,4
    cfc8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    cfcc:	e0bfff17 	ldw	r2,-4(fp)
    cfd0:	10bffe84 	addi	r2,r2,-6
    cfd4:	10c00428 	cmpgeui	r3,r2,16
    cfd8:	18001a1e 	bne	r3,zero,d044 <alt_exception_cause_generated_bad_addr+0x88>
    cfdc:	100690ba 	slli	r3,r2,2
    cfe0:	00800074 	movhi	r2,1
    cfe4:	10b3fd04 	addi	r2,r2,-12300
    cfe8:	1885883a 	add	r2,r3,r2
    cfec:	10800017 	ldw	r2,0(r2)
    cff0:	1000683a 	jmp	r2
    cff4:	0000d034 	movhi	zero,832
    cff8:	0000d034 	movhi	zero,832
    cffc:	0000d044 	movi	zero,833
    d000:	0000d044 	movi	zero,833
    d004:	0000d044 	movi	zero,833
    d008:	0000d034 	movhi	zero,832
    d00c:	0000d03c 	xorhi	zero,zero,832
    d010:	0000d044 	movi	zero,833
    d014:	0000d034 	movhi	zero,832
    d018:	0000d034 	movhi	zero,832
    d01c:	0000d044 	movi	zero,833
    d020:	0000d034 	movhi	zero,832
    d024:	0000d03c 	xorhi	zero,zero,832
    d028:	0000d044 	movi	zero,833
    d02c:	0000d044 	movi	zero,833
    d030:	0000d034 	movhi	zero,832
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    d034:	00800044 	movi	r2,1
    d038:	00000306 	br	d048 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    d03c:	0005883a 	mov	r2,zero
    d040:	00000106 	br	d048 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    d044:	0005883a 	mov	r2,zero
  }
}
    d048:	e037883a 	mov	sp,fp
    d04c:	df000017 	ldw	fp,0(sp)
    d050:	dec00104 	addi	sp,sp,4
    d054:	f800283a 	ret

0000d058 <atexit>:
    d058:	200b883a 	mov	r5,r4
    d05c:	000f883a 	mov	r7,zero
    d060:	000d883a 	mov	r6,zero
    d064:	0009883a 	mov	r4,zero
    d068:	000d4281 	jmpi	d428 <__register_exitproc>

0000d06c <exit>:
    d06c:	defffe04 	addi	sp,sp,-8
    d070:	000b883a 	mov	r5,zero
    d074:	dc000015 	stw	r16,0(sp)
    d078:	dfc00115 	stw	ra,4(sp)
    d07c:	2021883a 	mov	r16,r4
    d080:	000d5400 	call	d540 <__call_exitprocs>
    d084:	00800074 	movhi	r2,1
    d088:	10be0904 	addi	r2,r2,-2012
    d08c:	11000017 	ldw	r4,0(r2)
    d090:	20800f17 	ldw	r2,60(r4)
    d094:	10000126 	beq	r2,zero,d09c <exit+0x30>
    d098:	103ee83a 	callr	r2
    d09c:	8009883a 	mov	r4,r16
    d0a0:	000d6c00 	call	d6c0 <_exit>

0000d0a4 <memcmp>:
    d0a4:	01c000c4 	movi	r7,3
    d0a8:	3980192e 	bgeu	r7,r6,d110 <memcmp+0x6c>
    d0ac:	2144b03a 	or	r2,r4,r5
    d0b0:	11c4703a 	and	r2,r2,r7
    d0b4:	10000f26 	beq	r2,zero,d0f4 <memcmp+0x50>
    d0b8:	20800003 	ldbu	r2,0(r4)
    d0bc:	28c00003 	ldbu	r3,0(r5)
    d0c0:	10c0151e 	bne	r2,r3,d118 <memcmp+0x74>
    d0c4:	31bfff84 	addi	r6,r6,-2
    d0c8:	01ffffc4 	movi	r7,-1
    d0cc:	00000406 	br	d0e0 <memcmp+0x3c>
    d0d0:	20800003 	ldbu	r2,0(r4)
    d0d4:	28c00003 	ldbu	r3,0(r5)
    d0d8:	31bfffc4 	addi	r6,r6,-1
    d0dc:	10c00e1e 	bne	r2,r3,d118 <memcmp+0x74>
    d0e0:	21000044 	addi	r4,r4,1
    d0e4:	29400044 	addi	r5,r5,1
    d0e8:	31fff91e 	bne	r6,r7,d0d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d0d0>
    d0ec:	0005883a 	mov	r2,zero
    d0f0:	f800283a 	ret
    d0f4:	20c00017 	ldw	r3,0(r4)
    d0f8:	28800017 	ldw	r2,0(r5)
    d0fc:	18bfee1e 	bne	r3,r2,d0b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d0b8>
    d100:	31bfff04 	addi	r6,r6,-4
    d104:	21000104 	addi	r4,r4,4
    d108:	29400104 	addi	r5,r5,4
    d10c:	39bff936 	bltu	r7,r6,d0f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d0f4>
    d110:	303fe91e 	bne	r6,zero,d0b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d0b8>
    d114:	003ff506 	br	d0ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d0ec>
    d118:	10c5c83a 	sub	r2,r2,r3
    d11c:	f800283a 	ret

0000d120 <memcpy>:
    d120:	defffd04 	addi	sp,sp,-12
    d124:	dfc00215 	stw	ra,8(sp)
    d128:	dc400115 	stw	r17,4(sp)
    d12c:	dc000015 	stw	r16,0(sp)
    d130:	00c003c4 	movi	r3,15
    d134:	2005883a 	mov	r2,r4
    d138:	1980452e 	bgeu	r3,r6,d250 <memcpy+0x130>
    d13c:	2906b03a 	or	r3,r5,r4
    d140:	18c000cc 	andi	r3,r3,3
    d144:	1800441e 	bne	r3,zero,d258 <memcpy+0x138>
    d148:	347ffc04 	addi	r17,r6,-16
    d14c:	8822d13a 	srli	r17,r17,4
    d150:	28c00104 	addi	r3,r5,4
    d154:	23400104 	addi	r13,r4,4
    d158:	8820913a 	slli	r16,r17,4
    d15c:	2b000204 	addi	r12,r5,8
    d160:	22c00204 	addi	r11,r4,8
    d164:	84000504 	addi	r16,r16,20
    d168:	2a800304 	addi	r10,r5,12
    d16c:	22400304 	addi	r9,r4,12
    d170:	2c21883a 	add	r16,r5,r16
    d174:	2811883a 	mov	r8,r5
    d178:	200f883a 	mov	r7,r4
    d17c:	41000017 	ldw	r4,0(r8)
    d180:	1fc00017 	ldw	ra,0(r3)
    d184:	63c00017 	ldw	r15,0(r12)
    d188:	39000015 	stw	r4,0(r7)
    d18c:	53800017 	ldw	r14,0(r10)
    d190:	6fc00015 	stw	ra,0(r13)
    d194:	5bc00015 	stw	r15,0(r11)
    d198:	4b800015 	stw	r14,0(r9)
    d19c:	18c00404 	addi	r3,r3,16
    d1a0:	39c00404 	addi	r7,r7,16
    d1a4:	42000404 	addi	r8,r8,16
    d1a8:	6b400404 	addi	r13,r13,16
    d1ac:	63000404 	addi	r12,r12,16
    d1b0:	5ac00404 	addi	r11,r11,16
    d1b4:	52800404 	addi	r10,r10,16
    d1b8:	4a400404 	addi	r9,r9,16
    d1bc:	1c3fef1e 	bne	r3,r16,d17c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d17c>
    d1c0:	89c00044 	addi	r7,r17,1
    d1c4:	380e913a 	slli	r7,r7,4
    d1c8:	310003cc 	andi	r4,r6,15
    d1cc:	02c000c4 	movi	r11,3
    d1d0:	11c7883a 	add	r3,r2,r7
    d1d4:	29cb883a 	add	r5,r5,r7
    d1d8:	5900212e 	bgeu	r11,r4,d260 <memcpy+0x140>
    d1dc:	1813883a 	mov	r9,r3
    d1e0:	2811883a 	mov	r8,r5
    d1e4:	200f883a 	mov	r7,r4
    d1e8:	42800017 	ldw	r10,0(r8)
    d1ec:	4a400104 	addi	r9,r9,4
    d1f0:	39ffff04 	addi	r7,r7,-4
    d1f4:	4abfff15 	stw	r10,-4(r9)
    d1f8:	42000104 	addi	r8,r8,4
    d1fc:	59fffa36 	bltu	r11,r7,d1e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d1e8>
    d200:	213fff04 	addi	r4,r4,-4
    d204:	2008d0ba 	srli	r4,r4,2
    d208:	318000cc 	andi	r6,r6,3
    d20c:	21000044 	addi	r4,r4,1
    d210:	2109883a 	add	r4,r4,r4
    d214:	2109883a 	add	r4,r4,r4
    d218:	1907883a 	add	r3,r3,r4
    d21c:	290b883a 	add	r5,r5,r4
    d220:	30000626 	beq	r6,zero,d23c <memcpy+0x11c>
    d224:	198d883a 	add	r6,r3,r6
    d228:	29c00003 	ldbu	r7,0(r5)
    d22c:	18c00044 	addi	r3,r3,1
    d230:	29400044 	addi	r5,r5,1
    d234:	19ffffc5 	stb	r7,-1(r3)
    d238:	19bffb1e 	bne	r3,r6,d228 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d228>
    d23c:	dfc00217 	ldw	ra,8(sp)
    d240:	dc400117 	ldw	r17,4(sp)
    d244:	dc000017 	ldw	r16,0(sp)
    d248:	dec00304 	addi	sp,sp,12
    d24c:	f800283a 	ret
    d250:	2007883a 	mov	r3,r4
    d254:	003ff206 	br	d220 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d220>
    d258:	2007883a 	mov	r3,r4
    d25c:	003ff106 	br	d224 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d224>
    d260:	200d883a 	mov	r6,r4
    d264:	003fee06 	br	d220 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d220>

0000d268 <memset>:
    d268:	20c000cc 	andi	r3,r4,3
    d26c:	2005883a 	mov	r2,r4
    d270:	18004426 	beq	r3,zero,d384 <memset+0x11c>
    d274:	31ffffc4 	addi	r7,r6,-1
    d278:	30004026 	beq	r6,zero,d37c <memset+0x114>
    d27c:	2813883a 	mov	r9,r5
    d280:	200d883a 	mov	r6,r4
    d284:	2007883a 	mov	r3,r4
    d288:	00000406 	br	d29c <memset+0x34>
    d28c:	3a3fffc4 	addi	r8,r7,-1
    d290:	31800044 	addi	r6,r6,1
    d294:	38003926 	beq	r7,zero,d37c <memset+0x114>
    d298:	400f883a 	mov	r7,r8
    d29c:	18c00044 	addi	r3,r3,1
    d2a0:	32400005 	stb	r9,0(r6)
    d2a4:	1a0000cc 	andi	r8,r3,3
    d2a8:	403ff81e 	bne	r8,zero,d28c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d28c>
    d2ac:	010000c4 	movi	r4,3
    d2b0:	21c02d2e 	bgeu	r4,r7,d368 <memset+0x100>
    d2b4:	29003fcc 	andi	r4,r5,255
    d2b8:	200c923a 	slli	r6,r4,8
    d2bc:	3108b03a 	or	r4,r6,r4
    d2c0:	200c943a 	slli	r6,r4,16
    d2c4:	218cb03a 	or	r6,r4,r6
    d2c8:	010003c4 	movi	r4,15
    d2cc:	21c0182e 	bgeu	r4,r7,d330 <memset+0xc8>
    d2d0:	3b3ffc04 	addi	r12,r7,-16
    d2d4:	6018d13a 	srli	r12,r12,4
    d2d8:	1a000104 	addi	r8,r3,4
    d2dc:	1ac00204 	addi	r11,r3,8
    d2e0:	6008913a 	slli	r4,r12,4
    d2e4:	1a800304 	addi	r10,r3,12
    d2e8:	1813883a 	mov	r9,r3
    d2ec:	21000504 	addi	r4,r4,20
    d2f0:	1909883a 	add	r4,r3,r4
    d2f4:	49800015 	stw	r6,0(r9)
    d2f8:	41800015 	stw	r6,0(r8)
    d2fc:	59800015 	stw	r6,0(r11)
    d300:	51800015 	stw	r6,0(r10)
    d304:	42000404 	addi	r8,r8,16
    d308:	4a400404 	addi	r9,r9,16
    d30c:	5ac00404 	addi	r11,r11,16
    d310:	52800404 	addi	r10,r10,16
    d314:	413ff71e 	bne	r8,r4,d2f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d2f4>
    d318:	63000044 	addi	r12,r12,1
    d31c:	6018913a 	slli	r12,r12,4
    d320:	39c003cc 	andi	r7,r7,15
    d324:	010000c4 	movi	r4,3
    d328:	1b07883a 	add	r3,r3,r12
    d32c:	21c00e2e 	bgeu	r4,r7,d368 <memset+0x100>
    d330:	1813883a 	mov	r9,r3
    d334:	3811883a 	mov	r8,r7
    d338:	010000c4 	movi	r4,3
    d33c:	49800015 	stw	r6,0(r9)
    d340:	423fff04 	addi	r8,r8,-4
    d344:	4a400104 	addi	r9,r9,4
    d348:	223ffc36 	bltu	r4,r8,d33c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d33c>
    d34c:	393fff04 	addi	r4,r7,-4
    d350:	2008d0ba 	srli	r4,r4,2
    d354:	39c000cc 	andi	r7,r7,3
    d358:	21000044 	addi	r4,r4,1
    d35c:	2109883a 	add	r4,r4,r4
    d360:	2109883a 	add	r4,r4,r4
    d364:	1907883a 	add	r3,r3,r4
    d368:	38000526 	beq	r7,zero,d380 <memset+0x118>
    d36c:	19cf883a 	add	r7,r3,r7
    d370:	19400005 	stb	r5,0(r3)
    d374:	18c00044 	addi	r3,r3,1
    d378:	38fffd1e 	bne	r7,r3,d370 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d370>
    d37c:	f800283a 	ret
    d380:	f800283a 	ret
    d384:	2007883a 	mov	r3,r4
    d388:	300f883a 	mov	r7,r6
    d38c:	003fc706 	br	d2ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d2ac>

0000d390 <strlen>:
    d390:	208000cc 	andi	r2,r4,3
    d394:	10002026 	beq	r2,zero,d418 <strlen+0x88>
    d398:	20800007 	ldb	r2,0(r4)
    d39c:	10002026 	beq	r2,zero,d420 <strlen+0x90>
    d3a0:	2005883a 	mov	r2,r4
    d3a4:	00000206 	br	d3b0 <strlen+0x20>
    d3a8:	10c00007 	ldb	r3,0(r2)
    d3ac:	18001826 	beq	r3,zero,d410 <strlen+0x80>
    d3b0:	10800044 	addi	r2,r2,1
    d3b4:	10c000cc 	andi	r3,r2,3
    d3b8:	183ffb1e 	bne	r3,zero,d3a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d3a8>
    d3bc:	10c00017 	ldw	r3,0(r2)
    d3c0:	01ffbff4 	movhi	r7,65279
    d3c4:	39ffbfc4 	addi	r7,r7,-257
    d3c8:	00ca303a 	nor	r5,zero,r3
    d3cc:	01a02074 	movhi	r6,32897
    d3d0:	19c7883a 	add	r3,r3,r7
    d3d4:	31a02004 	addi	r6,r6,-32640
    d3d8:	1946703a 	and	r3,r3,r5
    d3dc:	1986703a 	and	r3,r3,r6
    d3e0:	1800091e 	bne	r3,zero,d408 <strlen+0x78>
    d3e4:	10800104 	addi	r2,r2,4
    d3e8:	10c00017 	ldw	r3,0(r2)
    d3ec:	19cb883a 	add	r5,r3,r7
    d3f0:	00c6303a 	nor	r3,zero,r3
    d3f4:	28c6703a 	and	r3,r5,r3
    d3f8:	1986703a 	and	r3,r3,r6
    d3fc:	183ff926 	beq	r3,zero,d3e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d3e4>
    d400:	00000106 	br	d408 <strlen+0x78>
    d404:	10800044 	addi	r2,r2,1
    d408:	10c00007 	ldb	r3,0(r2)
    d40c:	183ffd1e 	bne	r3,zero,d404 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d404>
    d410:	1105c83a 	sub	r2,r2,r4
    d414:	f800283a 	ret
    d418:	2005883a 	mov	r2,r4
    d41c:	003fe706 	br	d3bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d3bc>
    d420:	0005883a 	mov	r2,zero
    d424:	f800283a 	ret

0000d428 <__register_exitproc>:
    d428:	defffa04 	addi	sp,sp,-24
    d42c:	dc000315 	stw	r16,12(sp)
    d430:	04000074 	movhi	r16,1
    d434:	843e0904 	addi	r16,r16,-2012
    d438:	80c00017 	ldw	r3,0(r16)
    d43c:	dc400415 	stw	r17,16(sp)
    d440:	dfc00515 	stw	ra,20(sp)
    d444:	18805217 	ldw	r2,328(r3)
    d448:	2023883a 	mov	r17,r4
    d44c:	10003726 	beq	r2,zero,d52c <__register_exitproc+0x104>
    d450:	10c00117 	ldw	r3,4(r2)
    d454:	010007c4 	movi	r4,31
    d458:	20c00e16 	blt	r4,r3,d494 <__register_exitproc+0x6c>
    d45c:	1a000044 	addi	r8,r3,1
    d460:	8800221e 	bne	r17,zero,d4ec <__register_exitproc+0xc4>
    d464:	18c00084 	addi	r3,r3,2
    d468:	18c7883a 	add	r3,r3,r3
    d46c:	18c7883a 	add	r3,r3,r3
    d470:	12000115 	stw	r8,4(r2)
    d474:	10c7883a 	add	r3,r2,r3
    d478:	19400015 	stw	r5,0(r3)
    d47c:	0005883a 	mov	r2,zero
    d480:	dfc00517 	ldw	ra,20(sp)
    d484:	dc400417 	ldw	r17,16(sp)
    d488:	dc000317 	ldw	r16,12(sp)
    d48c:	dec00604 	addi	sp,sp,24
    d490:	f800283a 	ret
    d494:	00800034 	movhi	r2,0
    d498:	10827e04 	addi	r2,r2,2552
    d49c:	10002626 	beq	r2,zero,d538 <__register_exitproc+0x110>
    d4a0:	01006404 	movi	r4,400
    d4a4:	d9400015 	stw	r5,0(sp)
    d4a8:	d9800115 	stw	r6,4(sp)
    d4ac:	d9c00215 	stw	r7,8(sp)
    d4b0:	00009f80 	call	9f8 <malloc>
    d4b4:	d9400017 	ldw	r5,0(sp)
    d4b8:	d9800117 	ldw	r6,4(sp)
    d4bc:	d9c00217 	ldw	r7,8(sp)
    d4c0:	10001d26 	beq	r2,zero,d538 <__register_exitproc+0x110>
    d4c4:	81000017 	ldw	r4,0(r16)
    d4c8:	10000115 	stw	zero,4(r2)
    d4cc:	02000044 	movi	r8,1
    d4d0:	22405217 	ldw	r9,328(r4)
    d4d4:	0007883a 	mov	r3,zero
    d4d8:	12400015 	stw	r9,0(r2)
    d4dc:	20805215 	stw	r2,328(r4)
    d4e0:	10006215 	stw	zero,392(r2)
    d4e4:	10006315 	stw	zero,396(r2)
    d4e8:	883fde26 	beq	r17,zero,d464 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d464>
    d4ec:	18c9883a 	add	r4,r3,r3
    d4f0:	2109883a 	add	r4,r4,r4
    d4f4:	1109883a 	add	r4,r2,r4
    d4f8:	21802215 	stw	r6,136(r4)
    d4fc:	01800044 	movi	r6,1
    d500:	12406217 	ldw	r9,392(r2)
    d504:	30cc983a 	sll	r6,r6,r3
    d508:	4992b03a 	or	r9,r9,r6
    d50c:	12406215 	stw	r9,392(r2)
    d510:	21c04215 	stw	r7,264(r4)
    d514:	01000084 	movi	r4,2
    d518:	893fd21e 	bne	r17,r4,d464 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d464>
    d51c:	11006317 	ldw	r4,396(r2)
    d520:	218cb03a 	or	r6,r4,r6
    d524:	11806315 	stw	r6,396(r2)
    d528:	003fce06 	br	d464 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d464>
    d52c:	18805304 	addi	r2,r3,332
    d530:	18805215 	stw	r2,328(r3)
    d534:	003fc606 	br	d450 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d450>
    d538:	00bfffc4 	movi	r2,-1
    d53c:	003fd006 	br	d480 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d480>

0000d540 <__call_exitprocs>:
    d540:	defff504 	addi	sp,sp,-44
    d544:	df000915 	stw	fp,36(sp)
    d548:	dd400615 	stw	r21,24(sp)
    d54c:	dc800315 	stw	r18,12(sp)
    d550:	dfc00a15 	stw	ra,40(sp)
    d554:	ddc00815 	stw	r23,32(sp)
    d558:	dd800715 	stw	r22,28(sp)
    d55c:	dd000515 	stw	r20,20(sp)
    d560:	dcc00415 	stw	r19,16(sp)
    d564:	dc400215 	stw	r17,8(sp)
    d568:	dc000115 	stw	r16,4(sp)
    d56c:	d9000015 	stw	r4,0(sp)
    d570:	2839883a 	mov	fp,r5
    d574:	04800044 	movi	r18,1
    d578:	057fffc4 	movi	r21,-1
    d57c:	00800074 	movhi	r2,1
    d580:	10be0904 	addi	r2,r2,-2012
    d584:	12000017 	ldw	r8,0(r2)
    d588:	45005217 	ldw	r20,328(r8)
    d58c:	44c05204 	addi	r19,r8,328
    d590:	a0001c26 	beq	r20,zero,d604 <__call_exitprocs+0xc4>
    d594:	a0800117 	ldw	r2,4(r20)
    d598:	15ffffc4 	addi	r23,r2,-1
    d59c:	b8000d16 	blt	r23,zero,d5d4 <__call_exitprocs+0x94>
    d5a0:	14000044 	addi	r16,r2,1
    d5a4:	8421883a 	add	r16,r16,r16
    d5a8:	8421883a 	add	r16,r16,r16
    d5ac:	84402004 	addi	r17,r16,128
    d5b0:	a463883a 	add	r17,r20,r17
    d5b4:	a421883a 	add	r16,r20,r16
    d5b8:	e0001e26 	beq	fp,zero,d634 <__call_exitprocs+0xf4>
    d5bc:	80804017 	ldw	r2,256(r16)
    d5c0:	e0801c26 	beq	fp,r2,d634 <__call_exitprocs+0xf4>
    d5c4:	bdffffc4 	addi	r23,r23,-1
    d5c8:	843fff04 	addi	r16,r16,-4
    d5cc:	8c7fff04 	addi	r17,r17,-4
    d5d0:	bd7ff91e 	bne	r23,r21,d5b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d5b8>
    d5d4:	00800034 	movhi	r2,0
    d5d8:	10828304 	addi	r2,r2,2572
    d5dc:	10000926 	beq	r2,zero,d604 <__call_exitprocs+0xc4>
    d5e0:	a0800117 	ldw	r2,4(r20)
    d5e4:	1000301e 	bne	r2,zero,d6a8 <__call_exitprocs+0x168>
    d5e8:	a0800017 	ldw	r2,0(r20)
    d5ec:	10003226 	beq	r2,zero,d6b8 <__call_exitprocs+0x178>
    d5f0:	a009883a 	mov	r4,r20
    d5f4:	98800015 	stw	r2,0(r19)
    d5f8:	0000a0c0 	call	a0c <free>
    d5fc:	9d000017 	ldw	r20,0(r19)
    d600:	a03fe41e 	bne	r20,zero,d594 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d594>
    d604:	dfc00a17 	ldw	ra,40(sp)
    d608:	df000917 	ldw	fp,36(sp)
    d60c:	ddc00817 	ldw	r23,32(sp)
    d610:	dd800717 	ldw	r22,28(sp)
    d614:	dd400617 	ldw	r21,24(sp)
    d618:	dd000517 	ldw	r20,20(sp)
    d61c:	dcc00417 	ldw	r19,16(sp)
    d620:	dc800317 	ldw	r18,12(sp)
    d624:	dc400217 	ldw	r17,8(sp)
    d628:	dc000117 	ldw	r16,4(sp)
    d62c:	dec00b04 	addi	sp,sp,44
    d630:	f800283a 	ret
    d634:	a0800117 	ldw	r2,4(r20)
    d638:	80c00017 	ldw	r3,0(r16)
    d63c:	10bfffc4 	addi	r2,r2,-1
    d640:	15c01426 	beq	r2,r23,d694 <__call_exitprocs+0x154>
    d644:	80000015 	stw	zero,0(r16)
    d648:	183fde26 	beq	r3,zero,d5c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d5c4>
    d64c:	95c8983a 	sll	r4,r18,r23
    d650:	a0806217 	ldw	r2,392(r20)
    d654:	a5800117 	ldw	r22,4(r20)
    d658:	2084703a 	and	r2,r4,r2
    d65c:	10000b26 	beq	r2,zero,d68c <__call_exitprocs+0x14c>
    d660:	a0806317 	ldw	r2,396(r20)
    d664:	2088703a 	and	r4,r4,r2
    d668:	20000c1e 	bne	r4,zero,d69c <__call_exitprocs+0x15c>
    d66c:	89400017 	ldw	r5,0(r17)
    d670:	d9000017 	ldw	r4,0(sp)
    d674:	183ee83a 	callr	r3
    d678:	a0800117 	ldw	r2,4(r20)
    d67c:	15bfbf1e 	bne	r2,r22,d57c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d57c>
    d680:	98800017 	ldw	r2,0(r19)
    d684:	153fcf26 	beq	r2,r20,d5c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d5c4>
    d688:	003fbc06 	br	d57c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d57c>
    d68c:	183ee83a 	callr	r3
    d690:	003ff906 	br	d678 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d678>
    d694:	a5c00115 	stw	r23,4(r20)
    d698:	003feb06 	br	d648 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d648>
    d69c:	89000017 	ldw	r4,0(r17)
    d6a0:	183ee83a 	callr	r3
    d6a4:	003ff406 	br	d678 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d678>
    d6a8:	a0800017 	ldw	r2,0(r20)
    d6ac:	a027883a 	mov	r19,r20
    d6b0:	1029883a 	mov	r20,r2
    d6b4:	003fb606 	br	d590 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d590>
    d6b8:	0005883a 	mov	r2,zero
    d6bc:	003ffb06 	br	d6ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d6ac>

0000d6c0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    d6c0:	defffd04 	addi	sp,sp,-12
    d6c4:	df000215 	stw	fp,8(sp)
    d6c8:	df000204 	addi	fp,sp,8
    d6cc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    d6d0:	d027f445 	stb	zero,-24623(gp)
    d6d4:	e0bfff17 	ldw	r2,-4(fp)
    d6d8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    d6dc:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    d6e0:	10000226 	beq	r2,zero,d6ec <_exit+0x2c>
    ALT_SIM_FAIL();
    d6e4:	002af070 	cmpltui	zero,zero,43969
    d6e8:	00000106 	br	d6f0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    d6ec:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    d6f0:	003fff06 	br	d6f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d6f0>
